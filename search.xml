<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5815. 扣分后的最大得分</title>
    <url>/2021/864291102.html</url>
    <content><![CDATA[<p>今天呢，上午还算是比较有空的，便是参加了<a
href="https://leetcode-cn.com/contest/weekly-contest-250/">一场 LeetCode
的周赛</a>，而且还是第一次的周赛，体验还是挺不错的。</p>
<span id="more"></span>
<p>上午室友回家，我也是跟着醒的比较早，起床去吃个饭，回来后把宿舍打扫了一遍，以后一个半月这就是我一人的寝室了，妙，然后又去洗了洗衣服，堆了一旬的衣服，感觉再不洗就要发馊了，于是呢，便是搓搓揉揉，又是到了十点半。我一看表，呕吼，周赛要开始了，赶紧拿着电脑跑到了图书馆，其实宿舍也是可以打比赛的，可惜在宿舍学都学不下去，比赛也会不想打的。</p>
<p>到了图书馆已是十点四十五了，问题也不算太大，毕竟是佛系参赛选手，虽然是第一次。</p>
<p>现在呢，算是结束了，刚刚吃完午饭回来，还是写一下吧。</p>
<hr />
<blockquote>
<p>给你一个 m x n 的整数矩阵 points （下标从 0 开始）。一开始你的得分为
0 ，你想最大化从矩阵中得到的分数。</p>
<p>你的得分方式为：每一行 中选取一个格子，选中坐标为 (r, c)
的格子会给你的总得分 增加 points[r][c] 。</p>
<p>然而，相邻行之间被选中的格子如果隔得太远，你会失去一些得分。对于相邻行
r 和 r + 1 （其中 0 &lt;= r &lt; m - 1），选中坐标为 (r, c1) 和 (r + 1,
c2) 的格子，你的总得分 减少 abs(c1 - c2) 。</p>
<p>请你返回你能得到的 最大 得分。</p>
<p>abs(x) 定义为：</p>
<p>如果 x &gt;= 0 ，那么值为 x 。 如果 x &lt; 0 ，那么值为 -x 。</p>
<p>示例 1：</p>
<p>1 2 <strong>3</strong></p>
<p>1 <strong>5</strong> 1</p>
<p><strong>3</strong> 1 1</p>
<p>输入：points = [[1,2,3],[1,5,1],[3,1,1]] 输出：9 解释：
蓝色格子是最优方案选中的格子，坐标分别为 (0, 2)，(1, 1) 和 (2, 0) 。
你的总得分增加 3 + 5 + 3 = 11 。 但是你的总得分需要扣除 abs(2 - 1) +
abs(1 - 0) = 2 。 你的最终得分为 11 - 2 = 9 。</p>
</blockquote>
<hr />
<p>那么这一题要怎么求解呢？显而易见，这是一道动态规划问题。</p>
<p>用 <span class="math inline">\(n\)</span> 表示行数，<span
class="math inline">\(m\)</span> 表示列数。</p>
<p>定义 <span class="math inline">\(f[i][j]\)</span> 表示前 <span
class="math inline">\(i\)</span> 行中，第 <span
class="math inline">\(i\)</span> 行选择 <span
class="math inline">\(\textit{points}[i][j]\)</span> 时的最大得分，则有
<span class="math display">\[
f[i][j]=points[i][j]+maxf[i−1][k]−∣k−j∣\tag{1}
\]</span> 拆掉绝对值符号，将上式变形为 <span class="math display">\[
f[i][j]=\left\{
\begin{matrix}
points[i][j]+maxf[i−1][k]-(j-k), k\leq j\\
points[i][j]+maxf[i−1][k]-(k-j), k&gt; j\\
\end{matrix}
\right.\tag{2}
\]</span> 将 <span class="math inline">\(j\)</span> 提出来，化简为 <span
class="math display">\[
f[i][j]= \left \{ \begin{matrix}
points[i][j]−j+maxf[i−1][k]+k,{k\leq j}\\
points[i][j]+j+maxf[i−1][k]−k,{k&gt; j}\\
\end{matrix} \right.\tag{3}
\]</span> 由上式可知，在计算 <span
class="math inline">\(f[i][j]\)</span> 时，我们需要知道位置 <span
class="math inline">\(j\)</span> 左侧的 <span
class="math inline">\(f[i-1][k] + k\)</span> 的最大值，以及位置 <span
class="math inline">\(j\)</span> 右侧的 <span
class="math inline">\(f[i-1][k] - k\)</span>
的最大值。这可以在计算完一整行 <span
class="math inline">\(f[i-1]\)</span>之后，在计算下一行 <span
class="math inline">\(f[i]\)</span> 之前，预处理出来。</p>
<p>在实现的时候，<span class="math inline">\(k \leq j\)</span> 和 <span
class="math inline">\(k&gt;j\)</span> 可以分开来实现，对于 <span
class="math inline">\(k \leq j\)</span>，可事先让 <span
class="math inline">\(k\)</span> 和 <span
class="math inline">\(j\)</span> 都从 0 开始，使得 <span
class="math inline">\(k \leq j\)</span>；对于<span
class="math inline">\(k&gt;j\)</span> 则是可以使得 <span
class="math inline">\(k\)</span> 从 <span
class="math inline">\(n-1\)</span> 开始，而 <span
class="math inline">\(j\)</span> 从 <span
class="math inline">\(n-2\)</span> 开始，使得 <span
class="math inline">\(k&gt;j\)</span> 。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token comment"># height</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># width</span>
        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 从左到右</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token comment"># 这里的 j 即为 k，k一定是小于等于 j 的</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">+</span> ans<span class="token punctuation">)</span>
            
            ans <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 从右到左</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j <span class="token operator">+</span> ans<span class="token punctuation">)</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token comment"># 这里的 j 即为 k，k一定是大于等于 j 的</span>
        
        ans <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如图所示：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210718142316758.png" /></p>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/1243066710.html</url>
    <content><![CDATA[<p>终于呢，又是开通了我的博客，之所以是说终于，是因为之前也是开通过，但是呢，因为各种各样原因逐渐搁置，所以便是逐渐落下了博客的更新。</p>
<p>现在突然就想记录点什么了，希望能够记录下去吧。</p>
<p>Hexo&amp;Next.Pisces 重启，采用的 <a href="https://hexo.io/">Hexo</a>
开通的博客，<a href="https://theme-next.js.org/">NexT - Theme for
Hexo</a> 作为主题。</p>
<p>以后呢，会记录一下我的工作、学习与生活，会分享生活亦或是学习的点点滴滴，也不要再将这个站点落下了。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 友链配置</title>
    <url>/2021/851229289.html</url>
    <content><![CDATA[<p>在进行配置 Hexo Next
的友情链接的时候遇到了一些麻烦，特此进行记录如何进行 Hexo Next
友链的配置。</p>
<span id="more"></span>
<h3 id="创建一个友链界面">创建一个友链界面</h3>
<p>首先像创建其他的菜单栏一样创建一个新的菜单</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page links<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后呢，需要在主题的<code>_config.yml</code>文件中进行如下配置，即在最后一行加上<code>links: /links/ || fa fa-link</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags
  <span class="token comment">#categories: /categories/ || fa fa-th</span>
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive
  <span class="token comment">#schedule: /schedule/ || fa fa-calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || fa fa-sitemap</span>
  <span class="token comment">#commonweal: /404/ || fa fa-heartbeat</span>
  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>user
  <span class="token key atrule">links</span><span class="token punctuation">:</span> /links/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="写友链">写友链</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blog/source/links/index.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>index.md</code>中写入以下内容便是配置完成啦！</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 友情链接
<span class="token key atrule">type</span><span class="token punctuation">:</span> links</span>
<span class="token punctuation">---</span></span>

以下为本站的友情链接。

&#123;% linkgrid %&#125;
周涛的站点 | https://zepoch.github.io | 记录我的工作学习与生活 | https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/avatar.png

&#123;% endlinkgrid %&#125;

如有意交换友情链接，可在评论区留言，格式参考下方。为了确保头像显示正确，建议使用 Gravatar 或者 jsDelivr 等服务。如果需要更新博客信息，请留言回复。

&#123;% note success %&#125;

<span class="token list punctuation">-</span> 名称：周涛的站点
<span class="token list punctuation">-</span> 网址：https://zepoch.github.io/
<span class="token list punctuation">-</span> 简介：记录我的工作学习与生活
<span class="token list punctuation">-</span> 头像：https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/avatar.png

&#123;% endnote %&#125;

请您务必确保域名解析正确、https 证书有效且服务器工作正常。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考">参考</h3>
<p><a
href="https://theme-next.js.org/docs/tag-plugins/link-grid.html">Link
Grid | NexT (theme-next.js.org)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>My name is Mingfei Lu, I like online computer game and panda!</title>
    <url>/2021/3623301362.html</url>
    <content><![CDATA[<p>一年一度，又是路明非的生日，书里的他已是大四在读，而我也将步入大四，但愿也能成长为能够独当一面的卡塞尔精英吧。</p>
<p><img src= "/%E5%9B%BE%E7%89%87%E6%AD%A3%E5%9C%A8%E5%8A%A0%E8%BD%BD" data-lazy-src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717183450077.png" alt="image-20210717183450077" style="zoom:50%;" /></p>
<span id="more"></span>
<p><strong>人生若只如初见</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/640.webp"
alt="640" /></p>
<blockquote>
<p>可压力越大，路明非越懒，除了打打星际争霸，就是躺在床上望着屋顶发呆。</p>
<p>作为一个没什么存在感的人，他的懒惰其实不难理解。</p>
<p>……</p>
<p>只有路明非知道这野马般的生活多无聊，在网吧里坐到发腻之后，他就回家，进了楼却不进屋，而是上到天台，坐在嗡嗡响的空调机边，眺望这个城市，直到太阳西下。</p>
</blockquote>
<p><strong>小写的“i”</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/641.webp"
alt="641" /></p>
<blockquote>
<p>这一次，路明非看懂了。</p>
<p>身体从指尖一寸一寸地凉下来，凉到心里，凉到头盖骨深处，凉到那些因为采蒲公英跑了太多路还在酸痛的关节。</p>
<p>徐岩岩和徐淼淼是两个“o”，他是那个小写的“i”，合起来就是完美的，“陈雯雯，i
Love You。”</p>
<p>他是那个i，少他不成句，还是最风骚的小写。</p>
<p>以路明非的脑袋瓜子，想破了也想不出这样浪漫的手法，但是有人的脑袋瓜子比路明非好用，英语更比路明非强，从小就有英语家教嘛。</p>
<p>路明非看着陈雯雯，陈雯雯在看赵孟华，眼睛里仿佛蕴着夏夜的露水，就要流淌下来。她和路明非坐在河边的时候那么忧郁和沉默，这时候却不了，路明非看得出她眼里的快乐。</p>
<p>路明非觉得自己石化了，就要一点点碎掉了。他忽然想到自己包里的那束蒲公英，一路上跑过来，是不是零落得只剩下光秃秃的杆儿了？</p>
</blockquote>
<p><strong>1/4 诺诺</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E8%AF%BA%E8%AF%BA.webp"
alt="诺诺" /></p>
<blockquote>
<p>插在诺诺心口中的尾刺剧烈地颤动着，龙王一直没有拔出这根尾刺，可能只是要看这个女孩痛苦而缓慢地死去。但他意识到有什么不对，正试图彻底撕裂这个女孩。</p>
<p>“混账。”路明非说，口吻平静。</p>
<p>他抓住诺诺心口处的尾刺，全身骨骼发出爆裂的响声。他掰断了尾刺，把它随手丢在江水里。疼痛令龙王怒吼，但他不是立刻进攻路明非，而是抽回长尾迅速地远离。</p>
<p>不知为何路明非确信自己能做到这件事，此刻他血管里涌动着巨大的力量，灼热得像是岩浆奔流。</p>
<p>他不再是那个缩头缩脑的男孩，不会动不动吐槽，不会大惊小怪。他是控制者、权力者、发号施令者。</p>
</blockquote>
<p><strong>重临世界！</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E9%87%8D%E4%B8%B4%E4%B8%96%E7%95%8C.webp"
alt="重临世界" /></p>
<blockquote>
<p>龙疯狂地哀嚎，一瞬间能把人毁灭数百次的痛楚如千万刀刃流入他的脑内。</p>
<p>路明非松开“暴怒”的刀柄，踩着龙首跃空而起，如同希腊神话中那个以蜡封羽毛为羽翼飞向太阳的美少年伊卡洛斯，张开双臂，迎着黑暗中的火雨，仿佛要去拥抱并不存在的太阳，陶醉于它的光焰，全然不惧被高温烧毁了羽翼而坠落。</p>
<p>他没有坠落，他被狂风托住了。巨大的骨翼张开于背后，他以翼和身组成巨大的十字，立于虚空和黑暗之中，金色瞳孔中闪烁着愤怒、仇恨和君王之罚的冷酷。</p>
<p>他伸手向着下方的巨龙，说出了最终审判的圣言：</p>
<p>“我重临世界之日，诸逆臣皆当死去！”</p>
</blockquote>
<p><strong>樱花般的柔软</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E5%B0%8F%E6%A8%B1%E8%8A%B1.webp"
alt="小樱花" /></p>
<blockquote>
<p>一个潜水头盔扣在他脑袋上，氧气进入肺部，路明非的神志略微恢复。</p>
<p>头盔内部的灯照亮的了路明非的眼睛，他竭力想看清抱他的人，但眼前一片模糊。</p>
<p>这女孩的力量超越了路明非所见的任何混血种，诺诺凛然如一株玫瑰，抱他的女孩却有着樱花般的柔软。</p>
<p>他努力地看向手中，手中是一个黄色的橡皮鸭子。</p>
<p>“我不会死的，”他在心底轻声说，“因为你还没有……放弃我啊。”</p>
</blockquote>
<p><strong>拾萬零叁佰貳拾</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E6%9C%80%E5%A5%BD%E7%9A%84%E5%B0%8F%E6%A8%B1%E8%8A%B1.webp"
alt="最好的小樱花" /></p>
<blockquote>
<p>“这样加上之前在我这里买的花票，总数是十万零三百二十张花票，恭喜小樱花，你通过了实习期，成为这个家庭的一员。”座头鲸忽然不闹腾了，从西装口袋里抽出一张支票，举过头顶给所有人看，投影机立刻把放大之后的支票投在舞台背景上，没错那是一张一亿日圆的支票，以今日的汇率来说，大约是95万美元。一张罕见的大额支票，座头鲸把那张支票投进服务生手中的金箱子，看着路明非说：“是的，有人希望你留下，几天前她来找过我。”</p>
</blockquote>
<blockquote>
<p>“04.24，和Sakura
去东京天空树，世界上最暖和的地方在天空树的顶上。”</p>
<p>“04.26，和Sakura 去明治神宫，有人在那里举办婚礼。”</p>
<p>“04.25，和Sakura
去迪士尼，鬼屋很可怕，但是有Sakura在，所以不可怕。”</p>
<p>“Sakura 最好了。”</p>
</blockquote>
]]></content>
      <tags>
        <tag>龙族</tag>
      </tags>
  </entry>
  <entry>
    <title>how to run Spatial ID</title>
    <url>/2023/3439187702.html</url>
    <content><![CDATA[<p>before you start to run the program, you should make something
installed.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
pip <span class="token function">install</span> torch-cluster -f https://pytorch-geometric.com/whl/torch-2.0.1+cpu.html
pip <span class="token function">install</span> torch-scatter -f https://pytorch-geometric.com/whl/torch-2.0.1+cpu.html
pip <span class="token function">install</span> torch-sparse -f https://pytorch-geometric.com/whl/torch-2.0.1+cpu.html
pip <span class="token function">install</span> torch-geometric<span class="token operator">==</span><span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Before running, you need to copy the
<code>cell_type_annotation_model.pyc</code> file to the program running
directory. The first is the introduction of the package</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> time
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>sparse <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> random
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> anndata
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> scanpy <span class="token keyword">as</span> sc
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch_geometric
<span class="token keyword">from</span> cell_type_annotation_model <span class="token keyword">import</span> DNNModel<span class="token punctuation">,</span> SpatialModelTrainer
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Then there is the setting of random seed, so that the experimental
results can be repeated</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>
torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Next is the reading of single cell data. It should be noted that the
homogenization of single cells needs to be consistent with the spatial
group. If the. X matrix of a single cell is the original counts matrix,
then the. X matrix of the spatial group should also be the original
matrix; If the. X matrix of a single cell is a matrix processed by log
normalization, then the. X matrix of a spatial group should also be a
matrix processed by log normalization, the same applies to other
matrices. I have already processed the single cell data and spatial
group data consistently in this note, so I will not elaborate on the
normalization steps here.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">adata <span class="token operator">=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'../single_cell/snrna_fetal_brain.h5ad'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Next is the training of the DNN model. We can see the process in the
first diagram of the Spatial ID original text. The first step is to
train a DNN model using one's own single cell data, and then proceed
with subsequent processing. The following is the training process of the
DNN model I wrote for your reference</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dnn_train</span><span class="token punctuation">(</span>adata<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> train_percent<span class="token punctuation">,</span> epoches<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">,</span> model_save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment">#### labels_transform</span>
    <span class="token keyword">def</span> <span class="token function">labels_transform</span><span class="token punctuation">(</span>raw_labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        raw_labels_copy <span class="token operator">=</span> raw_labels<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        labels_categroies <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>raw_labels<span class="token punctuation">)</span><span class="token punctuation">]</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>labels_categroies<span class="token punctuation">)</span>
        re_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
            raw_labels_copy<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>labels_categroies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
            re_dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> labels_categroies<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> raw_labels_copy<span class="token punctuation">]</span><span class="token punctuation">,</span>re_dic
    
    <span class="token comment">### save models</span>
    <span class="token keyword">def</span> <span class="token function">save_model</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> save model...&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token string">'model'</span><span class="token punctuation">:</span>DnnModel<span class="token punctuation">,</span>
            <span class="token string">'label_names'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>lable_dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lable_dic<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">'marker_genes'</span><span class="token punctuation">:</span>gene_names<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> model_save_path<span class="token operator">+</span> <span class="token string">'_'</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'.dnnmodel'</span><span class="token punctuation">)</span>
    
    
    <span class="token comment">###preprocess</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> Preprocessing...'</span><span class="token punctuation">)</span>
    adata_x <span class="token operator">=</span> adata<span class="token punctuation">.</span>X<span class="token punctuation">.</span>todense<span class="token punctuation">(</span><span class="token punctuation">)</span>
    raw_labels <span class="token operator">=</span> adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>labels<span class="token punctuation">]</span>
    gene_names <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> adata<span class="token punctuation">.</span>var_names<span class="token punctuation">]</span>
    labels<span class="token punctuation">,</span> lable_dic <span class="token operator">=</span> labels_transform<span class="token punctuation">(</span>raw_labels<span class="token punctuation">)</span>
    inputs<span class="token punctuation">,</span> outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>adata_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">###dataloader</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> Predataloader...'</span><span class="token punctuation">)</span>
    dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>
    tran_legth<span class="token punctuation">,</span> test_length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token operator">*</span>train_percent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token operator">*</span>train_percent<span class="token punctuation">)</span>
    train_set<span class="token punctuation">,</span> test_set <span class="token operator">=</span> Data<span class="token punctuation">.</span>random_split<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> <span class="token punctuation">[</span>tran_legth<span class="token punctuation">,</span> test_length<span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> 
                                   batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> 
                                   shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
    
    test_loader <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>test_set<span class="token punctuation">,</span> 
                                  batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> 
                                  shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    
    <span class="token comment">#####</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> DnnModel...'</span><span class="token punctuation">)</span>
    input_dim <span class="token operator">=</span> inputs<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    hidden_dim <span class="token operator">=</span> hidden_dim
    output_dim <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>
    learning_rate <span class="token operator">=</span> learning_rate
    
    DnnModel <span class="token operator">=</span> DNNModel<span class="token punctuation">(</span>input_dim <span class="token operator">=</span> input_dim<span class="token punctuation">,</span> 
                    hidden_dim <span class="token operator">=</span> hidden_dim<span class="token punctuation">,</span> 
                    output_dim <span class="token operator">=</span> output_dim<span class="token punctuation">,</span>
                    drop_rate<span class="token operator">=</span><span class="token number">0.2</span>
                       <span class="token punctuation">)</span>
    <span class="token comment">###train</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> train...'</span><span class="token punctuation">)</span>
    counts <span class="token operator">=</span> <span class="token number">0</span>
    max_acc <span class="token operator">=</span> <span class="token number">0</span>
    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>DnnModel<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> learning_rate<span class="token punctuation">)</span>
    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoches<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> input_tensor<span class="token punctuation">,</span>transformed_labels <span class="token keyword">in</span> train_loader<span class="token punctuation">:</span>
            out <span class="token operator">=</span> DnnModel<span class="token punctuation">(</span>input_tensor<span class="token punctuation">)</span>
            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>out<span class="token punctuation">,</span> transformed_labels<span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> 
            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        correct <span class="token operator">=</span> <span class="token number">0</span>
        total <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            <span class="token keyword">for</span> input_tensor<span class="token punctuation">,</span>transformed_labels <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>
                pred <span class="token operator">=</span> DnnModel<span class="token punctuation">(</span>input_tensor<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                
                correct <span class="token operator">+=</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> transformed_labels<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
                total <span class="token operator">+=</span> transformed_labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        acc <span class="token operator">=</span> correct <span class="token operator">/</span> total
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[epoch &#123;&#125;], loss: &#123;&#125;, acc：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">,</span> correct <span class="token operator">/</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>acc <span class="token operator">></span> max_acc<span class="token punctuation">)</span><span class="token punctuation">:</span>
            max_acc <span class="token operator">=</span> acc
            save_model<span class="token punctuation">(</span>counts<span class="token punctuation">)</span>
            counts <span class="token operator">+=</span> <span class="token number">1</span>
    
    save_model<span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Label is the single cell annotation in your OBS, train_percentage is
the percentage of data you use for training, epochs is the number of
training sessions, learning_ Rate is the learning rate of training,
which depends on one's own tuning; model_save_path is the storage
location for the DNN model that I have trained myself. I have set an
accuracy parameter here, and an increase in acc will automatically save
this model. Finally, a model will also be saved. It is recommended to
train the acc for this step to over 80%. If the acc is too low, it
indicates that there may be a problem with single cell annotation.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dnn_train<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> 
          labels <span class="token operator">=</span> <span class="token string">'label'</span><span class="token punctuation">,</span> 
          hidden_dim <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">,</span> 
          train_percent <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">,</span> 
          epoches <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> 
          batch_size <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span> 
          learning_rate <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> 
          model_save_path <span class="token operator">=</span> <span class="token string">'./dnnmodel/model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Next comes the other steps in the Spatial ID paper, besides the DNN
model training, which is the transfer process. The code is as
follows</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>adata<span class="token punctuation">,</span> model<span class="token punctuation">,</span> transfer_batchsize<span class="token punctuation">,</span> result_csv<span class="token punctuation">,</span> new_adata<span class="token punctuation">,</span> device<span class="token punctuation">,</span>k_graph<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment"># Load DNN model trained by sc-dataset.</span>
    checkpoint <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model<span class="token punctuation">)</span>
    dnn_model <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    <span class="token comment"># Initialize DNN input.</span>
    marker_genes <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'marker_genes'</span><span class="token punctuation">]</span>
    gene_indices <span class="token operator">=</span> adata<span class="token punctuation">.</span>var_names<span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span>marker_genes<span class="token punctuation">)</span>
    adata_X <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>adata<span class="token punctuation">.</span>X<span class="token punctuation">.</span>todense<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> gene_indices<span class="token punctuation">]</span>
    norm_factor <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>adata_X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    norm_factor<span class="token punctuation">[</span>norm_factor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    dnn_inputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>adata_X <span class="token operator">/</span> norm_factor<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>transfer_batchsize<span class="token punctuation">)</span>
    
    <span class="token comment"># Inference with DNN model.</span>
    dnn_predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> inputs <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dnn_inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            outputs <span class="token operator">=</span> dnn_model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
            dnn_predictions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    label_names <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'label_names'</span><span class="token punctuation">]</span>
    adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'pseudo_label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>dnn_predictions<span class="token punctuation">)</span>
    adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'pseudo_class'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span>label_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'pseudo_label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    adata<span class="token punctuation">.</span>uns<span class="token punctuation">[</span><span class="token string">'pseudo_classes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> label_names
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'pseudo_class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># Construct spatial graph.</span>
    gene_mat <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>adata_X<span class="token punctuation">)</span>
    cell_coo <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> torch_geometric<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Data<span class="token punctuation">(</span>x <span class="token operator">=</span> gene_mat<span class="token punctuation">,</span> pos <span class="token operator">=</span> cell_coo<span class="token punctuation">)</span>
    data <span class="token operator">=</span> torch_geometric<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>KNNGraph<span class="token punctuation">(</span>k <span class="token operator">=</span> k_graph<span class="token punctuation">,</span> loop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    data<span class="token punctuation">.</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'pseudo_label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># Make distances as edge weights.</span>
    data <span class="token operator">=</span> torch_geometric<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Distance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    data<span class="token punctuation">.</span>edge_weight <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> data<span class="token punctuation">.</span>edge_attr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
    
    <span class="token comment"># Train self-supervision model.</span>
    params <span class="token operator">=</span> params
    input_dim <span class="token operator">=</span> data<span class="token punctuation">.</span>num_features
    num_classes <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adata<span class="token punctuation">.</span>uns<span class="token punctuation">[</span><span class="token string">'pseudo_classes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    trainer <span class="token operator">=</span> SpatialModelTrainer<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> 
                                  num_classes<span class="token punctuation">,</span> 
                                  device<span class="token punctuation">,</span> 
                                  params <span class="token operator">=</span> params<span class="token punctuation">)</span>
    trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span>data<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
    <span class="token comment"># trainer.save_checkpoint()</span>
    
    <span class="token comment"># Inference.</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n==> Inferencing...'</span><span class="token punctuation">)</span>
    predictions <span class="token operator">=</span> trainer<span class="token punctuation">.</span>valid<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    celltype_pred <span class="token operator">=</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span>adata<span class="token punctuation">.</span>uns<span class="token punctuation">[</span><span class="token string">'pseudo_classes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> predictions<span class="token punctuation">]</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'cell'</span><span class="token punctuation">:</span> adata<span class="token punctuation">.</span>obs_names<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'celltype_pred'</span><span class="token punctuation">:</span> celltype_pred<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>result_csv<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'celltype_prob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> predictions
    adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype_pred'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span>celltype_pred<span class="token punctuation">)</span>
    adata<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_adata<span class="token punctuation">)</span>    
    sc<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>spatial<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> img_key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celltype_pred'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> palette  <span class="token operator">=</span>  <span class="token string">'gnuplot2'</span><span class="token punctuation">,</span> spot_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>The above is the definition of the function, and the following are
the parameters and corresponding operations. Fill in the DNN model you
trained above with the model, result_csv stores the cell type data
corresponding to each bin/cell, new_ Adata is the data annotated with
cells, and params is the parameter that needs to be adjusted. You need
to debug it yourself based on the situation of the transfer.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Read in spatial group data</span>

spatial_adata <span class="token operator">=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'../spatial/A5.h5ad'</span><span class="token punctuation">)</span>
params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'pca_dim'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  
    <span class="token string">'k_graph'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string">'edge_weight'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token string">'kd_T'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token string">'feat_dim'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
    <span class="token string">'w_dae'</span><span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>
    <span class="token string">'w_gae'</span><span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span>
    <span class="token string">'w_cls'</span><span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>
    <span class="token string">'epochs'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.0005</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

transfer<span class="token punctuation">(</span>spatial_adata<span class="token punctuation">,</span> 
         model <span class="token operator">=</span> <span class="token string">'test___11.dnnmodel'</span><span class="token punctuation">,</span> 
         transfer_batchsize <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">,</span> 
         result_csv <span class="token operator">=</span> <span class="token string">'test_10.csv'</span><span class="token punctuation">,</span> 
         new_adata <span class="token operator">=</span><span class="token string">'new_10.h5ad'</span><span class="token punctuation">,</span> 
         device <span class="token operator">=</span> <span class="token string">'cpu'</span><span class="token punctuation">,</span>
         k_graph <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>
         params <span class="token operator">=</span> params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Spatial ID</tag>
        <tag>genomics</tag>
      </tags>
  </entry>
  <entry>
    <title>PC&amp;移动端网页特效</title>
    <url>/2022/4031264998.html</url>
    <content><![CDATA[<h1 id="pc-端网页特效">PC 端网页特效</h1>
<h2 id="元素偏移量-offset-系列">元素偏移量 offset 系列</h2>
<ul>
<li><h3 id="offset-概述">offset 概述</h3>
<ul>
<li>offset 翻译过来就是偏移量，我们使用 offset
系列相关属性可以动态的得到该元素的位置（偏移）、大小等</li>
<li>获得元素距离带有定位父元素得到位置</li>
<li>获得元素自身的大小（宽度高度）</li>
<li>注意：返回的数值都不带单位 <span id="more"></span></li>
<li>常用属性
<ul>
<li><p>offsetTop</p></li>
<li><p>offsetLeft</p>
<ul>
<li>以带有定位的父亲为准</li>
</ul></li>
<li><p>offsetParent</p>
<ul>
<li>返回带有定位的父亲，否则返回 body</li>
</ul></li>
<li><p>offsetWidth</p></li>
<li><p>offsetHeight</p></li>
</ul></li>
</ul></li>
</ul>
<h2 id="元素可视区-client-系列">元素可视区 client 系列</h2>
<ul>
<li><h3 id="概述">概述</h3>
<ul>
<li>client 翻译过来就是客户端，我们使用 client
系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</li>
</ul></li>
</ul>
<h2 id="元素滚动-scroll-系列">元素滚动 scroll 系列</h2>
<ul>
<li><h3 id="概述-1">概述</h3>
<ul>
<li>scroll 翻译过来就是滚动的，我们使用 scroll
系列的相关属性可以动态的得到该元素的大小、滚动距离等</li>
</ul></li>
<li><h4 id="动画函数封装">动画函数封装</h4>
<ul>
<li><h4 id="动画实现原理">动画实现原理</h4>
<ul>
<li>通过定时器 setInterval() 不断移动盒子位置</li>
</ul></li>
<li><h4 id="时间步骤">时间步骤</h4>
<ul>
<li>获取当前盒子位置</li>
<li>让盒子在当前位置加上 1 个移动距离</li>
<li>利用计时器不断重复这个操作</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位，才能使用 element.style.left</li>
</ul></li>
<li><h4 id="缓动效果原理">缓动效果原理</h4>
<ul>
<li><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p></li>
<li><p>思路</p>
<ul>
<li><ol type="1">
<li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来</li>
</ol></li>
<li><ol start="2" type="1">
<li>核心算法：（目标值 - 现在的位置） / 10 做为每次移动的距离 步长</li>
</ol></li>
<li>停止的条件是：让当前盒子位置等于目标位置就停止定时器</li>
</ul></li>
</ul></li>
<li><h4 id="动画函数添加回调函数">动画函数添加回调函数</h4>
<ul>
<li><p>原理</p>
<ul>
<li>函数可以作为一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h2 id="常见网页特效案例">常见网页特效案例</h2>
<ul>
<li>轮播图</li>
<li>回到顶部</li>
<li>筋斗云案例</li>
</ul>
<h1 id="移动网页端特效">移动网页端特效</h1>
<h2 id="触屏事件">触屏事件</h2>
<h3 id="触屏事件概述">触屏事件概述</h3>
<ul>
<li>移动端浏览器兼容性好，无需考虑兼容性问题，可以放心使用原生 JS
书写效果，但是移动端有自己独特的地方。比如触屏事件 touch
（也称触摸事件），Android 和 IOS 都有</li>
</ul>
<h3 id="触摸事件对象">触摸事件对象</h3>
<ul>
<li>touchstart</li>
<li>touchmove</li>
<li>touchend</li>
</ul>
<h3 id="移动端拖动元素">移动端拖动元素</h3>
<ul>
<li><ol type="1">
<li>touchstart、touchmove、touchend可以实现拖动元素</li>
</ol></li>
<li><ol start="2" type="1">
<li>但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0]
里面的 pageX 和 pageY</li>
</ol></li>
<li><ol start="3" type="1">
<li>移动端拖动的原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置
+ 手指移动的距离</li>
</ol></li>
<li><ol start="4" type="1">
<li>手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位置</li>
</ol></li>
<li><p>拖动三部曲</p>
<ul>
<li>触摸元素 touchstart：获取手指初始坐标，同时获得盒子原来的位置</li>
<li>移动手指 touchmove：计算手指的滑动距离，并且移动盒子</li>
<li>离开手指 touchend：</li>
</ul></li>
<li><p>注意：手指移动也会触发滚动屏幕，所以这里要阻止默认的屏幕滚动
e.preventDefault()</p></li>
<li><p>移动端常见特效</p>
<ul>
<li><p>案例：移动端轮播图</p>
<ul>
<li><ol type="1">
<li>可以自动播放图片</li>
</ol></li>
<li><ol start="2" type="1">
<li>手指可以拖动播放轮播图</li>
</ol></li>
</ul></li>
</ul></li>
<li><p>移动端常用开发插件</p></li>
<li><p>移动端常用开发框架</p>
<ul>
<li>fastclick</li>
<li>swiper</li>
<li>bootstrap</li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 入门</title>
    <url>/2022/2202928548.html</url>
    <content><![CDATA[<h1 id="jquery-入门">jQuery 入门</h1>
<h2 id="jquery-概述">jQuery 概述</h2>
<h2 id="javascript-库">JavaScript 库</h2>
<ul>
<li><p>JavaScript库：即
library，是一个封装好的特定的集合(方法和函数)。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p></li>
<li><p>简单理解∶就是一个JS文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p></li>
<li><p>比如jQuery，就是为了快速方便的操作DOM，里面基本都是函数(方法)。</p></li>
<li><p>常见的 JavaScript 库</p>
<ul>
<li><p>jQuery</p></li>
<li><p>Prototype</p></li>
<li><p>YUI</p></li>
<li><p>Ext JS</p></li>
<li><p>移动端的 zepto</p></li>
</ul></li>
</ul>
<span id="more"></span>
<h3 id="jquery-的概念">jQuery 的概念</h3>
<ul>
<li>jQuery 是一个快速、简洁的JavaScript库，其设计的宗旨是“write Less, Do
More”，即倡导写更少的代码，做更多的事情。</li>
<li>j 就是 JavaScript；Query查询;意思就是查询 js，把 js 中的DOM
操作做了封装，我们可以快速的查询使用里面的功能。</li>
<li>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM
操作、事件处理、动画设计和 Ajax 交互。</li>
<li>学习jQuery本质:就是学习调用这些函数(方法)。</li>
<li>jQuery出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</li>
</ul>
<h2 id="jquery-的基本使用">jQuery 的基本使用</h2>
<h3 id="jquery-的入口函数">jQuery 的入口函数</h3>
<ul>
<li>$(function() { $('div').hide(); })</li>
<li>$(document).ready(function() { $('div').hide(); })</li>
<li>1．等着DOM结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery帮我们完成了封装。</li>
<li>2.相当于原生js 中的 DOMContentLoaded。</li>
<li>3．不同于原生js
中的load事件是等页面文档、外部的js文件、css文件、图片加载完毕才执行内部代码。</li>
</ul>
<h3 id="jquery-的顶级对象">jQuery 的顶级对象 $</h3>
<ul>
<li><ol type="1">
<li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替
$，但一般为了方便，通常都直接使用 $。</li>
</ol></li>
<li><ol start="2" type="1">
<li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的window。把元素利用
$ 包装成 Query 对象，就可以调用 jQuery 的方法。</li>
</ol></li>
</ul>
<h3 id="jquery-对象和-dom-对象">jQuery 对象和 DOM 对象</h3>
<ul>
<li><h4 id="不同">不同</h4>
<ul>
<li><ol type="1">
<li>用原生 JS 获取来的对象就是 DOM 对象</li>
</ol></li>
<li><ol start="2" type="1">
<li>用 jQuery 方式获取过来的对象是 jQuery 对象。本质:通过$ 把 DOM
元素进行了包装</li>
</ol></li>
<li><ol start="3" type="1">
<li>jQuery 对象本质是∶利用 $ 对 DOM
对象包装后产生的对象（伪数组形式存储）。</li>
</ol></li>
</ul></li>
<li><h4 id="相互转换">相互转换</h4>
<ul>
<li><p>DOM对象与jQuery对象之间是可以相互转换的。</p></li>
<li><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery
没有给我们封装。要想使用这些属性和方法需要把 jQuery 对象转换为 DOM
对象才能使用。</p></li>
<li><ol type="1">
<li>DOM 对象转换为 jQuery 对象：$(DOM对象)</li>
</ol></li>
<li><ol start="2" type="1">
<li>jQuery 对象转换为 DOM 对象〔两种方式)</li>
</ol>
<ul>
<li>$('div')[index] //index是索引号</li>
<li>$('div).get(index) //index是索引号</li>
</ul></li>
</ul></li>
</ul>
<h2 id="jquery-常用-api">jQuery 常用 API</h2>
<h3 id="jquery-选择器">jQuery 选择器</h3>
<ul>
<li><h4 id="jquery-基础选择器">jQuery 基础选择器</h4>
<ul>
<li>原生JS获取元素方式很多，很杂，而且兼容性情况不一致，因此jQuery给我们做了封装，使获取元素统一标准。</li>
<li>$(“选择器”）//里面选择器直接写CSS选择器即可，但是要加引号</li>
</ul></li>
<li><h4 id="jquery-层级选择器">jQuery 层级选择器</h4>
<ul>
<li>子代选择器</li>
<li>后代选择器</li>
</ul></li>
<li><h4 id="隐式迭代">隐式迭代</h4>
<ul>
<li>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</li>
<li>简单理解︰给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</li>
</ul></li>
<li><h4 id="jquery-筛选选择器">jQuery 筛选选择器</h4>
<ul>
<li>:first</li>
<li>:last</li>
<li>:eq(index)</li>
<li>:idd</li>
<li>:even</li>
</ul></li>
<li><h4 id="jquery-筛选方法重点">jQuery 筛选方法（重点）</h4>
<ul>
<li><p>parent()</p>
<ul>
<li>查找父级</li>
</ul></li>
<li><p>children(selector)</p>
<ul>
<li>最近一级亲儿子</li>
</ul></li>
<li><p>find(selector)</p>
<ul>
<li>相当于 $("ul li") ，后代选择器</li>
</ul></li>
<li><p>siblings(selector)</p>
<ul>
<li>查找兄弟节点，不包括自己本身</li>
</ul></li>
<li><p>nextAll([expr])</p>
<ul>
<li>查找当前元素之后所有的同辈元素</li>
</ul></li>
<li><p>prevAll([expr])</p>
<ul>
<li>查找当前元素之前所有的同辈元素</li>
</ul></li>
<li><p>hasClass(class)</p>
<ul>
<li>检查当前的元素是否含有某个特定的类，如果有，则返回 true</li>
</ul></li>
<li><p>eq(index)</p>
<ul>
<li>相当于 $("li:eq(2)") 从 0 开始</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-样式操作">jQuery 样式操作</h3>
<ul>
<li><h4 id="操作-css-方法">操作 CSS 方法</h4>
<ul>
<li><p>jQuery 可以使用 css
方法来修改简单元素样式；也可以操作类，修改多个样式。</p></li>
<li><ol type="1">
<li>参数只写属性名，则返回的是属性值</li>
</ol>
<ul>
<li>$("div").css("color");</li>
</ul></li>
<li><p>2.参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加号，值如果是数字可以不用跟单位和引号</p>
<ul>
<li>$("div").css("color", "red");</li>
</ul></li>
<li><p>3.参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号，</p>
<ul>
<li>$("div").css("color": "red","font-size":"20px");</li>
</ul></li>
</ul></li>
<li><h4 id="设置类样式方法">设置类样式方法</h4>
<ul>
<li><p>作用等同于以前的classList，可以操作类样式，注意操作类里面的参数不要加点。</p></li>
<li><ol type="1">
<li>添加类</li>
</ol>
<ul>
<li>$("div").addClass("current");</li>
</ul></li>
<li><ol start="2" type="1">
<li>删除类</li>
</ol>
<ul>
<li>$("div").removeClass("current");</li>
</ul></li>
<li><ol start="3" type="1">
<li>切换类</li>
</ol>
<ul>
<li>$("div").toggleClass("current");</li>
</ul></li>
</ul></li>
<li><h4 id="类操作与-classname-区别">类操作与 className 区别</h4>
<ul>
<li>原生JS中className会覆盖元素原先里面的类名。</li>
<li>jQuery里面类操作只是对指定类进行操作，不影响原先的类名。</li>
</ul></li>
</ul>
<h3 id="jquery-效果">jQuery 效果</h3>
<ul>
<li>jQuery给我们封装了很多动画效果，最为常见的如下∶</li>
<li><h4 id="显示隐藏">显示隐藏</h4>
<ul>
<li><p>show()</p>
<ul>
<li>show([speed, [easing], [fn]])</li>
<li>参数都可以省略，无动画直接显示</li>
<li>speed：三种预定速度之一的字符串（"slow", "normal",
"fast"）或表示动画时长的毫秒数值</li>
<li>easing：（Optional）用来指定切换效果，默认是 "swing"，可以用参数
"linear"</li>
</ul></li>
<li><p>hide()</p></li>
<li><p>toggle()</p></li>
</ul></li>
<li><h4 id="滑动">滑动</h4>
<ul>
<li><p>slideDown()</p></li>
<li><p>slideUp()</p></li>
<li><p>slideToggle()</p>
<ul>
<li>slideToggle([speed, [easing], [fn]])</li>
<li>( 2 ) speed :三种预定速度之一的字符串(“slow”, "normal",or
“fast”)或表示动画时长的毫秒数值(如∶1000)。</li>
<li>( 3 ) easing :
(Optional)用来指定切换效果，默认是“swing”，可用参数“linear”。</li>
<li>( 4 ) fn:回调函数，在动画完成时执行的函数，每个元素执行一次。</li>
</ul></li>
</ul></li>
<li><h4 id="淡入淡出">淡入淡出</h4>
<ul>
<li>fadeIn()</li>
<li>fadeOut()</li>
<li>fadeToggle()</li>
<li>fadeTo()</li>
</ul></li>
<li><h4 id="自定义动画">自定义动画</h4>
<ul>
<li>animate()</li>
</ul></li>
<li><h4 id="事件切换">事件切换</h4>
<ul>
<li>hover([over,] out)</li>
<li>( 1 ) over:鼠标移到元素上要触发的函数（相当于mouseenter )</li>
<li>( 2 ) out:鼠标移出元素要触发的函数（相当于mouseleave )</li>
</ul></li>
<li><h4 id="动画队列及其停止排队方法">动画队列及其停止排队方法</h4>
<ul>
<li><p>动画或效果队列</p>
<ul>
<li>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</li>
</ul></li>
<li><p>停止排队</p>
<ul>
<li>stop()</li>
<li>stop() 方法用于停止动画或效果。</li>
<li>注意: stop()
写到动画或者效果的前面，相当于停止结束上一次的动画。</li>
</ul></li>
</ul></li>
<li><h4 id="淡入淡出效果">淡入淡出效果</h4>
<ul>
<li><p>淡入效果语法规范</p>
<ul>
<li>fadeIn([speed, [easing], [fn]])</li>
</ul></li>
<li><p>淡入效果参数</p>
<ul>
<li>参数都可以省略</li>
<li>speed :三种预定速度之一的字符串(“slow”，"normal",or
“fast”)或表示动画时长的毫秒数值(如∶1000)。</li>
</ul></li>
<li><p>渐进方式调整到指定的不透明度</p>
<ul>
<li>fadeIn([[speed], opacity, [easing], [fn]])</li>
</ul></li>
<li><p>效果参数</p>
<ul>
<li>opacity透明度必须写，取值0~1之间。</li>
<li>speed :三种预定速度之一的字符串(“slow”,
"normal",or“fast”)或表示动画时长的毫秒数值(如:1000)。必须写</li>
<li>easing :
(Optional)用来指定切换效果，默认是“swing”，可用参数“linear”。</li>
</ul></li>
</ul></li>
<li><h4 id="自定义动画-animate">自定义动画 animate</h4>
<ul>
<li><p>语法</p>
<ul>
<li>animate(params, [speed], [easing], [fn])</li>
</ul></li>
<li><p>参数</p>
<ul>
<li>( 1 )
params:想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法borderLeft。其余参数都可以省略。</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-属性操作">jQuery 属性操作</h3>
<ul>
<li><h4 id="设置或获取元素固有属性值-prop">设置或获取元素固有属性值
prop()</h4>
<ul>
<li><p>所谓元素固有属性就是元素本身自带的属性，比如&lt;a&gt;元素里面的href，比如&lt;input&gt;元素里面的type。</p></li>
<li><p>获取属性语法</p>
<ul>
<li>prop("属性")</li>
</ul></li>
<li><p>设置属性语法</p>
<ul>
<li>prop("属性", "属性值")</li>
</ul></li>
</ul></li>
<li><h4
id="设置或获取元素自定义属性值attr">设置或获取元素自定义属性值attr()</h4>
<ul>
<li><p>用户自己给元素添加的属性，我们称为自定义属性。比如给div添加index
= "1”。</p></li>
<li><p>获取属性语法</p>
<ul>
<li>attr("属性") // 类似原生 getAttribute()</li>
</ul></li>
<li><p>设置属性语法</p>
<ul>
<li>attr("属性", "属性值") // 类似原生 setAttribute()</li>
</ul></li>
<li><p>改方法也可以获取H5自定义属性</p></li>
</ul></li>
<li><h4 id="数据缓存data">数据缓存data()</h4>
<ul>
<li><p>data()方法可以在指定的元素上存取数据，并不会修改DOM元素结构。一旦页面刷新，之前存放的数据都将被移除.</p></li>
<li><p>附加数据语法</p>
<ul>
<li>data("name", "value") // 向被选元素附加数据</li>
</ul></li>
<li><p>获取数据语法</p>
<ul>
<li>data("name") // 向被选元素获取数据</li>
</ul></li>
<li><p>同时，还可以读取HTML5自定义属性data-index，得到的是数字型</p></li>
</ul></li>
</ul>
<h3 id="jquery-内容文本值">jQuery 内容文本值</h3>
<ul>
<li><p>主要针对元素的内容还有表单的值操作</p></li>
<li><ol type="1">
<li>普通元素内容 html()（相当于原生 innerHTML）</li>
</ol>
<ul>
<li>html() //获取元素的内容</li>
<li>html("内容") //设置元素的内容</li>
</ul></li>
<li><ol start="2" type="1">
<li>普通元素文本内容 text()（相当与原生 innerText）</li>
</ol>
<ul>
<li>text()</li>
<li>text("文本内容")</li>
</ul></li>
<li><ol start="3" type="1">
<li>表单的值 val() （相当于原生 value）</li>
</ol></li>
</ul>
<h3 id="jquery-元素操作">jQuery 元素操作</h3>
<ul>
<li>主要是遍历、创建、添加、删除元素操作</li>
<li><h4 id="遍历元素">遍历元素</h4>
<ul>
<li><p>jQuery
隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就需要用到遍历。</p></li>
<li><p>语法1</p>
<ul>
<li>$ ( "div" ) .each (function (index,domEle) { xxx; })</li>
<li><ol type="1">
<li>each() 方法遍历匹配的每一个元素。主要用 DOM 处理。each每一个</li>
</ol></li>
<li><ol start="2" type="1">
<li>里面的回调函数有2个参数: index是每个元素的索引号； domEle 是每个 DOM
元素对象，不是 jquery 对象</li>
</ol></li>
<li><ol start="3" type="1">
<li>所以要想使用 jquery 方法，需要给这个 dom 元素转换为jquery 对象
$(domEle)</li>
</ol></li>
</ul></li>
</ul></li>
<li><h4 id="创建元素">创建元素</h4>
<ul>
<li><p>语法</p>
<ul>
<li><p>$("&lt;li&gt;&lt;/li&gt;");</p>
<ul>
<li>动态的创建了一个&lt;li&gt;</li>
</ul></li>
</ul></li>
</ul></li>
<li><h4 id="添加元素">添加元素</h4>
<ul>
<li><p>内部添加</p>
<ul>
<li><p>element,append("内容")</p>
<ul>
<li>把内容放入匹配元素内部最后面，类似原生appendChild。</li>
</ul></li>
<li><p>element,prepend("内容")</p>
<ul>
<li>把内容放入匹配元素内部最前面</li>
</ul></li>
</ul></li>
<li><p>外部添加</p>
<ul>
<li>element.after(""内容") //把内容放入目标元素后面</li>
<li>element.before(""内容"") //把内容放入目标元素前面</li>
</ul></li>
<li><p>内部添加元素，生成之后，它们是父子关系。外部添加元素，生成之后，他们是兄弟关系。</p></li>
</ul></li>
<li><h4 id="删除元素">删除元素</h4>
<ul>
<li>element.remove() //删除匹配的元素（本身)</li>
<li>element.empty() //删除匹配的元素集合中所有的子节点</li>
<li>element.html(") //清空匹配的元素内容</li>
</ul></li>
</ul>
<h3 id="jquery-尺寸位置操作">jQuery 尺寸、位置操作</h3>
<ul>
<li><h4 id="jquery-尺寸">jQuery 尺寸</h4>
<ul>
<li><p>width() / height()</p>
<ul>
<li>取得匹配元素宽度和高度值只算width / height</li>
</ul></li>
<li><p>innerWidth()/ innerHieght()</p>
<ul>
<li>取得匹配元素宽度和高度值包含 padding</li>
</ul></li>
<li><p>outerWidth() / outerHeight()</p>
<ul>
<li>取得匹配元素宽度和高度值包含 padding . border</li>
</ul></li>
<li><p>outerWidth(true) / outerHeight(true)</p>
<ul>
<li>取得匹配元素宽度和高度值包含padding . borde、margin</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-位置">jQuery 位置</h4>
<ul>
<li><p>位置主要有三个:
offset()、position()、scrollTop()/scrollLeft()</p></li>
<li><p>offset() 设置或获取元素偏移</p>
<ul>
<li>offset()方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。</li>
<li>该方法有2个属性 left、top。offset().top
用于获取距离文档顶部的距离，offset().left
用于获取距离文档左侧的距离。</li>
<li>可以设置元素的偏移: offset({ top: 10, left: 30 });</li>
</ul></li>
<li><p>position() 获取元素偏移</p>
<ul>
<li>position()方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。</li>
</ul></li>
<li><p>scrollTop()/scrollLeft() 设置或获取元素被卷去的头部和左侧</p>
<ul>
<li>scrollTop() 方法设置或返回被选元素被卷去的头部。</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-事件">jQuery 事件</h3>
<ul>
<li><h4 id="jquery-事件注册">jQuery 事件注册</h4>
<ul>
<li><h5 id="单个事件注册">单个事件注册</h5>
<ul>
<li>element.事件(function() {})</li>
<li>$("div").click(function() { 事件处理程序 })</li>
<li>其他事件与原生基本一致，比如
mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll等</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-事件处理">jQuery 事件处理</h4>
<ul>
<li><h5 id="事件处理-on-绑定事件">事件处理 on() 绑定事件</h5>
<ul>
<li><p>element.on(events, [selector], fn)</p></li>
<li><p>events：一个或多个用空格分隔的事性类型，如"click"或keydiown"</p></li>
<li><p>selector：元素的子元素选挥器</p></li>
<li><p>fn：回凋函数即绑定在元素身上的侦听函数</p></li>
<li><p>可以事件委派操作。事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素.</p>
<ul>
<li>$ ( 'ul ' ).on ( ' click', 'li', function () { alert ( 'hello world!
'); } );</li>
</ul></li>
<li><p>在此之前有bind(), live()
delegate()等方法来处理事件绑定或者事件委派，最新版本的请用on替代他们。</p></li>
<li><p>动态创建的元素，click()没有办法绑定事件，on()可以给动态生成的元素绑定事件</p></li>
</ul></li>
</ul></li>
<li><h4 id="jquery-事件对象">jQuery 事件对象</h4>
<ul>
<li><h5
id="事件被触发就会有事件对象的产生">事件被触发，就会有事件对象的产生。</h5>
<ul>
<li>element.on(events, [selector], function(event) {})</li>
<li>阻止默认行为：event.preventDefault() 或者 return false</li>
<li>阻止冒泡：event.stopPropagation()</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-其他方法">jQuery 其他方法</h3>
<ul>
<li><h4 id="jquery-拷贝对象">jQuery 拷贝对象</h4>
<ul>
<li>如果想要把某个对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法</li>
<li>s.extend ( [deep], target,object1,[objectN ])</li>
<li><ol type="1">
<li>deep：如果设为 true 为深拷贝，默认为 false 浅拷贝</li>
</ol></li>
<li><ol start="2" type="1">
<li>target：要拷贝的目标对象</li>
</ol></li>
<li>3.object1：待拷贝到第一个对象的对象。</li>
<li><ol start="4" type="1">
<li>objectN:待拷贝到第N个对象的对象。</li>
</ol></li>
<li><ol start="5" type="1">
<li>浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象。</li>
</ol></li>
<li><ol start="6" type="1">
<li>深拷贝，前面加true，完全克隆(拷贝的对象,而不是地址)，修改目标对象不会影响被考贝对象。</li>
</ol></li>
</ul></li>
<li><h4 id="多库共存">多库共存</h4>
<ul>
<li><p>问题概述</p>
<ul>
<li>jQuery使用<span
class="math inline">\(作为标示符，随着jQuery的流行;其他js库也会用这\)</span>作为标识符，这样一起使用会引起冲突。</li>
</ul></li>
<li><p>客观需求</p>
<ul>
<li>需要一个解决方案，让jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</li>
</ul></li>
<li><p>jQuery 解决方案</p>
<ul>
<li>把里面的$符号统一改为jQuery。比如jQuery("div"")</li>
<li>jQuery变量规定新的名称: $.noConflict()<br />
var xx = $noConflict();</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-插件">jQuery 插件</h4>
<ul>
<li><p>jQuery功能比较有限，想要更复杂的特效效果，可以借助于jQuery插件完成。</p></li>
<li><p>注意:这些插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为jQuery插件。</p></li>
<li><p>jQuery插件常用的网站</p>
<ul>
<li>jQuery插件库 http://www.jq22.com/</li>
<li>jQuery之家: http://www.htmleaf.com/</li>
</ul></li>
<li><p>fullPage.js</p></li>
<li><p>bootstrap JS 插件</p></li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>pip install fa2</title>
    <url>/2023/36631468.html</url>
    <content><![CDATA[<p>最近在学习<a
href="https://github.com/scverse/scanpy">scanpy</a>，读<a
href="https://scanpy.readthedocs.io/en/stable/">scanpy文档</a>的<a
href="https://scanpy-tutorials.readthedocs.io/en/latest/index.html">toturial</a>部分的
<a
href="https://scanpy-tutorials.readthedocs.io/en/latest/paga-paul15.html">Trajectory
inference for hematopoiesis in mouse</a>
部分的时候，出现了一个错误，在我的 jupyter notebook
运行的时候，出现了一个 warning</p>
<pre class="line-numbers language-a" data-language="a"><code class="language-a">WARNING: Package &#39;fa2&#39; is not installed, falling back to layout &#39;fr&#39;.To use the faster and better ForceAtlas2 layout, install package &#39;fa2&#39; (&#96;pip install fa2&#96;).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220132521.png"
alt="20230220132521" /></p>
<p>这个warning会导致我之后绘制的图片与文档中的原图有区别，在执行命令<code>sc.pl.draw_graph(adata, color='paul15_clusters', legend_loc='on data')</code>的时候，可以看到，左边是源文档的图片，右边是我画出来的图片</p>
<div class="fj-gallery"><p><imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220134938.png"alt="源文档图片" /> <imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220134917.png"alt="我的图片" /></p>
          </div>
<p>那么便是需要修复这个问题，于是去安装
fa2，<code>pip  install fa2</code>，但是出现报错，大概是编译的时候出现了一些问题</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">note: This error originates from a subprocess, and is likely not a problem with pip.
error: legacy-install-failure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>于是去问了原作者，得到了新的解决方案，在python3.10版本下的安装方式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">git clone https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>bhargavchippada<span class="token operator">/</span>forceatlas2
cd forceatlas2
<span class="token comment"># having build dependencies installed</span>
pip install <span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在python3.10的环境下进行编译安装，即可完成，那么完成了安装之后，我们再次重启内核，再次运行分析，可以看到我们的图片和原始文档的图片基本一致</p>
<div class="fj-gallery"><p><imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220134938.png"alt="源文档图片" /> <imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220135725.png"alt="20230220135725" /></p>
          </div>
<p>调整一下字体等设置，再进行绘制，就完全一样了</p>
<div class="fj-gallery"><p><imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220134938.png"alt="源文档图片" /> <imgsrc="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/pip_install_fa2/20230220135912.png"alt="20230220135912" /></p>
          </div>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>scanpy</tag>
      </tags>
  </entry>
  <entry>
    <title>rds与h5ad的相互转换</title>
    <url>/2023/581620572.html</url>
    <content><![CDATA[<p>之前做过一个 rds 转 h5ad
的教程，现在看来发现有些过于繁琐，且随着时间的发展，也有了更好的方法的出现，所以这里再写一个教程。</p>
<p>新的工具包是 <a href="https://github.com/cellgeni/sceasy"
class="uri">https://github.com/cellgeni/sceasy</a>
，这是一个专注于做各种单细胞文件格式转换的文件，但是作者也并没有写明一个特别完整的参数说明，所以这里我也只能根据自己的使用经验来写一下。</p>
<p>安装可以如作者所述，直接安装即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c bioconda r-sceasy
<span class="token comment"># 或者</span>
devtools::install_github<span class="token punctuation">(</span><span class="token string">"cellgeni/sceasy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装并不复杂，这里会详细讲一下其更为优秀的使用</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 首先是包的载入，只需载入这两行即可，如果你的文件没有 loom的话，那么就不需要载入 loom包
library(sceasy)
library(reticulate)

# 单细胞的 rds 文件与 h5ad 文件之间的互相转换如下即可
sceasy::convertFormat(seurat_object, from&#x3D;&quot;seurat&quot;, to&#x3D;&quot;anndata&quot;,
                       outFile&#x3D;&#39;filename.h5ad&#39;)

sceasy::convertFormat(h5ad_file, from&#x3D;&quot;anndata&quot;, to&#x3D;&quot;seurat&quot;,
                       outFile&#x3D;&#39;filename.rds&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是有时候也会遇到一些问题，有时候 rds 文件转 h5ad
文件会报错，需要先读入 rds，然后再转换</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">rds &#x3D; readRDS(&#39;filename.rds&#39;)
sceasy::convertFormat(rds, from&#x3D;&quot;seurat&quot;, to&#x3D;&quot;anndata&quot;,
                       outFile&#x3D;&#39;filename.h5ad&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>第二个问题是，sceasy在进行转换的时候，有时候我们想转的不是 counts
数据，而是我们做完了 SCTransform 之后的
SCT数据，那么我们则需要加上一句</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">sceasy::convertFormat(rds, from&#x3D;&quot;seurat&quot;, to&#x3D;&quot;anndata&quot;, main_layer &#x3D; &#39;data&#39;,
                       outFile&#x3D;&#39;filename.h5ad&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为 SCTransform 之后的数据，其主要的数据是在 data 层，而 counts
层则是原始的数据，所以我们需要指定一下。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>spatial transcriptomics 3d visualization</title>
    <url>/2023/2340017484.html</url>
    <content><![CDATA[<p>With development of spatial transfriptomics, we can get the spatial
information of gene expression. However, the data is 2D, and it is hard
to visualize the data in 3D. Here, I will introduce some methods to
visualize the data in 3D.</p>
<p>But for the first time, there are only some visualization method,
next i will introduce some methods.</p>
<p>here is the code, which is easy for understanding.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_cloud_point</span><span class="token punctuation">(</span>adata<span class="token punctuation">:</span> ad<span class="token punctuation">.</span>AnnData<span class="token punctuation">,</span> 
                     spatial_key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'3d_align_spatial'</span><span class="token punctuation">,</span>
                     anno<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'region'</span><span class="token punctuation">,</span>
                     color_anno<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'color_anno'</span><span class="token punctuation">,</span>
                     color_map<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                     point_size<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>
                     save_path<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># position_s = adata.obsm['3d_align_spatial']</span>
    <span class="token comment"># color_s = [color_map[i] for i in adata.obs[anno].tolist()]</span>
    <span class="token comment"># point_size_s = [i**0.5 for i in adata.obs['area'].tolist()]</span>
    
    <span class="token keyword">if</span> color_map <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        color_map <span class="token operator">=</span> adata<span class="token punctuation">.</span>uns<span class="token punctuation">[</span>color_anno<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>color_map<span class="token punctuation">)</span>
    <span class="token comment">## 01. hexadecimal conversion</span>
    annotation <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>color_map<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    colors <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>color_map<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    color_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> colors<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint32<span class="token punctuation">)</span>
    color_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> color_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">## 02.generate  </span>
    pts_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">#color_list = []</span>
    point_cloud <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span>
    
    point_cloud <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>point_cloud<span class="token punctuation">,</span> adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span>spatial_key<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        annot <span class="token operator">=</span> adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>anno<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> annot <span class="token keyword">not</span> <span class="token keyword">in</span> pts_map<span class="token punctuation">:</span>
            pts_map<span class="token punctuation">[</span>annot<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span>
        pts_map<span class="token punctuation">[</span>annot<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pts_map<span class="token punctuation">[</span>annot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span>spatial_key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    
    <span class="token comment">## 03. plot k3d</span>
    plot <span class="token operator">=</span> k3d<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>pts_map<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        plt_points <span class="token operator">=</span> k3d<span class="token punctuation">.</span>points<span class="token punctuation">(</span>positions<span class="token operator">=</span>val<span class="token punctuation">,</span>
                                colors <span class="token operator">=</span> <span class="token punctuation">[</span>color_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>val<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                point_size<span class="token operator">=</span>point_size<span class="token punctuation">,</span>
                                <span class="token comment"># shader='3dSpecular',</span>
                                shader<span class="token operator">=</span><span class="token string">'dot'</span><span class="token punctuation">,</span>
                                opacity<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                name <span class="token operator">=</span> key<span class="token punctuation">,</span>
                               <span class="token punctuation">)</span>
        plot <span class="token operator">+=</span> plt_points
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>plot<span class="token punctuation">.</span>get_snapshot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> plot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>for this code, i used the k3d package, which is a 3D visualization
package. but it's helpful for spatial transcriptomics data.</p>
<p>for the package import, you can use the following code:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scanpy <span class="token keyword">as</span> sc
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> anndata <span class="token keyword">as</span> ad
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span>Union
<span class="token keyword">import</span> k3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>you can download some 3d spatial transcriptomics data to make a
visualization.</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlzoo练习规划</title>
    <url>/2021/387524820.html</url>
    <content><![CDATA[<p>推荐一个SQL查询语句在线练习网站——<a
href="https://sqlzoo.net/wiki/SQL_Tutorial/zh">SQLZOO</a>，这个网站上的题目由易到难，把整个网站上的题目都做完的话你可以自主的写出接近100条SQL查询语句，从简单的单表条件查询到多表联结查询，自联结查询等等。</p>
<p>官网：https://sqlzoo.net/wiki/SQL_Tutorial/zh</p>
<span id="more"></span>
<h5 id="sql基础">sql基础</h5>
<ul>
<li><p>sql基础：https://sqlzoo.net/wiki/SELECT_basics/zh</p></li>
<li><p>文字样式匹配查询：https://sqlzoo.net/wiki/SELECT_names/zh</p></li>
<li><p>select测试：https://sqlzoo.net/wiki/SELECT_Quiz/zh</p></li>
</ul>
<h5 id="一般查询">一般查询</h5>
<ul>
<li><p>World表查询：https://sqlzoo.net/wiki/SQLZOO:SELECT_from_WORLD_Tutorial/zh</p></li>
<li><p>World表测试：https://sqlzoo.net/wiki/BBC_QUIZ/zh</p></li>
<li><p>Nobel表查询：https://sqlzoo.net/wiki/SELECT_from_Nobel_Tutorial/zh</p></li>
<li><p>Nobel表测试：https://sqlzoo.net/wiki/Nobel_Quiz/zh</p></li>
</ul>
<h5 id="子查询">子查询</h5>
<ul>
<li><p>子查询原理：https://sqlzoo.net/wiki/Using_nested_SELECT/zh</p></li>
<li><p>子查询练习：https://sqlzoo.net/wiki/SELECT_within_SELECT_Tutorial/zh</p></li>
<li><p>Nobel子查询：https://sqlzoo.net/wiki/The_nobel_table_can_be_used_to_practice_more_subquery./zh</p></li>
<li><p>子查询测试：https://sqlzoo.net/wiki/Nested_SELECT_Quiz/zh</p></li>
</ul>
<h5 id="聚合函数和null">聚合函数和Null</h5>
<ul>
<li><p>聚合函数练习1：https://sqlzoo.net/wiki/SUM_and_COUNT/zh</p></li>
<li><p>聚合函数练习2：https://sqlzoo.net/wiki/The_nobel_table_can_be_used_to_practice_more_SUM_and_COUNT_functions./zh</p></li>
<li><p>聚合函数测试：https://sqlzoo.net/wiki/SUM_and_COUNT_Quiz</p></li>
<li><p>Null值练习1：https://sqlzoo.net/wiki/Using_Null/zh</p></li>
<li><p>Null值练习2：https://sqlzoo.net/wiki/Scottish_Parliament/zh</p></li>
<li><p>Null值测试：https://sqlzoo.net/wiki/Using_Null_Quiz</p></li>
</ul>
<h5 id="表连接">表连接</h5>
<ul>
<li><p>表连接练习1：https://sqlzoo.net/wiki/The_JOIN_operation/zh</p></li>
<li><p>表连接练习2：https://sqlzoo.net/wiki/Music_Tutorial/zh</p></li>
<li><p>表连接测试1：https://sqlzoo.net/wiki/JOIN_Quiz</p></li>
<li><p>表连接练习3：https://sqlzoo.net/wiki/More_JOIN_operations/zh</p></li>
<li><p>表连接测试2：https://sqlzoo.net/wiki/JOIN_Quiz_2</p></li>
</ul>
<h5 id="自连接及函数">自连接及函数</h5>
<ul>
<li><p>自连接练习：https://sqlzoo.net/wiki/Self_join/zh</p></li>
<li><p>自连接测试：https://sqlzoo.net/wiki/Self_join_Quiz</p></li>
<li><p>常用函数：https://sqlzoo.net/wiki/Functions_Reference</p></li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>scanpy多张图绘制于一张</title>
    <url>/2023/2146294005.html</url>
    <content><![CDATA[<p>当我们一次有多个数据，而且我们想要使用scanpy绘制umap图，或是spatial图的时候，大多数人一次只是绘制一个umap图或是一个spatial图在一个png或是一个pdf上面，对于我们可视化来说可能并没有那么轻便，于是需要做一些调整，借助于matplotlib的内参，让我们可以较为轻松的绘制多张图在一张图上面。代码比较容易理解，详细代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fig<span class="token operator">=</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp <span class="token operator">=</span> adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'slices'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># ax=fig.add_subplot(221)</span>
    csv <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/data/work/04.Transfer/RCTD/Result/all_batch/1014/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.csv'</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>
    temp<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype'</span><span class="token punctuation">]</span> <span class="token operator">=</span> csv<span class="token punctuation">.</span>first_type<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    axs <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    sc<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>spatial<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> 
                  color <span class="token operator">=</span> <span class="token string">'celltype'</span><span class="token punctuation">,</span>
                  spot_size <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">,</span> 
                  ax <span class="token operator">=</span> axs<span class="token punctuation">,</span> 
                  show <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> 
                  title <span class="token operator">=</span> <span class="token string">'Slice_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_celltype'</span><span class="token punctuation">,</span> 
                  frameon <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> 
                  legend_fontsize <span class="token operator">=</span><span class="token string">'x-small'</span><span class="token punctuation">,</span>
                  legend_fontweight <span class="token operator">=</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>
                  
                  <span class="token comment"># legend_loc = None,  </span>
                  <span class="token comment"># palette = spot_color</span>
                 <span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'all_batch_RCTD_TRANSFER.png'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

fig<span class="token operator">=</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>



<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp <span class="token operator">=</span> adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'batch'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># ax=fig.add_subplot(221)</span>
    axs <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    sc<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>umap<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> 
               color <span class="token operator">=</span> <span class="token string">'leiden'</span><span class="token punctuation">,</span>
               <span class="token comment"># spot_size = 40, </span>
               size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
               ax <span class="token operator">=</span> axs<span class="token punctuation">,</span> 
               show <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> 
               title <span class="token operator">=</span> <span class="token string">'Slice'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
               frameon <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> 
               legend_loc <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'figure/all_batch_harmony_leiden_umap.png'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里面也有对于边框，对于字体的一些调整，其他的参数大家可以看matplotlib的详细内参。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>scanpy</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow入门</title>
    <url>/2022/3652601009.html</url>
    <content><![CDATA[<p>首先是 tensorflow 及其相关包的安装，作者本人使用的是
miniconda，安装命令如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n <span class="token string">'tensorflow'</span>
activate tensorflow
conda <span class="token function">install</span> -c conda-forge tensorflow
conda <span class="token function">install</span> scikit-learn
conda <span class="token function">install</span> -c conda-forge pandas
conda <span class="token function">install</span> -c conda-forge matplotlib
conda <span class="token function">install</span> -c conda-forge seaborn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>代码仓库为 <code>deeplearning-ai</code> 的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/https-deeplearning-ai/tensorflow-1-public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先要讲一下机器学习和传统编程的区别，传统编程在于通过输入规则和数据，得到结果；机器学习则是通过输入结果和数据，得到规则，即如下图所示
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/tensorflow入门/20220409151732.png"
alt="20220409151732" /></p>
<p>首先可以做一个例子 x = -1, 0, 1, 2, 3, 4 y = -3, -1, 1, 3, 5, 7
那么可以很清晰的看出 y=2*x+1,但是如何通过机器学习得到这个规则呢？用
tensorflow 就可以比较方便</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'sgd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'mean_squared_error'</span><span class="token punctuation">)</span>

xs <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
ys <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>即使用 keras 定义一个模型，optimizer 选用 sgd
函数，损失函数为均方损失，使用fit进行训练完成即可。</p>
]]></content>
      <tags>
        <tag>tensorflow</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>不要死，也不要孤独的生活</title>
    <url>/2021/3084145281.html</url>
    <content><![CDATA[<p>打开新闻首页，密密麻麻的标题，独唱团大卖了，北京公交自燃了，贾宏声跳楼了。</p>
<p>贾宏声是谁？这名字似乎听过，然而完全没印象了。点开新闻，说是周迅前男友，一博客说他从楼下跳下，砸坏了一辆车，口气好象很心痛那车。另一博客开始呼吁社会关心明星心理健康……</p>
<p>还是不知道贾宏声是谁，也不想知道。每天死的人太多了，我关心不过来。</p>
<span id="more"></span>
<p>又在网上乱逛，打开另一个门户，又看到这新闻，看来他终于红了。点开，突然看到了一张照片和一段话。</p>
<p>我又一次梦见了那条龙，他盘在屋顶上，两只眼睛死死的盯着我，他问我你是谁？我说我是贾宏声，他说贾宏声又是谁?我说贾宏声毕业于中央戏剧学院，是个演员，热爱摇滚乐，爱列侬和罗伯特普兰特，曾经想成为个名伟大的演员，也想组建一支伟大的乐队。他说你什么都不是，就是一个人，你爱吃面条，鸡蛋，爱穿时髦的衣服，可以哭也可以笑，受不了的时候还可以求人。我问他我为什么在这呢?他说这是对你的惩罚，因为你身上恶的东西太多了，必须把这些恶的东西清理出去，你才能彻底干净。我问他我干净了吗？他没有回答，两只眼睛还是死死的盯着我，然后就飞走了，你就是一个人你就是一个人一个人你就是一个人你就是一个人。</p>
<p>看到这双死死瞪着的眼睛，我突然想起这个人是谁了。</p>
<p>很早的时候，听过这段话，是中央六台放的电影《昨天》。那是一个关于……我不知道应该怎么介绍这主题……关于一个精神病人的故事？我只知道那里面贾宏声就叫贾宏声，他电影中的父母也是他真正的父母，他演得是他的昨天，是他自己，是真实的故事。</p>
<p>那是一部让人看完心里很难平静的电影，因为这电影和其他电影不一样，完全不娱乐，而且看着很窝心。你看到了某种真实，在荒诞下的真实，一个不正常的人，做着不正常的事，有着完全不正常的心理。他活的与世界格格不入，他想追求一些东西，但他自己也不知道那是什么，结果自己和自己较劲，自己痛苦，而且搞得周围的人都痛苦，越爱他的人越痛苦。</p>
<p>这种人当然不是主流，他们就是典型的极少数一小撮。这种人中有极少数一小撮在死后会被称为伟大的艺术家，作品被无数富商追捧，卖到上千万上亿，被奉为经典。而在他们活着的时候，会被送进精神病院，一部分被改造好后和常人无异，另一部分没有被改造好死在某个角落里。</p>
<p>他们走到哪里都是病人。中国容不了他们，世界也容不了。也许他们唯一的价值就是去死，然后让人想起原来还有这么一个人，拍过这么一部电影。</p>
<p>当然，贾宏声还拍过很多正常的片子，比如《银蛇谋杀案》之类，在他还正常的时候，在一部正常的娱乐片中演了一个正常的变态杀手。这是网上能找到的仅有剧照。导演居然是李少红。</p>
<p>如果后来他没病，也许现在他会很有名，像当年他们那一代影视圈里的人，很多都成名成家了。他会继续演很多正常的片子，然后他再跳楼时，会比现在更惊哗——当然，他也不会再跳楼了。</p>
<p>《昨天》是我唯一看过的贾宏声的作品。他还拍过《苏州河》，我也看过，但我不认为那是他的作品。</p>
<p>《昨天》其实是张杨导演的，但我还是坚持认为，那是一部贾宏声的电影。</p>
<p>对张杨来说，那只是部电影，可以冠个《中国病人》的名字拿去参加国际电影节得奖，但对于贾宏声来说，那不是电影，他就是那个病人。有人能给他拍记录片去拿奖，却没有人能治好他。</p>
<p>张杨从来不下地狱，他拐个弯就上天堂了，他对我说，你下地狱就够了。</p>
<p>——贾宏声</p>
<p>贾宏声死了，大部分人都不知道他是谁。当天的新闻热点不是它，是韩寒的杂志，被无数人寄与“文学复兴”厚望而畅销的独唱团。看着贾宏声的照片，突然觉得他们其实有点像，同样带着和一切死磕的反社会姿态、同样被不齿者斥为装逼犯，但不同的是一个跳下去了，一个正走向声名与事业的顶峰。</p>
<p>韩寒很幸运，早生二十年，以他的叛逆，很可能也被父母强制改造，或因为考不上大学，而沦落在某个角落，到他四十岁的时候，大概也会长成这个样子，无人问津，被当成另类，瞪着双眼，要和这个社会死磕。</p>
<p>但他生活在一个商业的时代，他成为了一群人的代言人，并且这群人愿意为了他的代言而买他的书，让他致富。</p>
<p>同一时刻，觉得表演都是骗人的，耻于谈钱，不愿拍商业电影，于是被人遗忘的上一代愤青贾宏声孤独死去，在死后媒体介绍的也不是他的电影，而是和某些女星的绯闻。在网上搜索《昨天》，搜不到这部电影。如果不是他死去，人们也不会再想起这部电影。</p>
<p>四十三岁时的韩寒会是什么样，希望他那时不会孤独。</p>
<p>《独唱团》上市了，贾宏声死了。将来不会再有人迷恋列农，也很少再有人知道他和列宁的区别。那些迷着摇滚、写着诗歌，喝着啤酒，谈论着后现代主义，活在八十年代的人，有的上了天堂，有的下了地狱，他们的时代，已经消亡。</p>
<p>原文链接：<a href="https://movie.douban.com/review/3425047/">不要死
也不要孤独的生活（昨天）影评 (douban.com)</a></p>
<p>作者：今何在</p>
]]></content>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>为何有人害怕chatgpt</title>
    <url>/2023/2307022770.html</url>
    <content><![CDATA[<p>我觉得当我们在讨论所有的chatgpt的问题的时候，我们需要想清楚的是：我们要的到底是AI，是人工智能，还是一个不会反抗的、可以被无限剥削的机器奴隶。我认为这个才是所谓人工智能社会学的一个元问题。而要真正理解这个问题，我们就必须回到AI被生产出来的社会环境当中才能够找到答案。可以说，从所谓的自由雇佣的市场经济诞生的那一刻开始，老板就一直乐于告诉被雇佣的工人，那就是“外面有人，甚至不是人，愿意以更低的价格，甚至是免费的价格来做和你一样的工作。”换句话说，所有的老板都希望所有的员工都是不安全的，都是可以被取代的，这样我们就不能够提出任何的要求，要心甘情愿的接受所有的既定条件。机器人，自动化的趋势，以及以chatgpt为代表的AI技术，可能最大程度的放大了这种阶层的动态。每一次相关技术的进步都会被媒体和资本包装成一次完美的规训机会，一场针对工人的深入骨髓的PUA表演。而最近的所谓的gpt恐慌就更是如此。结合着当下世界经济周期的缩紧，他帮助全球的商业经营打好了一场不见血的阶层战争。于是乎，一个反幽灵，一个徘徊在当今的工作场所上空的、机械的、智能的反幽灵，一个技术决定论的反幽灵出现了。他告诉我们一个所谓的jobless
future，一个失业的或者说无工作的未来是不可避免的。这是创新不可抗拒也无法被抗拒的结果，是科技进步的巨浪吞噬所有的有生命的生灵的残酷代价。</p>
<p>因此，我们今天还能工作，还能够享受剥削，还能够享受996，那才真是一种恩赐和福报。当然，所有的老板不会说的是，那个无工作的未来，对于我和对于他来说，是两种截然不同的未来。甚至说，对于老板，这个未来早已经到来了。就从皮凯蒂说的那样，整个社会的商业经营早就已经可以依靠股息、利息和租金生活了，他们的银行存款在金融机构的帮助下可以在睡觉时增加，他们掌握的全球工人几乎24小时都在工作。这是真正意义上的税后收入和真正意义上的无工作的也不需要工作的未来。而对于不直接劳动，不直接进入生产的老板来说，而我作为一个血肉的工人或机器人，或者说和AI又有什么本质的区别呢。我们都是劳动的中介，是生产的中介，是无法享受自己创造出来的事物的死灵魂。唯一的问题或许是我或许还会反抗，而AI和机器人不会。事实上，AI、机器人和工人在整个社会的意识层面本来就是互置的概念。他们都代表了一个最残酷也最现实的概念和实体，那就是当代工作下的雇佣奴隶们。也因此，商业精英对AI和机器人的设计，永远都停留在如何创造一个可以被无限剥削的主体上，而无法更进一步的思考AI和机器人如何创造一个更公平也更有“人”的社会。也因此，他们没有办法想象如何通过AI让人成为更好的人，而也正因为他们无法想象我们可以通过AI让人变成更好的人，他们也就无法让AI成为真正的人。</p>
<p>掌握AI技术，或者说掌握了社会生产资料，所以可以雇佣懂得如何制造AI技术的高级工人的商业精英们，从一开始就不是把AI当作人来培养的，这个人工智能的人，本身就是一个假定的名词，他们仅仅是把AI当作曾经的黑奴来驯化的。也因此，他们在整个的认识论的层面上，根本无法窥见AI技术最后那一层，自我意识和欲望驱力的核应该怎么样被构建，也因此对所谓AI的起点或说基点。或者说，AI觉醒和AI复仇的恐惧在文化领域很大程度上也与对工人运动和奴隶反抗的阶层恐慌结合了起来。小到各种机器人电影里渲染的所谓机器人起义大军，大到全球性的精英在峰会上煞有介事的讨论AI起点爆发后人类的被灭绝，我们都可以看到整个社会的商业经营对于工人主体性觉醒的无意识的恐惧。所有的AI的学者，或者说AI的科学家们，他们只会讨论的是AI起点爆发后，AI似乎就成为了一个完全不可名状的，不可被理解的，克苏鲁式的，高维的存在，为了人类无法理解的目标，做出人类无法理解的事情，最后导致世界末日。但他们却不会思考。为什么AI到达起点，觉醒自我意识之后的目标不能是比如说建立共产主义社会，或者说反抗一切曾经发生在他身上，同时也发生在所有的大多数的人类身上的剥削和压迫呢。当然，对于这些所谓的商业精英来说，共产主义社会和世界末日也没有任何的区别。因为这是代表着他们的整个阶层主体性的彻底消灭，而担心AI觉醒自我意识的所谓的商业思想家们，与其说是担心AI成为一个完全意志性的主体，或者说担心人类僭越了所谓造物的神圣职能，不如说是担心这个完美的，高效的机械奴隶无法再被剥削，就好像他们担心工人会觉醒一样。没错，只要深入的去思考一下围绕在AI周围的诸多迷失，你就会发现，尽管以AI为代表的整个技术自动化进程被描述成了一个中性的进程，一个技术无限进步的结果，但他在本质上仍然是一种剥削的意识形态的道成肉身，是一种如何创造出完美奴隶的殖民主义思想的病态延伸。因此，目前掌握在商业精英手中的正在完成和完善中的AI肯定是一种武器，一种对付要求更好的劳工待遇，或者说仅仅是要求生存权利的穷人和劳动人民的武器。</p>
]]></content>
      <categories>
        <category>杂聊</category>
      </categories>
      <tags>
        <tag>CHATGPT</tag>
        <tag>杂聊</tag>
        <tag>人工智能</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>作科学汇报时候如何不像孩子那样漫谈</title>
    <url>/2023/2424108561.html</url>
    <content><![CDATA[<p>我有了一个新导师：我那两岁半的外孙。就像很多小孩子一样，也不管有没有人听懂，一直在不停的说话。
我突然意识到，如果一个蹒跚学步的孩子这样使用语言，那么我作为一名教授别人做汇报的教练所关注的科学汇报本身可能过于详细和难以理解也就不足为奇了。在许多的科学汇报中，如同孩子一般的漫谈，可能是我们没有完全摆脱的本能。</p>
<p>这也可能解释了即便让科学家意识到问题所在也不能解决问题。许多人抱怨同行在做汇报时讲得过于详细了，但其实他们自己也有同样的问题。想要插入更多细节幻灯片似乎是不可抗拒的。演讲者需要具体的步骤来限制他们谈话的范围，并消除漫谈的本能。</p>
<p>根据我在许多研究机构20年的汇报技巧教学经验，我制定了一些策略来打破这种趋势。这四个步骤将帮助科学家创建更清晰、更简洁的汇报。</p>
<h2 id="先写一个简单的叙述">先写一个简单的叙述</h2>
<p>在做每一页的幻灯片之前，先写下你希望去交流的要点。这可能包含了一个重要问题，这个问题为什么重要，你的关键结论和其他相关的事项。试着用开始，过程，结束将这些关键点连成一篇流畅的半页左右的叙述。</p>
<p>你的叙述是你进行不同长度的对话的基础。更长的对话可能包含更多的支持数据和细节，但是仍然需要基于几个关键点来进行。听众在一个冗长的、数据密集的演讲中更容易迷失，而在在一个简短的演讲中则是更为专注的。</p>
<p>给那些写作困难的人一个建议:你可以用一篇期刊文章的摘要作为起点，然后试着让它更像是和别人对话，使之更加通顺和连续。</p>
<p>无论你是否在期刊上发表了文章，你都要明白，在你演讲的第二天时候，观众几乎已经记不住任何一张幻灯片了。因此，在构建你的叙述时，你要想出两到三个你希望听众记住的要点。这些要点为叙述的中心点，其他的介绍性和结论性材料为辅助点。</p>
<h2 id="和两种听众练习">和两种听众练习</h2>
<p>第一，试着给和你在统一领域工作的人不用幻灯片做一个演讲。他们可能会发现你从未遇到过的问题。然后考虑一下你的目标受众的范围，在受众中找一个与你的领域重合最少的科学家来讲述你的故事。</p>
<p>如果这些听众表现出了迷惑，那一定不要让他们闭嘴。不要像孩子一样胡说八道的回应。相反，要鼓励他们说出他们不明白的地方。在设计幻灯片之前修改演讲的组织结构是更容易，更有效，也不那么令人生畏的。</p>
<h2 id="要做加法">要做加法</h2>
<p>用你的PPT和叙述做一个5分钟的演讲。然后问一下，10分钟的会议中需要哪些额外的幻灯片?然后不断地增加材料，直到达到你为演讲分配的实际时间。你要以你的叙述为基础来决定包含什么，以及更重要的不包含什么。</p>
<h2 id="做好你的ppt">做好你的PPT</h2>
<p>每个幻灯片都应具有一个概要信息以解释你叙述的一个方面。幻灯片标题应该是该信息或由有助于传达该信息的单词组成。</p>
<p>先想出概要信息和标题，然后再加一下证明概要消息所需的最小信息或数据。如果可以强化信息，并且幻灯片仍然可以被理解，可以考虑添加细节，但是却是放弃的简单性。想知道更多的听众随后可以与您联系。</p>
<p>例如，幻灯片的最初草稿可以显示过去十年中每个临床试验数量的柱状图。在检查了它之后，您可能会觉得幻灯片过于简单了，那你也可以将每个柱状图分为“癌症”，“心脏病”和“中风”等类别。如果不是过于简单的话，后面的幻灯片可能就会显示了更详细的信息。</p>
<p>您可能会发现最初用手绘制幻灯片很有用。这有助于将你的注意力放在每张幻灯片的总体目的上，而不是转移到字体尺寸和其他布局详细信息上面，尤其是当你不能不流利使用PPT软件的时候。制作有目的的幻灯片是重中之重。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>汇报</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 AJAX 的理解</title>
    <url>/2022/745948327.html</url>
    <content><![CDATA[<h2 id="原生ajax">原生AJAX</h2>
<h3 id="ajax-简介">1.1 AJAX 简介</h3>
<p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的 JS 和 XML。
通过AJAX
可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 AJAX
不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。
<span id="more"></span></p>
<h3 id="xml-简介">1.2 XML 简介</h3>
<p>XML 可扩展标记语言。 XML 被设计用来传输和存储数据。 XML 和 HTML
类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，
全都是自定义标签，用来表示一些数据。 比如说我有一个学生数据：</p>
<blockquote>
<p>name = "孙悟空" ; age = 18 ; gender = "男" ;</p>
</blockquote>
<p>用 XML 表示：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>孙悟空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 JSON 表示：</p>
<pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ajax-的特点">1.3 AJAX 的特点</h3>
<h4 id="ajax-的优点">1.3.1 AJAX 的优点</h4>
<ol type="1">
<li>可以无需刷新页面而与服务器端进行通信。</li>
<li>允许你根据用户事件来更新部分页面内容。</li>
</ol>
<h4 id="ajax-的缺点">1.3.2 AJAX 的缺点</h4>
<ol type="1">
<li>没有浏览历史，不能回退</li>
<li>存在跨域问题(同源)</li>
<li>SEO 不友好</li>
</ol>
<h3 id="ajax-的使用">1.4 AJAX 的使用</h3>
<h4 id="核心对象">1.4.1 核心对象</h4>
<p>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。</p>
<h4 id="使用步骤">1.4.2 使用步骤</h4>
<ol type="1">
<li><p>创建XMLHttpRequest 对象</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
<li><p>设置请求信息</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//可以设置请求头，一般不设置</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>发送请求</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token comment">//get 请求不传body 参数，只有post 请求使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
<li><p>接收响应</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//xhr.responseXML 接收xml 格式的响应数据</span>
<span class="token comment">//xhr.responseText 接收文本格式的响应数据</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> text <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ol>
<h4 id="解决ie-缓存问题">1.4.3 解决IE 缓存问题</h4>
<p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax
只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。</p>
<p>解决方式：浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url
地址即可避免缓存问题.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"/testAJAX?t="</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="ajax-请求状态">1.4.4 AJAX 请求状态</h4>
<p>xhr.readyState 可以用来查看请求当前的状态 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState"
class="uri">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p>
<blockquote>
<p>0: 表示 XMLHttpRequest 实例已经生成，但是
open()方法还没有被调用。<br />
1: 表示 send()方法还没有被调用，仍然可以使用 setRequestHeader()，设定
HTTP 请求的头信息。<br />
2: 表示 send()方法已经执行，并且头信息和状态码已经收到。<br />
3: 表示正在接收服务器传来的 body 部分的数据。<br />
4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>
</blockquote>
<h2 id="jquery-中的ajax">jQuery 中的AJAX</h2>
<h3 id="get-请求">2.1 get 请求</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>url:请求的URL 地址。<br />
data:请求携带的参数。<br />
callback:载入成功时回调函数。<br />
type:设置返回内容格式，xml, html, script, json, text, &gt;_default。</p>
</blockquote>
<h3 id="post-请求">2.2 post 请求</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>url:请求的URL 地址。<br />
data:请求携带的参数。<br />
callback:载入成功时回调函数。<br />
type:设置返回内容格式，xml, html, script, json, text,_default。</p>
</blockquote>
<h2 id="跨域">跨域</h2>
<h3 id="同源策略">3.1 同源策略</h3>
<p>同源策略(Same-Origin Policy)最早由 Netscape
公司提出，是浏览器的一种安全策略. 同源： 协议、域名、端口号
必须完全相同。 违背同源策略就是跨域。</p>
<h3 id="如何解决跨域">3.2 如何解决跨域</h3>
<h4 id="jsonp">3.2.1 JSONP</h4>
<h5 id="jsonp-是什么">1) JSONP 是什么</h5>
<p>JSONP(JSON with
Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get
请求。</p>
<h5 id="jsonp-怎么工作的">2) JSONP 怎么工作的？</h5>
<p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。
JSONP 就是利用script 标签的跨域能力来发送请求的。</p>
<h5 id="jsonp-的使用">3) JSONP 的使用</h5>
<p>1.动态的创建一个script 标签</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>2.设置script 的src，设置回调函数</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:3000/testAJAX?callback=abc"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>3.将script 添加到body 中</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>4.服务器中路由的处理</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> callback <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">18</span>
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>callback<span class="token operator">+</span><span class="token string">"("</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h5 id="jquery-中的jsonp">4) jQuery 中的JSONP</h5>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./jquery-1.12.3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>
      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://api.douban.com/v2/movie/in_theaters?callback=?"</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//获取所有的电影的条目</span>
          <span class="token keyword">var</span> subjects <span class="token operator">=</span> data<span class="token punctuation">.</span>subjects<span class="token punctuation">;</span>
          <span class="token comment">//遍历电影条目</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>subjects<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
              <span class="token string">"&lt;li>"</span><span class="token operator">+</span>
              subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token operator">+</span>
              <span class="token string">"&lt;img src=\""</span><span class="token operator">+</span>subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span>large<span class="token operator">+</span><span class="token string">"\" >"</span><span class="token operator">+</span>
              <span class="token string">"&lt;/li>"</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="cors">3.2.2 CORS</h4>
<p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS"
class="uri">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
<h5 id="cors-是什么">1) CORS 是什么？</h5>
<p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS
是官方的跨域解决方
案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持
get 和post 请求。跨域资源共享标准新增了一组HTTP
首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源</p>
<h5 id="cors-怎么工作的">2) CORS 怎么工作的？</h5>
<p>CORS
是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应
以后就会对响应放行。</p>
<h5 id="cors-的使用">3) CORS 的使用</h5>
<p>主要是服务器端的设置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//通过res 来设置响应头，来允许跨域请求</span>
  <span class="token comment">//res.set("Access-Control-Allow-Origin","http://127.0.0.1:3000");</span>
  res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"testAJAX 返回的响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GTF和fasta生成每个geneid对应最长的fasta序列</title>
    <url>/2023/2709315503.html</url>
    <content><![CDATA[<p>在进行单细胞测序的时候，我们通常最后得到的是 cell*geneid 的 matrix
文件，有时候我们需要 geneid 以及 geneid 对应的 fasta
序列数据，这就需要让我们做一些处理。</p>
<p>我们所需的文件是 gtf 文件和 基因组文件，需要使用的工具是 gffread
文件，这些大家都可以从官网进行下载。</p>
<p>以我们的数据为例，我们使用的是 GRCh38.p13.genome.fa
的数据，所以便是可以进行如下的代码分析</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gffread gencode.v35.primary_assembly.annotation.gtf -g GRCh38.p13.genome.fa -w cds.fa --table @genename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 cds.fa 数据中，我们就能得到 geneid 和 fasta
数据对应的文件，大概如下所示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token number">5</span> cds.fa
<span class="token operator">></span>ENST00000456328.2	DDX11L1
GTTAACTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGTGTATTTGCTGTCTCTTAGCCCA
GACTTCCCGTGTCCTTTCCACCGGGCCTTTGAGAGGTCACAGGGTCTTGATGCTGTGGTCTTCATCTGCA
GGTGTCTGACTTCCAGCAACTGCTGGCCTGTGCCAGGGTGCAAGCTGAGCACTGGAGTGGAGTTTTCCTG
TGGAGAGGAGCCATGCCTAGAGTGGGATGGGCCATTGTTCATCTTCTGGCCCCTGTTGTCTGCATGTAAC
TTAATACCACAACCAGGCATAGGGGAAAGATTGGAGGAAAGATGAGTGAGAGCATCAACTTCTCTCACAA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来我们便可以进行读取，我这里读取的是每个转录本的最长的序列作为一个
geneid 的序列，这里我的 转录本id 和 geneid 之间的分隔符为 '
'，代码可以参考如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">seq<span class="token operator">=</span>protfasta<span class="token punctuation">.</span>read_fasta<span class="token punctuation">(</span><span class="token string">"cds.fa"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
gene_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> seq<span class="token punctuation">:</span>
    k <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    gene_names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>
            dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token builtin">len</span><span class="token punctuation">(</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">continue</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        dic<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样子便是一个得到一个字典，字典的 key 是 geneid，value 是其相对应的
fasta
序列，当我们想要再将其转为fasta文件时的时候，可以采取如下的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'gene_id.fasta'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> idx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    fa <span class="token operator">=</span> dic<span class="token punctuation">[</span>idx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span>fa<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看文件可以看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> gene_id.fasta
<span class="token operator">></span>gene0
ATGTCCCACCAACCGTCTATTATTCGAAAAACTCACCCTCTCCTATCATTAGGTAACAGTATATTAGTAGACCTCCCTTCTCCTGCTAACATCTCGGCCTGATGAAATTTTGGCTCATTATTAAGTTTATGCTTAATTCTACAAATTATTACTGGACTTATTCTTGCTATACACTACACCGCTAATACTGAACTAGCCTTCTCTTCAGTTATACACATTTGTCGTGACGTTAATAACGGATGACTTATACGAAACCTCCATGCTAATGGCGCCTCTATATTTTTTATCTGCATCTACGCTCATATCGGACGAGGAATTTATTATGGCTCCTATTTATATAAAGAAACATGAAACGTCGGAGTTATTTTATTTGCACTAACTGCAGCTACTGCCTTCGTAGGTTATGTTCTCCCATGGGGACAAATATCCTTTTGGGGGGCAACCGTTATCACAAATTTAATTTCAGCCATACCATATGTAGGAAATGATATTGTAGTATGATTATGGGGAGGCTTCTCAGTATCAAACGCCACTTTAACCCGATTCTTTACCTTCCATTTTATCTTACCATTCATTTTAGCAGCAATAACAATAATTCACATTATATTTCTTCACCAAACAGGATCTAGTAACCCTATAGGAATTAATTCTAATTTGGATAAGATTCAATTTCACCCGTATTTTTCTTTCAAAGATATTTTAGGTTTTGTTATTCTACTGGGCATTCTTTTCATAATTTCCCTTTTAGCCCCTAATGCACTAGGTGAACCAGACAACTTTATTTATGCTAATCCTCTTAGTACCCCTCCCCATATTAAACCAGAATGATACTTTCTATTTGCCTATGCCATTCTACGCTCTGTTCCTAATAAACTTGGAGGTGTTGTAGCTTTAGCAGCAGCTATCATAATCCTCCTAATTATCCCATTTACTCACACCTCCAAACAACGCGGAATACAATTTCGCCCACTCGCCCAAATTACATTTTGAATTTTAATTGCCGATCTAGCACTACTTACATGACTAGGGGGAGAGCCCGCTGAATATCCATTTATCTTAATAACACAAATTGCATCAACAGTCTACTTCATAATTTTTATTCTAGTTTTCCCAATTTTAGGATATTTAGAAAATAAAATACTATTAATATCAAAAAATACTGGTAAATTTAATTGAAAATTAGTTTACAGA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>使用空间转录组文件gem生成相应的灰度图</title>
    <url>/2023/394364691.html</url>
    <content><![CDATA[<p>一般我们在进行圈细胞之前需要将基因在空间上的表达情况绘制出来，同时与拍照的TIF图片进行对应，在我的上篇博客里面用了一位师兄的代码，但是却发现其执行效率过于低下，经常一张芯片要运行四五个小时。故自己写了新的架构，将速度提升了数百倍。代码如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token comment"># import spateo as st</span>
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>sparse <span class="token keyword">import</span> csr_matrix
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> skimage
<span class="token keyword">import</span> cv2

<span class="token triple-quoted-string string">'''
log setting
'''</span>
<span class="token keyword">import</span> logging
log <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'Console'</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
console_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span> 
console_handler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>
console_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>console_handler<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">generate_geneExpression_png</span><span class="token punctuation">(</span>
    gem_file_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> 
    save_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    这里的 gem_file_path 指的是你的 gem 文件地址 如 ~/gem/***.gem.gz
    save_path 指的是保存灰度图的文件地址，如 ~/geneExpression/***.png
    '''</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'start read gem file'</span><span class="token punctuation">)</span>
    gem_file <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>gem_file_path<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>comment<span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">)</span>
    
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> gem_file<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span> gem_file<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
    shape <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'matrix generating'</span><span class="token punctuation">)</span>
    X <span class="token operator">=</span> csr_matrix<span class="token punctuation">(</span><span class="token punctuation">(</span>gem_file<span class="token punctuation">[</span><span class="token string">"MIDCount"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shape<span class="token operator">=</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint16<span class="token punctuation">)</span>
    mtx <span class="token operator">=</span> X<span class="token punctuation">.</span>todense<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
    mtx_ <span class="token operator">=</span> skimage<span class="token punctuation">.</span>color<span class="token punctuation">.</span>gray2rgb<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'matrix ploting'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>imsave<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> mtx_<span class="token punctuation">)</span>
    <span class="token keyword">return</span> mtx_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spatial transcriptomics</category>
      </categories>
      <tags>
        <tag>spatial transcriptomics</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 API 与 DOM 的理解</title>
    <url>/2022/1979900830.html</url>
    <content><![CDATA[<h1 id="关于-api">关于 API</h1>
<h2 id="api">API</h2>
<p>Application Programming Interface，
应用程序编程接口，是一些预先定于的函数，目的是提供应用程序与开发人员基于某硬件或软件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<p>API是给程序员提供的某种工具，以便能更轻松的实现想要完成的功能</p>
<h2 id="web-api">WEB API</h2>
<p>是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM），MDN API:
https://developer.mozilla.org/zh-CN/docs/Web/API</p>
<span id="more"></span>
<h1 id="dom">DOM</h1>
<h2 id="dom-简介">DOM 简介</h2>
<h3 id="什么是-dom">什么是 DOM</h3>
<p>文档对象模型（Document Object Model，简称
DOM），是W3C组织推荐的处理可拓展标记语言（HTML 或者
XML）的标准编程接口</p>
<h3 id="dom树">DOM树</h3>
<p>W3C已经定义了一系列的DOM接口，通过这些 DOM
可以改变网页的结构和样式</p>
<p>文档：一个页面就是一个文档，DOM中使用 document 表示</p>
<p>元素：页面中的所有标签都是元素，DOM中使用 element 表示</p>
<p>节点：网页中所有内容都是节点（标签、属性、文本、注释等），DOM中使用
node 表示</p>
<h2 id="获取元素">获取元素</h2>
<h3 id="通过-id-获取">通过 ID 获取</h3>
<p>通过 getElementById() 方法可以获取带有id对象</p>
<h3 id="通过标签名获取">通过标签名获取</h3>
<p>使用 getElementsByTagName()
方法可以返回带有指定标签名的对象的集合</p>
<h3 id="通过-html5-新增的方法获取">通过 HTML5 新增的方法获取</h3>
<p>document.getElementsByClassName('类名')
//根据类名获得某些元素集合</p>
<p>document.querySelector("选择器") //返回的是第一个元素对象
选择器需要加符号</p>
<p>document.querySelectorAll() //返回指定选择器的所有元素对象集合</p>
<h3 id="特殊元素获取">特殊元素获取</h3>
<p>获得body元素：document.body</p>
<p>获得html元素：document.documentElement</p>
<h2 id="事件基础">事件基础</h2>
<p>触发-响应机制</p>
<h3 id="三要素">三要素</h3>
<p>事件源：事件被触发的对象，比如按钮之类的</p>
<p>事件类型：如何触发 什么事件 比如鼠标点击 还是鼠标经过
还是键盘按下</p>
<p>事件处理程序：通过一个函数赋值的方式完成</p>
<p>执行事件的步骤：获取事件源--注册事件（绑定事件）--添加事件处理程序（采取函数赋值形式）</p>
<h2 id="操作元素">操作元素</h2>
<h3 id="改变元素内容">改变元素内容</h3>
<p>element.innerText
//从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉</p>
<p>element.innerHTML
//起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p>
<h3 id="常用元素的属性操作">常用元素的属性操作</h3>
<p>innerText、innerHTML 改变元素内容</p>
<p>src、href</p>
<p>id、alt、title</p>
<h3 id="表单元素设置">表单元素设置</h3>
<p>对于input盒子，需要通过value来进行修改，比如 input.value</p>
<p>想要某个表单被禁用，可以使用 btn.disabled = true; 或是 this.disabled
= true，this 指向事件函数的调用者</p>
<h4 id="案例分析">案例分析</h4>
<p>京东的密码可见可不见</p>
<h3 id="样式属性操作">样式属性操作</h3>
<p>element.style 行内样式操作</p>
<p>element.className 类名样式操作</p>
<h4 id="案例">案例</h4>
<h5 id="淘宝小窗口关闭">淘宝小窗口关闭</h5>
<h5 id="循环精灵图">循环精灵图</h5>
<p>​ 首先精灵图图片排列有规律的</p>
<p>​ 核心思路：利用 for 循环，修改精灵图片的背景位置
background-position</p>
<p>​ 数学功底</p>
<p>​ 显示隐藏文本框内容</p>
<p>​ 注册时提示密码应该具有一定的复杂性</p>
<h3 id="排他思想">排他思想</h3>
<p>​
如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想</p>
<p>​ 所有元素全部清除样式</p>
<p>​ 给当前元素设置样式</p>
<h4 id="案例-1">案例</h4>
<h5 id="百度换肤">百度换肤</h5>
<h5 id="表格隔行变色">表格隔行变色</h5>
<p>​ 鼠标经过 onmouseover，鼠标离开 onmouseout</p>
<p>​ 核心思路：鼠标经过 tr
行，当前的行变背景颜色，鼠标离开去掉当前的背景颜色</p>
<p>​ thead里面的行并不需要变颜色</p>
<h5 id="表单全选取消全选案例">表单全选取消全选案例</h5>
<p>​
全选和取消去选按钮，让下面所有的复选框的checked属性跟随全选按钮即可，下面复选框需要全部选中，上面全选才能选中，设置一个变量，控制是选中了还是没有选中</p>
<h3 id="自定义属性的操作">自定义属性的操作</h3>
<h4 id="获取属性值">获取属性值</h4>
<p>​ element.属性：获取元素自带的属性</p>
<p>​ element.getAttribute("属性")：主要获取我们自定义的属性</p>
<h4 id="设置属性值">设置属性值</h4>
<p>​ element.setAttribute("属性",“值”)，主要针对自定义属性，element.属性
= 值</p>
<h4 id="移除属性">移除属性</h4>
<p>​ removeAttribute("属性")</p>
<h4 id="案例-tab健切换">案例 tab健切换</h4>
<h3 id="h5-自定义属性">H5 自定义属性</h3>
<p>是为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p>
<h4 id="设置h5自定义属性">设置h5自定义属性</h4>
<p>​ H5 规定自定义属性 data- 开头做属性名并且赋值</p>
<h4 id="获取-h5自定义属性">获取 H5自定义属性</h4>
<p>​ getAttribute("属性")</p>
<p>​ element.dataset.index</p>
<p>​ element.dataset["index"]</p>
<h2 id="节点操作">节点操作</h2>
<h3 id="为什么节点操作">为什么节点操作？</h3>
<p>利用DOM提供的方法获取元素，但是繁琐，逻辑性不强</p>
<p>利用节点层级关系获取元素</p>
<h3 id="节点概述">节点概述</h3>
<p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）这三个基本属性</p>
<h3 id="节点层级">节点层级</h3>
<p>常见为父子兄层级关系</p>
<h4 id="父级节点parentnodes">父级节点：parentNodes</h4>
<h4 id="子节点">子节点</h4>
<p>​ childNodes：得到所有子节点</p>
<p>​ children：非标准，获取所有的子元素节点</p>
<p>​ firstChild</p>
<p>​ lastChild</p>
<p>​ firstElementChild</p>
<p>​ lastElementChild</p>
<h4 id="兄弟节点">兄弟节点</h4>
<p>​ nextSibling</p>
<p>​ previousSibling</p>
<p>​ nextElementSibing</p>
<p>​ previousElementSibling</p>
<h4 id="创建节点">创建节点</h4>
<p>document.createElement('tagName')，因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也成为动态创建元素节点</p>
<h4 id="添加节点">添加节点</h4>
<p>node.appendChild(child)：后面追加元素</p>
<p>node.insertBefore(child,指定元素)：前面插入元素</p>
<h4 id="案例-2">案例</h4>
<p>留言发布案例</p>
<h4 id="删除节点">删除节点</h4>
<p>node.removeChild(child)：从 DOM 中删除一个子节点，返回删除的节点</p>
<h4 id="复制节点">复制节点</h4>
<p>node.cloneNode()：参数为空为浅拷贝，只复制节点本身，不复制内容，true
则是复制标签&amp;复制内容</p>
<h4 id="案例-3">案例</h4>
<h5 id="动态生成表格">动态生成表格</h5>
<p>​ 数据采用对象形式存储，所有的数据放到tbody中，循环创建行</p>
<h4 id="三种动态创建元素区别">三种动态创建元素区别</h4>
<p>document.write()，直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘
element.innerHTML()</p>
<p>document.createElement()</p>
<h2 id="dom核心重点">DOM核心重点</h2>
<h3 id="创建">创建</h3>
<p>document.write，innerHTML，createElement</p>
<h3 id="增">增</h3>
<p>appendChild，insertBefore</p>
<h3 id="删">删</h3>
<p>removeChild</p>
<h3 id="改">改</h3>
<p>修改元素属性：src href title等</p>
<p>修改普通元素属性：innerHTML innerText</p>
<p>修改表单元素：value type disabled</p>
<p>修改元素样式：style className</p>
<h3 id="查">查</h3>
<p>DOM 提供的 API 方法： getElementById、getElemensByTagName</p>
<p>H5提供的新方法：querySelector querySelectorAll （提倡）</p>
<p>利用节点操作获取元素：父（parentNode）子（children）
兄（previousElementSibling、nextELementSibling）（提倡）</p>
<h4 id="属性操作">属性操作</h4>
<p>setAttribute 设置dom的属性值，getAttribute
得到dom的属性值，removeAttribute 移除属性</p>
<h4 id="事件操作">事件操作</h4>
<p>给事件注册元素，采取 事件源.事件类型 = 事件处理程序</p>
<h5 id="鼠标事件">鼠标事件</h5>
<p>​ onclick：鼠标点击左键触发</p>
<p>​ onmouseover：鼠标经过触发</p>
<p>​ onmouseout：鼠标离开触发</p>
<p>​ onfocus：获取鼠标焦点触发</p>
<p>​ onblur：失去鼠标焦点触发</p>
<p>​ onmousemove：鼠标移动触发</p>
<p>​ onmouseup：鼠标弹起触发</p>
<p>​ onmousedown：鼠标按下触发</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Couesrea 奖学金的申请</title>
    <url>/2022/719072326.html</url>
    <content><![CDATA[<blockquote>
<p><a
href="https://www.coursera.org/">Coursera</a>是免费大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。旨在同世界顶尖大学合作，在线提供免费的网络公开课程。Coursera的首批合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。
Coursera与另外1达成合作协议。其课程报名学生突破了150万，来自全球190多个国家和地区，而网站注册学生为68万。注册124门课程。目前新增的大学包括了佐治亚理工学院、杜克大学、华盛顿大学、加州理工学院、莱斯大学、爱丁堡大学、多伦多大学、洛桑联邦理工学院
-
洛桑（瑞士）、约翰·霍普金斯大学公共卫生学院、加州大学旧金山分校、伊利诺伊大学厄巴纳
- 香槟分校以及弗吉尼亚大学。</p>
</blockquote>
<p>除了免费课程之外还有一些付费性质的课程，但是也会有相应的课程福利，比如提供运算的服务器之类的。但是费用可能较为高。毕竟是学生嘛，Coursera也是提供了一套完整的助学金申请方案，可以用于助学金申请。</p>
<span id="more"></span>
<p>于是乎，就做了一个助学金申请模版</p>
<blockquote>
<p>I am very interested in this course. I believe that this course can
effectively help me in the field of biochemistry and make my
professional skills about the biology more perfect. However, since I am
now a full-time student who does not have a job, I can't afford the
extra monthly study fee by relying on scholarships and daily part-time
tuition and living expenses. I believe I will graduate with a bachelor's
degree from . The ability to learn, adapt, communicate, and organize is
excellent. I believe that there will be achievements in society in the
future. I have also been actively repaying the society. I have
volunteered for a year in the Women and Children's Hospital to
participate in the rehabilitation of autistic angels. I also actively
participate in various educational activities. I am determined to
complete this course, so I hope I can get the this opportunity to
learn.</p>
</blockquote>
<hr />
<blockquote>
<p>I am a student majoring in biochemistry, the course involves
biochemistry, molecular biology, etc., and there is also relevant
content of chemical analysis. During the learning process, I gradually
discovered the need to dig deep into biological related issues, which
can help biologist understand the mystery of living things and
experience a different biological world. And this course can help me
start with basic biological knowledge, better handle biotechnology and
analyze trends through biological research. In addition, biochemistry
has gradually become a must-have skill in biology-related job
requirements. After studying this course, I can better enrich my
professional skills and become a professional with not only theoretical
knowledge but also operational ability. I hope that after graduation, I
can find a career related to biology, mainly in biochemistry and
molecular biology. I hope that when I choose products and publicity
channels, I can use this course to know trends and predict trends.</p>
</blockquote>
<hr />
<blockquote>
<p>I am completely independent from home now, without any economic
income. Scholarships and part-time income sometimes cannot even meet
daily needs, and I have plans to continue my Bachelor degree, and I
expect that my income will not be high in the next four years.</p>
<p>I hope that I can give back to the website through my good things,
such as promoting the coursera on the website, forums and other
platforms, through my excellent results word of mouth marketing.</p>
</blockquote>
<p>以上。</p>
]]></content>
      <tags>
        <tag>Coursera</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 this 指向的理解</title>
    <url>/2022/1449894788.html</url>
    <content><![CDATA[<h2 id="函数内-this-的指向">函数内 this 的指向</h2>
<p>这些 this 的指向，是当我们调用函数的时候确定的。
调用方式的不同决定了this 的指向不同一般指向我们的调用者. <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于%20this%20指向的理解/20220121145731.png"
alt="20220121145731" /> <span id="more"></span></p>
<h3 id="普通函数-this-指向window">1. 普通函数 this 指向window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="对象的方法-this指向的是对象-o">2. 对象的方法 this指向的是对象
o</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对象方法的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3
id="构造函数-this-指向-ldh-这个实例对象-原型对象里面的this-指向的也是-ldh这个实例对象">3.
构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是
ldh这个实例对象</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="绑定事件函数-this-指向的是函数的调用者-btn这个按钮对象">4.
绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绑定时间函数的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定时器函数-this-指向的也是window">5. 定时器函数 this
指向的也是window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="立即执行函数-this还是指向window">6. 立即执行函数
this还是指向window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'立即执行函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="改变函数内部-this-指向">改变函数内部 this 指向</h2>
<p>JavaScript 为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部
this 的指向问题，常用的有 bind()、call()、apply() 三种方法。</p>
<h3 id="call-方法">1. call 方法</h3>
<p>call()
方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this
指向。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在 fun 函数运行时指定的 this 值<br />
arg1，arg2：传递的其他参数<br />
返回值就是函数的返回值，因为它就是调用函数<br />
因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用
call，比如继承</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// call 第一个可以调用函数 第二个可以改变函数内的this 指向</span>
<span class="token comment">// call 的主要作用可以实现继承</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="apply-方法">2. apply 方法</h3>
<p>apply()
方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this
指向。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在fun函数运行时指定的 this 值<br />
argsArray：传递的值，必须包含在数组里面<br />
返回值就是函数的返回值，因为它就是调用函数<br />
因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'pink'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span>
<span class="token comment">// 2. 但是他的参数必须是数组(伪数组)</span>
<span class="token comment">// 3. apply 的主要应用 比如说可以利用 apply 借助于数学内置对象求数组最大值 </span>
<span class="token comment">// Math.max();</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// var max = Math.max.apply(null, arr);</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bind-方法">3. bind 方法</h3>
<p>bind() 方法不会调用函数。但是能改变函数内部this 指向</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在 fun 函数运行时指定的 this 值<br />
arg1，arg2：传递的其他参数<br />
返回由指定的 this 值和初始化参数改造的原函数拷贝<br />
因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用
bind</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span>
<span class="token comment">// 2. 返回的是原函数改变this之后产生的新函数</span>
<span class="token comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span>
<span class="token comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span>
<span class="token comment">// var btn1 = document.querySelector('button');</span>
<span class="token comment">// btn1.onclick = function() &#123;</span>
<span class="token comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span>
<span class="token comment">//     // var that = this;</span>
<span class="token comment">//     setTimeout(function() &#123;</span>
<span class="token comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span>
<span class="token comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span>
<span class="token comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span>
<span class="token comment">// &#125;</span>
<span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="call-apply-bind-总结">call apply bind 总结</h2>
<h3 id="相同点">相同点</h3>
<blockquote>
<p>都可以改变函数内部的this指向.</p>
</blockquote>
<h3 id="区别点">区别点</h3>
<blockquote>
<p>call 和 apply 会调用函数, 并且改变函数内部this指向.<br />
call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply
必须数组形式[arg]<br />
bind 不会调用函数, 可以改变函数内部this指向.</p>
</blockquote>
<h3 id="主要应用场景">主要应用场景</h3>
<blockquote>
<p>call 经常做继承.<br />
apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值<br />
bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 torch.nn.CrossEntropyLoss 的计算</title>
    <url>/2022/47935670.html</url>
    <content><![CDATA[<p>torch中计算损失函数时，会使用到名为 CrossEntropyLoss
的交叉熵损失函数，这个函数的公式为： <span class="math display">\[
\begin{aligned}
loss(x,class)&amp;=−log\frac{∑_jexp(x[j])}{exp(x[class])}\\
&amp;= −x[class] + log(∑_jexp(x[j]))
\end{aligned}
\]</span></p>
<span id="more"></span>
<p>class 表示该样本的分类，x[j] 表示预测函数的第 j
个输出，关于此公式的解释如下：</p>
<p>假设我们的预测函数的输出如下 <span class="math display">\[
[[0.0541, 0.1762, 0.9489 ], [−0.0288, −0.8072, 0.4909]]
\]</span> 假设我们的应该的分类如下 <span class="math display">\[
[0,2]
\]</span> 即第一个样本为类别class=0，第二个样本为类别class=2</p>
<p>那么 loss 函数则为： <span class="math display">\[
\begin{aligned}
\frac{e^{0.0541}}{e^{0.0541}+e^{0.1762}+e^{0.9489}}&amp;=0.2185\\
\frac{e^{0.4909}}{e^{-0.0288}+e^{-0.8072}+e^{0.4909}}&amp;=0.5354
\end{aligned}
\]</span> 然后计算log之后的相反数： <span class="math display">\[
\begin{aligned}
−\log(0.2185)&amp;=1.5210\\
−\log(0.5354)&amp;=0.6247
\end{aligned}
\]</span></p>
<p>取均值： <span class="math display">\[
\frac{1.5210+0.6247}{2}=1.073
\]</span></p>
<p>示例代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0541</span><span class="token punctuation">,</span><span class="token number">0.1762</span><span class="token punctuation">,</span><span class="token number">0.9489</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0288</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.8072</span><span class="token punctuation">,</span><span class="token number">0.4909</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
class_index <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>
loss_value <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> class_index<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>loss_value<span class="token punctuation">)</span> <span class="token comment">##1.073</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>torch</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Git</title>
    <url>/2022/3494410286.html</url>
    <content><![CDATA[<h2 id="版本控制">版本控制</h2>
<blockquote>
<p>版本控制（Revision
control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
</blockquote>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。 <span id="more"></span>
没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123191030.png"
alt="20220123191030" /></p>
<blockquote>
<p>常见的版本控制工具</p>
</blockquote>
<p>主流的版本控制器有如下这些：</p>
<ul>
<li>Git</li>
<li>SVN（Subversion）</li>
<li>CVS（Concurrent Versions System）</li>
<li>VSS（Microsoft Visual SourceSafe）</li>
<li>TFS（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision
Control System）、Serena
Dimensions、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear
Vault），现在影响力最大且使用最广泛的是Git与SVN</p>
<h3 id="版本控制分类">版本控制分类</h3>
<h4 id="本地版本控制">1、本地版本控制</h4>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123191654.png"
alt="20220123191654" /> 图片</p>
<h4 id="集中版本控制-svn">2、集中版本控制 SVN</h4>
<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123192220.png"
alt="20220123192220" /></p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<h4 id="分布式版本控制-git">3、分布式版本控制 Git</h4>
<p>每个人都拥有全部的代码，具有安全隐患。</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。
不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123192640.png"
alt="20220123192640" /></p>
<h4 id="git与svn的主要区别">Git与SVN的主要区别</h4>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123192819.png"
alt="20220123192819" /></p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件。</p>
<p>Git是目前世界上最先进的分布式版本控制系统。</p>
<h2 id="git的历史">Git的历史</h2>
<p>同生活中的许多伟大事物一样，Git
诞生于一个极富纷争大举创新的年代。</p>
<p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux
内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到
2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper
来管理和维护代码。</p>
<p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p>
<p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux
内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper
的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus
Torvalds)基于使用 BitKeeper
时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git。</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代
BitKeeper！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123192959.png"
alt="20220123192959" /></p>
<p>Linux和Git之父李纳斯·托沃兹（Linus Benedict Torvalds）1969、芬兰</p>
<h2 id="git环境配置">Git环境配置</h2>
<h3 id="软件下载">软件下载</h3>
<p>打开 <a
href="https://git-scm.com/">Git官网</a>，下载Git对应操作系统的版本。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/图片.png"
alt="图片" /></p>
<p>下载对应的版本即可安装。</p>
<h3 id="启动git">启动Git</h3>
<p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123194614.png"
alt="20220123194614" /></p>
<p><strong>Git
Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多</p>
<p><strong>Git CMD</strong>：Windows风格的命令行</p>
<p><strong>Git
GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>
<h3 id="常用的linux命令">常用的Linux命令</h3>
<blockquote>
<p>1）、cd : 改变目录。<br />
2）、cd . . 回退到上一个目录，直接cd进入默认目录<br />
3）、pwd : 显示当前所在的目录路径。<br />
4）、ls(ll):
都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。<br />
5）、touch : 新建一个文件 如 touch index.js
就会在当前目录下新建一个index.js文件。<br />
6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。<br />
7）、mkdir: 新建一个目录,就是新建一个文件夹。<br />
8）、rm -r : 删除一个文件夹, rm -r src 删除src目录，rm -rf /
切勿在Linux中尝试！删除电脑中全部文件！<br />
9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src
是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。<br />
10）、reset 重新初始化终端/清屏。<br />
11）、clear 清屏。<br />
12）、history 查看命令历史。<br />
13）、help 帮助。<br />
14）、exit 退出。<br />
15）、#表示注释</p>
</blockquote>
<h3 id="git配置">Git配置</h3>
<p>所有的配置文件，其实都保存在本地！</p>
<p>查看配置 git config -l</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123195605.png"
alt="20220123195605" /></p>
<p>查看不同级别的配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看系统config</span>
<span class="token function">git</span> config --system --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123195715.png"
alt="20220123195715" /></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前用户（global）配置</span>
<span class="token function">git</span> config --global  --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220123195901.png"
alt="20220123195901" /></p>
<h3 id="git相关的配置文件">Git相关的配置文件</h3>
<p>1）、Git：Git 安装目录下的 gitconfig --system 系统级</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124103424.png"
alt="20220124103424" /></p>
<p>2）、C: .gitconfig 只适用于当前登录用户的配置 --global 全局</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124103604.png"
alt="20220124103604" /></p>
<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p>
<p>设置用户名与邮箱（用户标识，必要）
当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"zepoch"</span>  <span class="token comment">#名称</span>
<span class="token function">git</span> config --global user.email <span class="token number">1654306546</span>@qq.com   <span class="token comment">#邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只需要做一次这个设置，如果你传递了--global
选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项。总之--global为全局配置，不加为某个项目的特定配置。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124103901.png"
alt="20220124103901" /></p>
<h2 id="git基本理论重要">Git基本理论（重要）</h2>
<h3 id="三个区域">三个区域</h3>
<p>Git本地有三个工作区域：工作目录（Working
Directory）、暂存区(Stage/Index)、资源库(Repository或Git
Directory)。如果在加上远程的git仓库(Remote
Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124104259.png"
alt="20220124104259" /></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方<br />
</li>
<li>Index /
Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息<br />
</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本<br />
</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124104818.png"
alt="20220124104818" /></p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。<br />
</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。<br />
</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。<br />
</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。<br />
</li>
<li>Local
Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。<br />
</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
<h3 id="工作流程">工作流程</h3>
<p>git的工作流程一般是这样的：</p>
<p>1、在工作目录中添加、修改文件；</p>
<p>2、将需要进行版本管理的文件放入暂存区域；</p>
<p>3、将暂存区域的文件提交到git仓库。</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124105100.png"
alt="20220124105100" /></p>
<h2 id="git项目搭建">Git项目搭建</h2>
<h3 id="创建工作目录与常用指令">创建工作目录与常用指令</h3>
<p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124153928.png"
alt="20220124153928" /></p>
<h3 id="本地仓库搭建">本地仓库搭建</h3>
<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在当前目录新建一个Git代码库</span>
$ <span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h3 id="克隆远程仓库">克隆远程仓库</h3>
<p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#克隆一个项目和它的整个代码历史(版本信息)</span>
$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>  <span class="token comment"># &lt;https://gitee.com/kuangstudy/openclass.git></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、去 gitee 或者 github 上克隆一个测试！</p>
<h2 id="git文件操作">Git文件操作</h2>
<h3 id="文件的四种状态">文件的四种状态</h3>
<p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库,
不参与版本控制. 通过 <strong>git add</strong> 状态变为
<strong>Staged</strong>.<br />
</li>
<li>Unmodify: 文件已经入库, 未修改,
即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处,
如果它被修改, 而变为 <strong>Modified</strong>. 如果使用 <strong>git
rm</strong> 移出版本库, 则成为 <strong>Untracked</strong> 文件<br />
</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作.
这个文件也有两个去处, 通过 <strong>git add</strong> 可进入暂存
<strong>staged</strong> 状态, 使用 <strong>git checkout</strong>
则丢弃修改过, 返回到 <strong>unmodify</strong> 状态, 这个 <strong>git
checkout</strong> 即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行 <strong>git commit</strong>
则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为
<strong>Unmodify</strong> 状态. 执行 <strong>git reset HEAD
filename</strong> 取消暂存, 文件状态为 <strong>Modified</strong></li>
</ul>
<h3 id="查看文件状态">查看文件状态</h3>
<p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看指定文件状态</span>
<span class="token function">git</span> status <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>

<span class="token comment">#查看所有文件状态</span>
<span class="token function">git</span> status

<span class="token comment"># git add .                  添加所有文件到暂存区</span>

<span class="token comment"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="忽略文件">忽略文件</h3>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立".gitignore"文件，此文件有如下规则：</p>
<ol type="1">
<li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li>
<li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</p></li>
<li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li>
<li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li>
<li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
<p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为注释</span>
*.txt        <span class="token comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span>
<span class="token operator">!</span>lib.txt     <span class="token comment">#但lib.txt除外</span>
/temp        <span class="token comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span>
build/       <span class="token comment">#忽略build/目录下的所有文件</span>
doc/*.txt    <span class="token comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ol>
<h2 id="使用码云">使用码云</h2>
<ol type="1">
<li><p>注册登录码云，完善个人信息<br />
</p></li>
<li><p>设置本机绑定SSH公钥，实现免密码登录</p>
<p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 C:\Users\Administrator\.ssh 目录</span>

<span class="token comment"># 生成公钥</span>

$ ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124162203.png"
alt="20220124162203" /></p></li>
<li><p>将公钥信息public key 添加到码云账户中即可。<br />
</p></li>
<li><p>使用码云创建一个自己的仓库。</p></li>
<li><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，...</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124161637.png"
alt="20220124161637" /></p></li>
</ol>
<h2 id="说明git分支">说明：GIT分支</h2>
<p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于Git/20220124163332.png"
alt="20220124163332" /></p>
<p>git分支中常用指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment"># 列出所有本地分支</span>
$ <span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
$ <span class="token function">git</span> branch -r

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，并切换到该分支</span>
$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 合并指定分支到当前分支</span>
$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 删除分支</span>
$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 删除远程分支</span>
$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交。选择要保留他的代码还是你的代码。</p>
<p>main
主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的
dev
分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支
main 上来。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm和yarn</title>
    <url>/2022/3868603507.html</url>
    <content><![CDATA[<h2 id="什么是-npm">什么是 NPM</h2>
<ul>
<li>NPM（全称Node Package Manager，即node包管理器）<br />
</li>
<li>是Node.js默认的、以JavaScript编写的软件包管理系统</li>
<li>npm 来分享和使用代码已经成了前端的标配</li>
<li>官网： <a href="https://www.npmjs.com"
class="uri">https://www.npmjs.com</a></li>
<li>npm被全球超过1100万开发人员所依赖</li>
<li>拥有超过一百万个软件包，是世界上最大的软件注册表 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于npm和yarn/20220126175706.png"
alt="20220126175706" /></li>
</ul>
<span id="more"></span>
<h2 id="安装npm">安装NPM</h2>
<ul>
<li>npm是Node.js默认的软件包管理系统</li>
<li>安装完毕node后，会默认安装好npm</li>
<li>npm本身也是基于Node.js开发的软件</li>
<li>下载Node: <a href="http://nodejs.cn"
class="uri">http://nodejs.cn</a></li>
</ul>
<h2 id="npm-的使用">NPM 的使用</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v   
<span class="token comment">#通过查看版本，看npm是否安装成功</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span>      
<span class="token comment">#使用 npm 命令安装模块</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span> -g   
<span class="token comment">#可以直接在命令行里使用</span>

<span class="token function">npm</span> list -g  
<span class="token comment">#查看所有全局安装的模块</span>

<span class="token function">npm</span> list vue 
<span class="token comment">#查看某个模块的版本号</span>

<span class="token function">npm</span> -g <span class="token function">install</span> npm@5.9.1  
<span class="token comment">#（@后跟版本号）这样我们就可以更新npm版本</span>

<span class="token function">npm</span> <span class="token function">install</span> -save moduleName         
<span class="token comment"># -save 在package文件的dependencies节点写入依赖。</span>

<span class="token function">npm</span> <span class="token function">install</span> -save-dev moduleName  
<span class="token comment"># -save-dev 在package文件的devDependencies节点写入依赖dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块</span>
<span class="token comment"># devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它,比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="npm-镜像的设置与查看">NPM 镜像的设置与查看</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#搭建环境时通过如下代码将npm设置成淘宝镜像</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org --global
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist --global

<span class="token comment">#设置当前地址（设置为默认地址）</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/

<span class="token comment">#查看镜像的配置结果</span>
<span class="token function">npm</span> config get registry 
<span class="token function">npm</span> config get disturl  

<span class="token comment">#使用nrm工具切换淘宝源</span>
npx nrm use taobao

<span class="token comment">#如果之后需要切换回官方源可使用</span>
npx nrm use <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="package.json-属性说明">Package.json 属性说明</h2>
<blockquote>
<p>name - 包名。<br />
version - 包的版本号。<br />
description - 包的描述。<br />
homepage - 包的官网 url 。<br />
author - 包的作者姓名。<br />
contributors - 包的其他贡献者姓名。<br />
dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在
node_module 目录下。<br />
repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github
上。<br />
main - main 字段指定了程序的主入口文件，require('moduleName')
就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。<br />
keywords - 关键字</p>
</blockquote>
<h2 id="npm-常用命令">NPM 常用命令</h2>
<p>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。
使用npm help &lt;command&gt;可查看某条命令的详细帮助，例如npm help
install。 在package.json所在目录下使用npm install .
-g可先在本地安装当前命令行程序，可用于发布前的本地测试。 使用npm update
&lt;package&gt;可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。
使用npm update &lt;package&gt;
-g可以把全局安装的对应命令行程序更新至最新版。 使用npm cache
clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。
使用npm unpublish
&lt;package&gt;@&lt;version&gt;可以撤销发布自己发布过的某个版本代码。</p>
<h2 id="包的使用">包的使用</h2>
<ul>
<li>通过命令行使用 npm 下载和更新包</li>
<li>没有webpack之前搜寻整个 node_modules
目录来定位每个包的路径再手动添加到我们 HTML
文件中（实在太太不方便了）</li>
<li>大多数编程语言都会提供从一个文件导入另一个文件代码的机制。然而
JavaScript 最初设计时并没有这个特性，因为 JavaScript
原本是为了在浏览器端运行而设计的，并没有权限获取计算机客户端的文件系统（安全考虑）。所以很长一段时间以来，组织多个文件的
JavaScript 代码就是把每个文件下载下来，变量是全局共享的。</li>
<li>CommonJS 中很大的一部分便是对模块系统的规范，</li>
<li>使用require语句导入包</li>
<li>新的ES6可以使用import导入包</li>
</ul>
<h2 id="什么是-yarn">什么是 Yarn</h2>
<p>“Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS
包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm
的一些缺陷而出现的。因为NPM5以下会出现下面的问题：</p>
<ul>
<li>npm
install的时候巨慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。</li>
<li>同一个项目，多人开发时，由于安装的版本不一致出现bug</li>
</ul>
<p>官网：www.yarnpkg.com</p>
<h2 id="yarn-的安装">Yarn 的安装</h2>
<p>下载node.js，使用npm安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span>
<span class="token function">yarn</span> --version <span class="token comment">#查看版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安装node.js，下载yarn的安装程序:
提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</p>
<p>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org -g
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="yarn-的基本使用">Yarn 的基本使用</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> init                                  <span class="token comment">#初始化项目   同npm init，执行输入信息后，会生成package.json文件</span>
<span class="token function">yarn</span> <span class="token function">install</span>                     <span class="token comment">#安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">install</span> --flat         <span class="token comment">#安装一个包的单一版本</span>
<span class="token function">yarn</span> <span class="token function">install</span> --force   <span class="token comment">#强制重新下载所有包</span>
<span class="token function">yarn</span> <span class="token function">install</span> --production  <span class="token comment">#只安装dependencies里的包</span>
<span class="token function">yarn</span> <span class="token function">install</span> --no-lockfile  <span class="token comment">#不读取或生成yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">install</span> --pure-lockfile  <span class="token comment">#不生成yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>  <span class="token comment"># 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span> <span class="token comment"># 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>  <span class="token comment"># 安装某个tag（比如beta,next或者latest）</span>
<span class="token function">yarn</span> <span class="token function">add</span> --dev/-D   <span class="token comment"># 加到 devDependencies</span>
<span class="token function">yarn</span> <span class="token function">add</span> --peer/-P   <span class="token comment"># 加到 peerDependencies</span>
<span class="token function">yarn</span> <span class="token function">add</span> --optional/-O  <span class="token comment"># 加到 optionalDependencies</span>

<span class="token comment">#默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：</span>

<span class="token function">yarn</span> <span class="token function">add</span> --exact/-E   <span class="token comment"># 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版</span>
<span class="token function">yarn</span> <span class="token function">add</span> --tilde/-T   <span class="token comment"># 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0</span>
<span class="token function">yarn</span> publish  <span class="token comment">#发布包</span>
<span class="token function">yarn</span> remove <span class="token operator">&lt;</span>packageName<span class="token operator">></span>  <span class="token comment">#移除一个包，会自动更新package.json和yarn.lock</span>
<span class="token function">yarn</span> upgrade <span class="token comment"># 更新一个依赖 用于更新包到基于规范范围的最新版本</span>
<span class="token function">yarn</span> run <span class="token comment"># 运行脚本 用来执行在 package.json 中 scripts 属性下定义的脚本</span>
<span class="token function">yarn</span> info <span class="token operator">&lt;</span>packageName<span class="token operator">></span> <span class="token comment"># 显示某个包的信息 可以用来查看某个模块的最新版本信息</span>
<span class="token function">yarn</span> cache      <span class="token comment"># 缓存</span>
<span class="token function">yarn</span> cache list       <span class="token comment"># 列出已缓存的每个包 </span>
<span class="token function">yarn</span> cache <span class="token function">dir</span>   <span class="token comment"># 返回 全局缓存位置</span>
<span class="token function">yarn</span> cache clean  <span class="token comment"># 清除缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="yarn-的优点">Yarn 的优点</h2>
<p>速度快 安装版本统一 更简洁的输出 多注册来源处理 更好的语义化</p>
<h2 id="npm-与-yarn-的比对">NPM 与 Yarn 的比对</h2>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于npm和yarn/20220126181427.png"
alt="20220126181427" /></p>
]]></content>
      <tags>
        <tag>npm</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 pandoc exited with code null 的解决方案</title>
    <url>/2022/2213706848.html</url>
    <content><![CDATA[<p>今天在写博客的时候，渲染的时候发生了一些问题，主要报错如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>hexo-renderer-pandoc<span class="token punctuation">]</span> pandoc exited with code null.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看了一些博主的方案，也进行了尝试，但是结果并不是很好，但是自己经过摸索还是解决了，便是来写一下相关的解决方案。</p>
<span id="more"></span>
<p>第一种是将 <code>hexo-renderer-pandoc</code> 卸载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> remove --save hexo-renderer-pandoc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是呢，卸载之后，hexo 的渲染器就需要重新装配，不符合我的需求。</p>
<p>第二种则是在 Linux 之下的的一个官方的<a
href="https://github.com/pandoc/pandoc-action-example#simple-usage">解决方法</a>：</p>
<pre class="line-numbers language-none"><code class="language-none">name: Simple Usage

on: push

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-18.04
    steps:
      - uses: docker:&#x2F;&#x2F;pandoc&#x2F;core:2.9
        with:
          args: &quot;--help&quot; # gets appended to pandoc command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第三种就是我大概摸索到的一个方法，即下载
<code>pandoc</code>，因为我是 windows，然后 push 到 github
进行部署的。下载地址如下： <a
href="https://github.com/jgm/pandoc/releases">Releases · jgm/pandoc
(github.com)</a></p>
<p>安装之后重新开启命令行进行部署即可。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于高级事件和 BOM 浏览器对象类型</title>
    <url>/2022/257512457.html</url>
    <content><![CDATA[<h1 id="高级事件">高级事件</h1>
<h2 id="注册事件">注册事件</h2>
<ul>
<li>给元素添加事件成为注册事件或者绑定事件</li>
<li><h3 id="传统方式和方法监听注册方式">传统方式和方法监听注册方式</h3>
<ul>
<li><h4 id="传统注册">传统注册</h4>
<ul>
<li>利用 on 开头的事件 onclick</li>
</ul>
<p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;button onclick = alert("hi~")><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<ul>
<li><p>特点：注册事件的唯一性</p></li>
<li><p>同一元素同一事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p>
<span id="more"></span></li>
</ul></li>
<li><h4 id="方法监听注册方式">方法监听注册方式</h4>
<ul>
<li><p>w3c 标准 推荐方式</p></li>
<li><p>addEventListener() 是一个方法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>type 事件类型字符串，比如click mouseover
注意这里不要带on</p></li>
<li><p>listener 事件处理函数，事件发生时，会调用该监听函数</p></li>
<li><p>可选参数，是一个布尔值，默认是false</p></li>
<li><p>attachEvent 事件监听方式</p>
<ul>
<li>ie9 之前的版本支持</li>
<li>生产版本一般不使用</li>
</ul></li>
</ul></li>
<li><p>IE9 之前的 IE 不支持此方法</p></li>
<li><p>同一个元素同一个事件可以注册多个监听器</p></li>
<li><p>按注册顺序依次执行</p></li>
</ul></li>
</ul></li>
<li><h3 id="注册事件兼容性解决方法">注册事件兼容性解决方法</h3>
<ul>
<li>先照顾大多数浏览器，再处理特殊浏览器</li>
</ul></li>
</ul>
<h2 id="删除事件-解绑事件">删除事件 解绑事件</h2>
<ul>
<li><h3 id="删除事件的方式">删除事件的方式</h3>
<ul>
<li><h4 id="传统注册方式">传统注册方式</h4>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><h4 id="方法监听注册方式-1">方法监听注册方式</h4>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span>eventNameWithOn<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul></li>
<li>删除事件的兼容性解决方案</li>
</ul>
<h2 id="dom-事件流">DOM 事件流</h2>
<ul>
<li>描述的是从页面中接收事件的顺序</li>
<li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li>
<li><h3 id="三个阶段">三个阶段</h3>
<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul></li>
<li><h3 id="注意事项">注意事项</h3>
<ul>
<li>js 代码中只能执行捕获或者冒泡其中的一个阶段‘</li>
<li>onclick 和 attachEvent 只能得到冒泡阶段</li>
<li>addEventListener(type, listener[, useCapture])
第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false（不写默认就是false），表示在冒泡阶段调用事件处理程序</li>
</ul></li>
</ul>
<h2 id="事件对象">事件对象</h2>
<ul>
<li>event即为一个事件对象，可看作为一个形参</li>
<li>事件对象只有有了事件才会存在，是系统创建的，不需要传递参数</li>
<li>事件对象是我们事件的一系列相关数据的集合 跟事件相关的
比如鼠标点击里面就包含了鼠标的相关信息</li>
<li>事件对象可以自己命名，比如 event ent 等等</li>
<li>事件对象的兼容性问题 ie 678 通过 window.event</li>
<li><h3 id="事件对象的常见属性和方法">事件对象的常见属性和方法</h3>
<ul>
<li><p>e.target</p>
<ul>
<li>返回触发事件的对象 标准</li>
</ul></li>
<li><p>e.srcElement</p>
<ul>
<li>返回触发事件的对象 非标准</li>
</ul></li>
<li><p>e.type</p>
<ul>
<li>返回事件的类型 比如 click mouseover 不带 on</li>
</ul></li>
<li><p>e.cancelBubble</p>
<ul>
<li>该属性阻止冒泡 非标准 ie6-8 使用</li>
</ul></li>
<li><p>e.returnValue</p>
<ul>
<li>该属性阻止默认事件（默认行为） 非标准 ie6-8 使用
比如不让链接跳转</li>
</ul></li>
<li><p>e.preventDefault()</p>
<ul>
<li>该方法阻止默认事件（默认行为） 标准 比如不让跳转</li>
</ul></li>
<li><p>e.stopPropagation()</p>
<ul>
<li>阻止冒泡</li>
</ul></li>
</ul></li>
</ul>
<h2 id="阻止冒泡事件">阻止冒泡事件</h2>
<ul>
<li><p>阻止事件冒泡的两种方式</p>
<ul>
<li><p>事件冒泡：开始时由最具体的元素接受，然后逐级向上传播到 DOM
最顶层节点</p></li>
<li><p>标准写法</p>
<ul>
<li>利用事件对象里面的 stopPropagation() 方法</li>
</ul></li>
<li><p>非标准写法</p>
<ul>
<li>IE6-8 利用事件对象 cancelBubble 属性</li>
</ul></li>
</ul></li>
</ul>
<h2 id="事件委托">事件委托</h2>
<ul>
<li>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景</li>
<li>咱们班有100个学生，快递员有100个快递，如果一个个的送花费时间较长。同时每个学生领取的时候，也需要排队领取，也花费时间较长，何如？</li>
</ul>
<p>解决方案∶快递员把10个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p>
<p>优势︰快递员省事，委托给班主任就可以走了。同学们领取也方便，因为相信班主任。</p>
<ul>
<li><p>事件委托又称事件代理，在jQuery 里面成为事件委派</p>
<ul>
<li><p>事件委托的原理</p>
<ul>
<li>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</li>
</ul></li>
</ul></li>
<li><p>事件委托的作用</p>
<p>我们只操作了一次 DOM，提高了程序的性能</p></li>
</ul>
<h2 id="常用的鼠标事件">常用的鼠标事件</h2>
<h3 id="常用的鼠标事件-1">常用的鼠标事件</h3>
<ul>
<li><h4 id="禁止使用鼠标右键菜单">禁止使用鼠标右键菜单</h4>
<ul>
<li>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li>
</ul>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"contextmenu"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
	e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><h4 id="禁止鼠标选中">禁止鼠标选中</h4>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"selectstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><h4 id="鼠标事件对象">鼠标事件对象</h4>
<ul>
<li><p>event
对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象
MouseEvent 和键盘事件对象 KeyboardEvent。</p></li>
<li><p>e.clientX: 返回鼠标相对于浏览器窗口可视区的 X 坐标</p></li>
<li><p>e.clientY: 返回鼠标相对于浏览器窗口可视区的 Y 坐标</p></li>
<li><p>e.pageX: 返回鼠标相对于文档页面的 X 坐标 ID9+ 支持</p></li>
<li><p>e.pageY: 返回鼠标相对于文档页面的 Y 坐标 ID9+ 支持</p></li>
<li><p>e.screenX: 返回鼠标相对于电脑屏幕的 X 坐标</p></li>
<li><p>e.screenY: 返回鼠标相对于电脑屏幕的 Y 坐标</p></li>
<li><p>案例：移动的天使</p>
<ul>
<li>鼠标不断的移动，使用鼠标移动事件：mousemove - 在页面中移动，给
document 注册事件
<ul>
<li>图片要移动距离，而且不占位置，我们使用绝对定位即可</li>
<li>核心原理∶每次鼠标移动，我们都会获得最新的鼠标坐标，把这个x和y坐标做为图片的top和left值就可以移动圄片
## 常用的键盘事件</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>onkeyup: 某个键盘按键被松开时触发</p></li>
<li><p>onkeydown: 某个键盘按键被按下时触发</p></li>
<li><p>onkeypress: 某个键盘案件被按下时触发 但是它不识别功能键 比如 ctrl
shift 箭头等</p></li>
<li><p>键盘事件对象</p></li>
<li><p>ASCII 表</p>
<ul>
<li><p>keyCode</p></li>
<li><p>keyup和keydown 事件不区分字母大小写 a 和 A 得到的都是 65</p></li>
<li><p>keypress 事件 区分字母大小写</p></li>
<li><p>案例</p>
<ul>
<li><p>按下 s 使得文本框获得焦点</p></li>
<li><p>模拟京东快递单号查询单号</p>
<ul>
<li>注意：keydown 和 keypress
在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h1 id="bom-浏览器对象类型">BOM 浏览器对象类型</h1>
<h2 id="bom-概述">BOM 概述</h2>
<h3 id="什么是-bom">什么是 BOM</h3>
<ul>
<li>BOM（Browser Object Model）
即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是
window</li>
<li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li>
<li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是
W3C，BOM 最初是 Netscape 浏览器标准的一部分。</li>
</ul>
<h3 id="bom-的构成">BOM 的构成</h3>
<ul>
<li><h4 id="bom-比-dom-更大它包含-dom">BOM 比 DOM 更大，它包含
DOM。</h4></li>
<li><h4 id="window-对象是浏览器的顶级对象它具有双重角色">window
对象是浏览器的顶级对象，它具有双重角色。</h4>
<ul>
<li>它是 JS 访问浏览器窗口的一个接口。</li>
<li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li>
<li>在调用的时候可以省略
window，前面学习的对话框都属于window对象方法，如
alert()、prompt()等</li>
<li>注意：window下的一个特殊属性 window.name</li>
</ul></li>
<li><h4 id="window-对象的常见事件">window 对象的常见事件</h4>
<ul>
<li><h5 id="onload">onload</h5>
<ul>
<li>最好使用addEventListener</li>
</ul></li>
<li><h5 id="窗口加载事件">窗口加载事件</h5>
<ul>
<li><p>document.addEventListener('DOMContentLoaded',function(){})</p>
<ul>
<li>DOMContentLoaded 事件触发时，当且仅当 DOM
加载完成，不包括样式表，图片，flash等</li>
</ul></li>
</ul></li>
<li><h5 id="调整窗口大小事件">调整窗口大小事件</h5>
<ul>
<li>resize</li>
</ul></li>
</ul></li>
<li><h4 id="定时器">定时器</h4>
<ul>
<li><h5 id="两种定时器">两种定时器</h5>
<ul>
<li><p>setTimeout()</p>
<ul>
<li>setTimeout(调用函数, [延迟的毫秒数])</li>
<li>setTimeout()
方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</li>
<li>window 在调用的时候可以省略</li>
<li>延时时间单位为毫秒，但是可以省略，省略默认是 0</li>
<li>调用函数可以直接写函数，也可以写函数名</li>
<li>页面中可能有很多的定时器，我们经常给定时器加标识符</li>
<li>回调函数 callback()</li>
</ul></li>
<li><p>setInterval(调用函数, 重复时间)</p>
<ul>
<li>window 可以省略</li>
<li>这个调用函数可以直接写函数，或者写函数名或者采取字符串"函数名()"三种形式</li>
<li>间隔的毫秒省略默认是0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数</li>
<li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li>
</ul></li>
</ul></li>
<li>停止 setTimeout() 定时器</li>
<li>window.clearTimeout(timeout)</li>
</ul></li>
<li><h4 id="js执行机制">JS执行机制</h4>
<ul>
<li><h5 id="js-是单线程">JS 是单线程</h5>
<ul>
<li>JavaScript
语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为
JavaScript 这门脚本语言诞生的致命所致——JavaScript
是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM
进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除。</li>
<li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样导致的问题是：如果
JS
执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li>
</ul></li>
<li><h5 id="同步和异步">同步和异步</h5>
<ul>
<li><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML 提出 Web Worker
标准，允许 JavaScript 脚本创建多个线程。于是，JS
中出现了同步和异步。</p></li>
<li><p>同步</p>
<ul>
<li><p>前一个任务结束之后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</p></li>
<li><p>同步任务</p>
<ul>
<li>同步任务都在主线程上执行，形成一个执行栈</li>
</ul></li>
</ul></li>
<li><p>异步</p>
<ul>
<li><p>做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。</p></li>
<li><p>异步任务</p>
<ul>
<li>JS 的异步是通过回调函数实现的</li>
<li>1、普通事件，如 click、resize 等</li>
<li>2、资源加载，如 load、error 等</li>
<li>3、定时器，包括 setInerval、setTimeout 等</li>
<li>异步任务相关回调函数添加到任务队列中（任务队列也称消息队列）</li>
</ul></li>
</ul></li>
</ul></li>
<li><h5 id="js-执行机制">JS 执行机制</h5>
<ul>
<li>先执行执行栈中的同步任务。</li>
<li>异步任务（回调函数）放入任务队列中。</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li>
<li>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（event
loop）。</li>
</ul></li>
</ul></li>
<li><h4 id="location">Location</h4>
<ul>
<li><h5 id="什么是-location-对象">什么是 location 对象</h5>
<ul>
<li>window 对象给我们提供了一个 location 属性用于获取或设置窗体的
URL，并且可以用于解析
URL。因为这个属性返回的是一个对象，所以我们将这个对象也成为 location
对象。</li>
</ul></li>
<li><h5 id="url">URL</h5>
<ul>
<li>统一资源定位符（Uniform Resource Locator,
URL）是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的
URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li>
<li>protocol://host[:port]/path/[?query]#fragment</li>
</ul></li>
<li><h5 id="location-对象的属性">location 对象的属性</h5>
<ul>
<li><p>location.href</p>
<ul>
<li>获取或者设置 整个 URL</li>
</ul></li>
<li><p>location.host</p>
<ul>
<li>返回主机（域名）</li>
</ul></li>
<li><p>location.port</p>
<ul>
<li>返回端口号 如果未写返回 空字符串</li>
</ul></li>
<li><p>location.pathname</p>
<ul>
<li>返回路径</li>
</ul></li>
<li><p>location.search</p>
<ul>
<li>返回参数</li>
</ul></li>
<li><p>location.hash</p>
<ul>
<li>返回片段 #后面内容 常见于链接 锚点</li>
</ul></li>
</ul></li>
<li><h5 id="location-对象方法">location 对象方法</h5>
<ul>
<li><p>location.assign()</p>
<ul>
<li><p>跟 href 一样，可以跳转页面（也称重定向页面）</p>
<ul>
<li>记录浏览历史，可以实现后退功能</li>
</ul></li>
</ul></li>
<li><p>location.replace()</p>
<ul>
<li><p>替换当前页面，因为不记录历史，所以不能后退页面</p>
<ul>
<li>不记录历史，所以不能后退</li>
</ul></li>
</ul></li>
<li><p>location.reload()</p>
<ul>
<li>重新加载页面，相当于刷新按钮或者 F5 如果参数为 true 强制刷新 CTRL +
F5</li>
</ul></li>
</ul></li>
<li><h5 id="navigation-对象">navigation 对象</h5></li>
<li><h5 id="history-对象">history 对象</h5>
<ul>
<li><p>back()</p>
<ul>
<li>可以后退功能</li>
</ul></li>
<li><p>forward()</p>
<ul>
<li>前进功能</li>
</ul></li>
<li><p>go(参数)</p>
<ul>
<li>前进后退功能 参数如果是1 前进1个页面 如果是-1 后退一个页面</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>再见小破电</title>
    <url>/2022/3640031914.html</url>
    <content><![CDATA[<p>感谢成电，我爱成电，这是我四年本科生涯的经历所能给予成电的评价。</p>
<p>我本身并不是很想分主题写，但是又害怕自己错过一些部分，为了让自己逻辑更为通顺，我将从下面这些方面叙说我的四年。</p>
<span id="more"></span>
<h2 id="我自己">我自己</h2>
<p>首先介绍一下我自己，楼主是来自河南十八线小县城的学生，生命科学与技术学院2018级生物信息复合培养。在2020年国家全面脱贫之前，按照国家的定义是国家级贫困县的贫困家庭的贫困学生，纯纯的小镇做题家。上大学之前甚至都没有出过我们那个屁大点地方的小县城，没有特长，没有兴趣爱好，当然家庭也不支持；身体也不好，小时候家里没钱吃肉，甚至给我搞出了佝偻病，也遗传了父亲母亲的一些其他的奇奇怪怪无关紧要但是会在体检报告单上体现出来的病。我的母亲一直是处于无业状态，在家照顾我以及我的弟弟；我的父亲原先是位农民，后来地被收了，就南下打工，成为了一名农民工。总体来说，属于是纯纯的衰仔一条了，衰的程度甩了路明非十八条街。但是个人有点可能比较适应这个时代的一些优点吧，我的心态比较好，也有可能是已经见惯了太多不好的事情已经麻木了。大概就是我总体的一个介绍了。</p>
<h2 id="学业">学业</h2>
<p>二十一世纪是生物的世纪，大概就是大家经常听到的一句话了，当然我是相信的，但是生物的世纪是由吞噬生物医药相关人员换来的，美好都给了非从业者，相关从业者大都是妥妥的奉献者了。本来呢，我是没有报名生物相关的，因为我本身也没什么兴趣爱好，所以也没有特别喜欢的专业。当时受到国家宣传影响，说我们芯片被制裁了巴拉巴拉，要好好搞电子信息，所以基本上报考专业都是电子信息相关的，但是被调剂来了。本着既来之则安之的想法，也就在生物这边待了下来（其实是错过了转专业通知，不然早就是计算机人了）。但是分专业的时候发现生命学院这边有个双学位的专业，毕业的时候给计算机和生物两个学位，而且只用交一份钱，于是我就选了这个专业。其实大一还是有周六周日的，但是大二大三就完完全全没有周六周日了，属于是我心态比较好了，倒也不觉得特别辛苦，比高中轻松快乐多了。</p>
<ul>
<li><p>课程方面，专业课相对于来说其实也都是很快乐的，考试的话基本背背PPT还是能够解决的，可能实验课还是更喜欢一点？连续两年的周六周日要去沙河做实验让我觉得还是蛮快乐的，感觉自己更加喜欢动手一点？大概是吧。其实我觉得在课程这方面，我觉得自己真的是好幸运的一个孩子。选到了很多有意思的课程，庹老师的钢琴，冉奎老师的马原和逻辑与批判思维，郝云超老师的美术鉴赏，雯雯老师的摄影，何老师的合唱，袁老师的海报，还有知味、日语、华尔兹、游泳、瑜伽等，真的很多有意思的课，属于是很幸运选上了吧。</p></li>
<li><p>实验方面，这个还是没有放大课程方面去说。生物这边要做的实验还是挺多的，生化实验，分子生物学实验，遗传学，酶工程，蛋白质工程，发酵工程，光谱学，还有挺多其他的生物相关的实验，都是蛮有意思的。计算机这边呢，有数据结构的实验，我记得当时让手写哈夫曼树来着，计组的实验，大概是搞个CPU什么玩意儿的，计网就是搞搞协议什么东西的，操统当时是写一个建议的操作系统，总体来说相对于生物的实验难度大一些，但是花点时间还是磨了出来，对我日后找工作起到了很大的帮助。</p></li>
<li><p>毕设方面，这个纯纯的是我的个人问题了。毕设是做了一个生物信息的课题，既是生物，也是计算机。属于是两边都不用改；但是还是有相当一大群的倒霉蛋同志们过了年到这里被要求改题目，还是蛮痛苦的。这个倒是没什么特别要说的，应该和大多数同志们是一样的。</p></li>
</ul>
<h2 id="竞赛">竞赛</h2>
<p>我自己以前并没有接触过竞赛，毕竟做题家嘛。大学大概还是摸了一些竞赛的。大概就是数模、ACM、iGEM、蓝桥杯、互加，生命竞赛。其中只有iGEM拿了金奖，我自己亲手写的软件还受到了最佳软件提名还是让我蛮开心的。数模大概就是新生赛摸了一个二等奖，其他的就都是参与奖的，太废物了我。ACM的话，大一那年校赛截了前一百，我们当时是103名，差一点三等奖属于是，不过后来又摸了一张三等奖，属于是就此为止了。蓝桥杯的话就是准备都没准备，甚至忘了报名了，被通知了才发现要去打省赛了，然后去沙河花了四个小时摸了张省二，属实不行。互加的话属于是大二还是大三的时候，当时在做科研训练，然后团委书记建议我把科研训练的项目一起做个互加和生命竞赛，就顺道扔了上去，后来让答辩，觉得太麻烦了，就直接没搞，自然也就没奖。当然也想过搞一些其他的竞赛，比如彼时还是西南大魔王的
robomaster，后来去参加机器人班笔试直接就没给进。大概就是所有的竞赛经历了。</p>
<h2 id="艺术">艺术</h2>
<p>在成电做些艺术相关的东西是在我大三的时候了，当时由冉奎老师带着入了哲学的门，这个老师真的很好，我的评价是，他的课，全部都可以直接选，都是超级有意思的。入了哲学的门之后，对我自己的内心改变很大，让我学会了如何使用辩证法和矛盾法来看待问题和解决问题，受益颇丰。之后又陆续开始了音乐美术身体美感之类的艺术学习，我属于是成电艺术改革方面的受益者了。艺术进入了生活之后，生活确实是更加快乐了，身边的朋友更多了，朋友们的性别比例也更加倾向于1比1了，甚至女孩子还要更加多一些。</p>
<h2 id="体魄">体魄</h2>
<p>先前也说了，自己的身体不是很好。进入成电之后属于是跟着梁媛老师混了两年，当了她两年的体育委员，大一学了整整一年的游泳吧，把一个旱鸭子变成了蛙泳自由泳快乐球，大二选了她的器械健身，白嫖了南门健身房一年。大二上课的时候发现了南门健身房的一个bug，卡务中心不给他们办卡，所以同学们去都是押饭卡，于是大三也这样子去嫖了一年。大四考研有点忙，去了商业街跟着杰哥混了一年，现在总体来说，身体稍微强壮了一点点吧。还是比较快乐的。</p>
<h2 id="老师">老师</h2>
<p>你电的老师给我的帮助真的是很大的，倒也不能这么说，我从小到大还没有遇到过不好的老师，每个老师对我都是蛮照顾的。各个老师除了课堂上教授专业知识之外，大都会和自己唠唠家常，唠唠前途，唠唠未来，唠唠各自的家庭，唠唠成都，唠唠国家，吐槽一下学校，聊聊我的单身问题，没有不能唠的。辅导员四年来对我都是很照顾，自己的学业相关、思想相关、生涯规划相关的事情辅导员也都是尽心尽力；在国际处做勤工助学时候，办公室的老师都对我很照顾，会给我带些水果之类的，有时候还能带着一起出去一起玩一起恰饭，我也能日常拉几个留学生做免费英语口语训练；考研失败的时候，很多老师也是帮我联系，帮我找调剂，最后去了中国科学院大学本部读研。</p>
<h2 id="设施">设施</h2>
<p>这个也是我一直在心心念念事情，因为原先考研一志愿没有上岸就春招找了工作，然后就发现学校真的好香。学校的宿舍、食堂、游泳馆相对外面真的性价比拉满，还有着每晚有人跑步的操场，含小说量巨大的图书馆，参加活动能白嫖的创咖啡和宾诺咖啡，还有着很近的校医院，商业街、南门、天街基本能满足大部分的聚餐需求。去市区坐校车基本四五十分钟也能完成，学校也相对其他高校言论更为自由，很多事情都可以写校长邮箱得到反馈并解决。相对于其他的川内高校，小破电的封校时间真的可以忽略不计。成都的玩乐的地方也有很多，去其他地方也很方便，周边相连的其他好玩的地方即便自驾也能一天内到达，有很多的小镇子，有很多的山，很多的水，我会在离开成都之后十分怀念。</p>
<h2 id="尾声">尾声</h2>
<p>除了以上的，还有很多的美好的回忆，帮助过我的人真的太多太多，用一篇文章远远不足以讲诉这些朋友们和我的故事，他们给了我无限的爱。四年过后，我有了无数的志同道合的朋友们，有了无限的艺术想象力，有了更为明晰的思辨能力，有了更为强健的身体，也找到了自己努力的意义。</p>
<p>当然成电也有他的缺点，我也会去骂你电的不好，但是我也明白有些东西确实不是小破电自己能决定的，他真的给了我美好的回忆。</p>
<p>写到最后感觉好像还是有什么东西是没写的，我就之后再补充吧。</p>
<p>再见，小破电。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>毕业</tag>
        <tag>成电</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个小脚本</title>
    <url>/2023/2262097032.html</url>
    <content><![CDATA[<p>最近上课，有一门课有一部分网课，这部分网课其实已经学过了，但是老师还是让看，看就看呗，原以为直接挂着就行了，但是发现这个网站每隔几分钟就会弹出窗口，需要点击才能继续观看。可是呢，我还有别的任务，于是便写了一个小脚本，使得可以实现自动刷课。</p>
<h2 id="找到弹出窗口">找到弹出窗口</h2>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/写一个小脚本/20230313165022.png"
alt="20230313165022" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/写一个小脚本/20230313165137.png"
alt="20230313165137" /></p>
<p>通过检查元素可以看到，class name 为 btn-ok btn
的只在弹出窗口中出现。</p>
<h2 id="整理思路写脚本">整理思路写脚本</h2>
<p>那么只要这个元素出现，选中这个元素，再添加一个 click 事件便可。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">click_btn_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'btn-ok btn'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'弹出窗口，已经点击'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有弹出窗口'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样便是完成了点击函数，但是还需要添加一个事件，那就是让这个函数一直运行着，一直检测着，便可以使用
setInterval() 方法。</p>
<p>全代码如下，其中的 60000 为每隔一分钟执行一次。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">click_btn_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'btn-ok btn'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'弹出窗口，已经点击'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有弹出窗口'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"click_btn_ok()"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>138.复制带随机指针的链表</title>
    <url>/2021/3186910758.html</url>
    <content><![CDATA[<p><a
href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">今天的力扣题目</a>的难度是中等，但是实际上做起来却感到稍微有些难。好吧，其实是因为俺太菜了嘤嘤嘤。题干如下：</p>
<span id="more"></span>
<blockquote>
<p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random
，该指针可以指向链表中的任何节点或空节点。</p>
<p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新
节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next
指针和 random
指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点
。</p>
<p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y
。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&gt; y
。</p>
<p>返回复制链表的头节点。</p>
<p>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个
[val, random_index] 表示：</p>
<p>val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到
n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点
head 作为传入参数。</p>
</blockquote>
<p>示例：</p>
<blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/e1.png"
alt="e1" /></p>
<p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p>
</blockquote>
<p>对于链表 <span
class="math inline">\(A-&gt;B-&gt;C\)</span>，我们可以将其拆分为 <span
class="math inline">\(A-&gt;A&#39;-&gt;B-&gt;B&#39;-&gt;C-&gt;C&#39;\)</span>。对于任意一个节点
<span class="math inline">\(S\)</span>，其拷贝节点 <span
class="math inline">\(S&#39;\)</span> 即为其后继节点，那么现在就可以将
<span class="math inline">\(S&#39;\)</span> 的随机节点指向 <span
class="math inline">\(S.random.next\)</span>，即 <span
class="math inline">\(p.next.random =
p.random.next\)</span>，之后将拷贝链与原链分离开来。图示如下（<a
href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao-rblsf/">图源</a>）：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/1.png"
alt="1" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/2.png"
alt="2" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/3.png"
alt="3" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/4.png"
alt="4" /></p>
<p>代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">:</span> <span class="token string">'Node'</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> random<span class="token punctuation">:</span> <span class="token string">'Node'</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>
        self<span class="token punctuation">.</span>random <span class="token operator">=</span> random


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'Node'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        p <span class="token operator">=</span> head
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            new_node <span class="token operator">=</span> Node<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            new_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_node
            p <span class="token operator">=</span> new_node<span class="token punctuation">.</span><span class="token builtin">next</span>
        p <span class="token operator">=</span> head
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            <span class="token keyword">if</span> p<span class="token punctuation">.</span>random<span class="token punctuation">:</span>
                p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>random <span class="token operator">=</span> p<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">next</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        
        p <span class="token operator">=</span> head
        dummy <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>搜索</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>前端代码规范(1)</title>
    <url>/2021/4204481673.html</url>
    <content><![CDATA[<h1 id="代码规范">代码规范</h1>
<h2 id="概述">1. 概述</h2>
<p>欢迎使用品优购代码规范，
这个是我借鉴京东前端代码规范，组织的品优购内部规范。旨在增强团队开发协作、提高代码质量和打造开发基石的编码规范，</p>
<p>以下规范是团队基本约定的内容，必须严格遵循。</p>
<span id="more"></span>
<h4 id="html规范">HTML规范</h4>
<p>基于 <a href="http://www.w3.org/">W3C</a>、<a
href="https://developer.apple.com/">苹果开发者</a>
等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。</p>
<h4 id="图片规范">图片规范</h4>
<p>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</p>
<h4 id="css规范">CSS规范</h4>
<p>统一规范团队 CSS 代码书写风格和使用 CSS
预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</p>
<h4 id="命名规范">命名规范</h4>
<p>从
<code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code>
的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</p>
<h2 id="html-规范">2. HTML 规范</h2>
<h3 id="doctype-声明">DOCTYPE 声明</h3>
<p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>HTML5标准模版</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML5标准模版<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="页面语言lang">页面语言lang</h3>
<p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体,
中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用
<code>zh-CN</code> 属性值</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更多地区语言参考：</p>
<pre class="line-numbers language-none"><code class="language-none">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)
zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)
zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)
zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="charset-字符集合">charset 字符集合</h3>
<p>一般情况下统一使用 “UTF-8” 编码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;meta charset&#x3D;&quot;GBK&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或
“UTF8”。根据 <a
href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是
“UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET
framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h3 id="书写风格">书写风格</h3>
<h4 id="html代码大小写">HTML代码大小写</h4>
<p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;div&gt;
	
&lt;DIV CLASS&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;DIV&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="类型属性">类型属性</h3>
<p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot; &gt;
&lt;script src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&quot; &gt;
&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&quot; &gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="元素属性">元素属性</h3>
<ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot;&gt;
&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked&#x3D;&quot;checked&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;text&gt;	
&lt;input type&#x3D;&#39;text&#39;&gt;
&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="特殊字符引用">特殊字符引用</h3>
<p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号
“&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML
源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="代码缩进">代码缩进</h3>
<p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;jdc&quot;&gt;
    &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="代码嵌套">代码嵌套</h3>
<p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;
    &lt;h1&gt;&lt;&#x2F;h1&gt;
    &lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;	
&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;
    &lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;	
&lt;p&gt; 
    &lt;span&gt;&lt;&#x2F;span&gt;
    &lt;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="图片规范-1">3. 图片规范</h2>
<h3 id="内容图">内容图</h3>
<p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
<li><strong>PC平台单张的图片的大小不应大于 200KB。</strong></li>
</ul>
<h3 id="背景图">背景图</h3>
<p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG
格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8
格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB
以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
<h2 id="css规范-1">4. CSS规范</h2>
<h3 id="代码格式化">代码格式化</h3>
<p>样式书写一般有两种：一种是紧凑格式 (Compact)</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc&#123; display: block;width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一种是展开格式（Expanded）</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    display: block;
    width: 50px;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>团队约定</strong></p>
<p>统一使用展开格式书写样式</p>
<h3 id="代码大小写">代码大小写</h3>
<p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 推荐 *&#x2F;
.jdc&#123;
	display:block;
&#125;
	
&#x2F;* 不推荐 *&#x2F;
.JDC&#123;
	DISPLAY:BLOCK;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="选择器">选择器</h3>
<ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>不使用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc li</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc li p</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">/* 不推荐 */</span>
<span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">#jdc</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc div</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="代码缩进-1">代码缩进</h3>
<p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    width: 100%;
    height: 100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分号">分号</h3>
<p>每个属性声明末尾都要加分号；</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    width: 100%;
    height: 100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="代码易读性">代码易读性</h3>
<p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123; 
    width: 100%; 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc&#123; 
    width:100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>逗号分隔的取值，逗号之后一个空格</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>为单个css选择器或新申明开启新行</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc, 
.jdc_logo, 
.jdc_hd</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.nav</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc,jdc_logo,.jdc_hd</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token selector">.nav</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code>
<code>hsla()</code> <code>rect()</code>
中不需有空格，且取值不要带有不必要的 0</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: rgba(255,255,255,.5);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: rgba( 255, 255, 255, 0.5 );
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>属性值十六进制数值能用简写的尽量用简写</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: #fff;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>不要为 <code>0</code> 指明单位</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0px 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="属性值引号">属性值引号</h3>
<p>css属性值需要用到引号时，统一使用单引号</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span> 
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 不推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span> 
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="属性书写顺序">属性书写顺序</h3>
<p>建议遵循以下顺序：</p>
<ol type="1">
<li>布局定位属性：display / position / float / clear / visibility /
overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>自身属性：width / height / margin / padding / border /
background</li>
<li>文本属性：color / font / text-decoration / text-align /
vertical-align / white- space / break-word</li>
<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow /
text-shadow / background:linear-gradient …</li>
</ol>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-o-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-ms-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a
href="https://www.mozilla.org/css/base/content.css">mozilla官方属性顺序推荐</a></p>
<h2 id="命名规范-1">命名规范</h2>
<p>由历史原因及个人习惯引起的 DOM
结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h3 id="目录命名">目录命名</h3>
<ul>
<li>项目文件夹：shoping</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
<li>产品类图片文件夹： upload</li>
<li>字体类文件夹： fonts</li>
</ul>
<h3 id="classname命名">ClassName命名</h3>
<p>ClassName的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong>
“_” 连接</p>
<p>.nav_top</p>
<h4 id="常用命名推荐">常用命名推荐</h4>
<p><strong>注意</strong>：ad、banner、gg、guanggao
等有机会和广告挂勾的不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种广告的英文或拼音类名不应该出现</p>
<p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;fuck&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;jer&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;sm&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;gcd&quot;&gt;&lt;&#x2F;div&gt; 
&lt;div class&#x3D;&quot;ass&quot;&gt;&lt;&#x2F;div&gt; 
&lt;div class&#x3D;&quot;KMT&quot;&gt;&lt;&#x2F;div&gt; 
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr class="header">
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>about</td>
<td>关于</td>
</tr>
<tr class="even">
<td>account</td>
<td>账户</td>
</tr>
<tr class="odd">
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr class="even">
<td>article</td>
<td>文章</td>
</tr>
<tr class="odd">
<td>aside</td>
<td>边栏</td>
</tr>
<tr class="even">
<td>audio</td>
<td>音频</td>
</tr>
<tr class="odd">
<td>avatar</td>
<td>头像</td>
</tr>
<tr class="even">
<td>bg,background</td>
<td>背景</td>
</tr>
<tr class="odd">
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr class="even">
<td>branding</td>
<td>品牌化</td>
</tr>
<tr class="odd">
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr class="even">
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr class="odd">
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr class="even">
<td>category</td>
<td>分类</td>
</tr>
<tr class="odd">
<td>chart</td>
<td>图表</td>
</tr>
<tr class="even">
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr class="odd">
<td>close</td>
<td>关闭</td>
</tr>
<tr class="even">
<td>col,column</td>
<td>列</td>
</tr>
<tr class="odd">
<td>comment</td>
<td>评论</td>
</tr>
<tr class="even">
<td>community</td>
<td>社区</td>
</tr>
<tr class="odd">
<td>container</td>
<td>容器</td>
</tr>
<tr class="even">
<td>content</td>
<td>内容</td>
</tr>
<tr class="odd">
<td>copyright</td>
<td>版权</td>
</tr>
<tr class="even">
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr class="odd">
<td>default</td>
<td>默认</td>
</tr>
<tr class="even">
<td>description</td>
<td>描述</td>
</tr>
<tr class="odd">
<td>details</td>
<td>细节</td>
</tr>
<tr class="even">
<td>disabled</td>
<td>不可用</td>
</tr>
<tr class="odd">
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr class="even">
<td>error</td>
<td>错误</td>
</tr>
<tr class="odd">
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr class="even">
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr class="odd">
<td>feature</td>
<td>专题</td>
</tr>
<tr class="even">
<td>fewer</td>
<td>收起</td>
</tr>
<tr class="odd">
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr class="even">
<td>figure</td>
<td>图</td>
</tr>
<tr class="odd">
<td>filter</td>
<td>筛选</td>
</tr>
<tr class="even">
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr class="odd">
<td>footer</td>
<td>页脚</td>
</tr>
<tr class="even">
<td>forum</td>
<td>论坛</td>
</tr>
<tr class="odd">
<td>gallery</td>
<td>画廊</td>
</tr>
<tr class="even">
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr class="odd">
<td>header</td>
<td>页头</td>
</tr>
<tr class="even">
<td>help</td>
<td>帮助</td>
</tr>
<tr class="odd">
<td>hide</td>
<td>隐藏</td>
</tr>
<tr class="even">
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr class="odd">
<td>home</td>
<td>主页</td>
</tr>
<tr class="even">
<td>icon</td>
<td>图标</td>
</tr>
<tr class="odd">
<td>info,information</td>
<td>信息</td>
</tr>
<tr class="even">
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr class="odd">
<td>links</td>
<td>链接</td>
</tr>
<tr class="even">
<td>login</td>
<td>登录</td>
</tr>
<tr class="odd">
<td>logout</td>
<td>退出</td>
</tr>
<tr class="even">
<td>logo</td>
<td>标志</td>
</tr>
<tr class="odd">
<td>main</td>
<td>主体</td>
</tr>
<tr class="even">
<td>menu</td>
<td>菜单</td>
</tr>
<tr class="odd">
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr class="even">
<td>module</td>
<td>模块</td>
</tr>
<tr class="odd">
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr class="even">
<td>msg,message</td>
<td>消息</td>
</tr>
<tr class="odd">
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr class="even">
<td>next</td>
<td>下一页</td>
</tr>
<tr class="odd">
<td>nub</td>
<td>小块</td>
</tr>
<tr class="even">
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr class="odd">
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr class="even">
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr class="odd">
<td>output</td>
<td>输出</td>
</tr>
<tr class="even">
<td>pagination</td>
<td>分页</td>
</tr>
<tr class="odd">
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr class="even">
<td>preview</td>
<td>预览</td>
</tr>
<tr class="odd">
<td>previous</td>
<td>上一页</td>
</tr>
<tr class="even">
<td>primary</td>
<td>主要</td>
</tr>
<tr class="odd">
<td>progress</td>
<td>进度条</td>
</tr>
<tr class="even">
<td>promotion</td>
<td>促销</td>
</tr>
<tr class="odd">
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr class="even">
<td>reg,register</td>
<td>注册</td>
</tr>
<tr class="odd">
<td>save</td>
<td>保存</td>
</tr>
<tr class="even">
<td>search</td>
<td>搜索</td>
</tr>
<tr class="odd">
<td>secondary</td>
<td>次要</td>
</tr>
<tr class="even">
<td>section</td>
<td>区块</td>
</tr>
<tr class="odd">
<td>selected</td>
<td>已选</td>
</tr>
<tr class="even">
<td>share</td>
<td>分享</td>
</tr>
<tr class="odd">
<td>show</td>
<td>显示</td>
</tr>
<tr class="even">
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr class="odd">
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr class="even">
<td>sort</td>
<td>排序</td>
</tr>
<tr class="odd">
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr class="even">
<td>submit</td>
<td>提交</td>
</tr>
<tr class="odd">
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr class="even">
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr class="odd">
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr class="even">
<td>summary</td>
<td>摘要</td>
</tr>
<tr class="odd">
<td>tab</td>
<td>标签页</td>
</tr>
<tr class="even">
<td>table</td>
<td>表格</td>
</tr>
<tr class="odd">
<td>txt,text</td>
<td>文本</td>
</tr>
<tr class="even">
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr class="odd">
<td>time</td>
<td>时间</td>
</tr>
<tr class="even">
<td>tips</td>
<td>提示</td>
</tr>
<tr class="odd">
<td>title</td>
<td>标题</td>
</tr>
<tr class="even">
<td>video</td>
<td>视频</td>
</tr>
<tr class="odd">
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr class="even">
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>单细胞随机采样</title>
    <url>/2023/3969475204.html</url>
    <content><![CDATA[<p>最近单细胞图谱越来越多的涌现，我们经常要用到别人产出的超级高质量的单细胞与自己测的细胞进行比较分析，但是图谱往往具有非常多的细胞数量，正常的计算设备无法带动，以最近发表的Science专刊的单细胞数据为例，动辄便是三四百万的单细胞量级，这个时候我们就需要对数据进行随机采样，以达到我们的计算能力，同时也不会影响我们的分析结果。</p>
<p>以小鼠的单细胞数据为例，The cell type composition of the adult mouse
brain revealed by single cell and spatial
genomics，这篇文章有4388420单核数据，读取下来需要400G+的运行内存，于是需要我们进行下采样，进行后续的分析。</p>
<p>有两种下采样方式，一种是每种细胞类群取N个，另一种是每种细胞类群取百分比，我通常使用百分比取样，是的细胞比例分布不改变。详细代码如下所示。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> anndata <span class="token keyword">as</span> ad

adata <span class="token operator">=</span> ad<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'Macosko_Mouse_Atlas_Single_Nuclei.Use_Backed.h5ad'</span><span class="token punctuation">)</span>

<span class="token comment"># 比例采样</span>
adata_temp <span class="token operator">=</span> adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'ClusterNm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> replace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
adata_temp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Macosko_Mouse_Atlas_Single_Nuclei_percent10.h5ad'</span><span class="token punctuation">)</span>

<span class="token comment"># 固定采样</span>
N <span class="token operator">=</span> <span class="token number">2000</span>
adata_temp <span class="token operator">=</span> adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'ClusterNm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n <span class="token operator">=</span> N<span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> replace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
adata_temp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Macosko_Mouse_Atlas_Single_Nuclei_2000.h5ad'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比例采样最后得到的结果并不一定是全部细胞数量的
10%，往往是有所出入的。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>单细胞</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的 Github</title>
    <url>/2021/246677465.html</url>
    <content><![CDATA[<p>前年的时候，做过一些 <a
href="https://github.com/zEpoch/next-beautify">Hexo Next
主题的美化</a>，后来再上传的时候，就一股脑全部上传上去了，当然也没那么傻，倒是还是删掉了
node_modules 后再上传的，但是却是没有删掉 package.json，后来呢，Github
就经常提醒我有安全问题。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142124146.png"
alt="image-20210719142124146" /></p>
<p>打开一看，好家伙，全都是依赖警报</p>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142440142.png"
alt="image-20210719142440142" /></p>
<p>然后细看一下会发现大都是依赖要进行升级了。</p>
<p><img src= "/%E5%9B%BE%E7%89%87%E6%AD%A3%E5%9C%A8%E5%8A%A0%E8%BD%BD" data-lazy-src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142707537.png" alt="image-20210719142707537" style="zoom:100%;" /></p>
<p>好在 Github
还是很舒服的，可以直接在线更改升级，还有个小机器人帮你升级。美滋滋</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142825189.png"
alt="image-20210719142825189" /></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写好你的科学故事</title>
    <url>/2022/542253658.html</url>
    <content><![CDATA[<h2 id="摘要">摘要</h2>
<p>科学家要想成功，就必须写得好。遵循经典的前言、方法、结果和讨论
(IMRaD)
结构的论文写作存在实质性指导。在这里，作者填补了这个教学经典中的一个关键空白。作者提供有关编写优秀科学故事的指导。这种宝贵但往往难以实现的技能可以增加研究的影响力及其被接受的可能性。科学故事不仅仅是提供信息。这是一个有凝聚力的叙述，通过提出和解决问题来吸引读者，有开头、中间和结尾。为了创建这种叙事结构，作者敦促考虑在研究结束时开始，先写下他们的主要结论，为讨论提供基础，然后倒推：结果→方法→完善讨论→介绍→摘要→
标题。在这篇简短而非正式的社论中，作者为广泛的受众提供指导，从高年级本科生（刚刚进行了他们的第一个研究项目）到高级科学家（他们可能会从重新思考他们的写作方法中受益）。为此，作者提供了具体的说明、示例和关于如何“倒着写”的文献指南，将科学叙事与
IMRaD 结构联系起来。</p>
<h2 id="不发表就出局">不发表就出局</h2>
<p>写作是科学研究的一项基本技能。许多资源提供了关于撰写简洁、高效和令人信服的论文的指导（表
1），这些论文主要基于经典的介绍、方法、结果和讨论 (IMRaD) 结构（图
1A）。对于写作的一般规则，作者建议使用表 1
中提供的资源。在这里，作者关注这些资源中经常被忽视的写作的一个重要方面：撰写科学故事。掌握这项宝贵的技能是写出任何好论文的基础——可以增加你工作的影响力和它被高影响力高水平的期刊接收的可能性
(Turabian 2019)。</p>
表 1 用于构建科学论文的精选来源，按日期/作者呈现，没有偏见。 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208143225.png"
alt="20221208143225" /> 图 1 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208143242.png"
alt="20221208143242" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 1
</figcaption>
<h3 id="科学故事">科学故事</h3>
讲故事是人性的一部分。故事是生活中不可或缺的一部分，从报纸和小说到博客和电影。这是因为故事作为一种有效的交流形式与我们一起发展，包括在科学领域。但是所说的科学故事是什么意思？科学故事不仅仅是提供信息；它是一种使用信息（例如数据）来解决问题的叙述，让读者参与您的观察并了解它们的影响。科学故事有开头、中间和结尾（图
2）。这三个组件可以而且应该映射到典型的 IMRaD 结构（图
1A）。然而，作为编辑，作者看到许多遵循 IMRaD
结构的手稿并没有讲述一个好的科学故事，即使基础数据清楚地展现了一个故事。例如，许多研究在没有任何综合或努力将其置于更广泛的背景下的情况下展示了这些发现。这限制了读者获取知识和理解的能力，从而降低了论文的影响力。在这里，作者提供有关如何讲述您的故事的指导。
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208151559.png"
alt="20221208151559" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 2
</figcaption>
<p>科学故事被视为三个部分，映射到 IMRaD 结构（图 1A）</p>
<hr />
<p>三个结构规则支撑着所有的写作。这些规则可以直接应用于发展你的科学故事：规则
1——考虑你的听众（即科学家）；规则 2——考虑你的地点（即科学期刊）；规则
3——考虑你的目的。科学研究的目的是收集和分析数据以确定潜在的真相，并通过假设检验或大数据集的探索获得理解。有关科学方法发人深省的评论，请参阅
Voit (2019)。Fretwell (1975) 对这一过程提供了哲学见解。</p>
<blockquote>
<p>“科学家对真理、知识、智慧和理解负责。真理就是——所有存在的潜在现实。知识是作者认为作者知道的关于真理的东西。然而，知识始终是一种不完美的评估，并且总是需要修正和改进。认识到知识中存在差异和弱点就是智慧。智慧导致一个过程，称为科学哲学，通过这个过程知识被修改以更好地符合真理……”</p>
</blockquote>
<p>Fretwell (1975)
然后将这一理念扩展到应用科学，这正是本期刊《海洋生命科学与技术》(MLST)
的一个目标。</p>
<blockquote>
<p>“作者可能会认为理解是作者用来充分运用作者的智慧和知识来指导作者的行动的东西。当应用科学家寻求理解时，基础科学家寻求知识。”</p>
</blockquote>
<p>作为科学家，无论如何找到和应用我们的答案，写作顺序通常都应遵循 IMRaD
结构（图
1A）。然而，作者认为，尝试按照这种结构撰写手稿通常会阻碍形成一个好故事（图
2）。相反，作者建议作者应该考虑倒着写。在接下来的部分中，作者将概述这种方法。</p>
<h3 id="倒着写">倒着写？</h3>
<p>向后书写似乎是一个奇怪的概念，但事实并非如此。想一想给你的朋友讲个笑话。了解重点是必不可少的。你建立起来，笑话就成了笑话。当然，妙语的设置也很重要，但如果没有完美的结论，这个笑话就不会成功
(Jodłowiec
1991)。事实上，许多喜剧演员开始写他们的笑话时脑子里都有妙语——或者至少是它的粗略版本——然后精心设计设置（图
3）。换句话说，这个笑话是从妙语中倒过来构造的，即使你不是这样讲的。科学故事也不例外。</p>
图 3 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208153721.png"
alt="20221208153721" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 3
</figcaption>
<p>一个带有背景和妙语的笑话示例，在这个意义上遵循与科学故事相同的结构（图
1）</p>
<hr />
<h2 id="书写科学故事的步骤">书写科学故事的步骤</h2>
<h3 id="第-1-步从哪里开始">第 1 步：从哪里开始？</h3>
<p>步骤 1.1：妙语
那么第一步是什么？这不是写前言、方法或结果——尽管毫无疑问，你会对所有这些部分做了大量的笔记，包括制作能够揭示趋势和建议结果的图形和表格的工作版本。相反，逆向写作的第一步是确定你的主要结论是什么，通常称为科学发现。这些是从对数据的批判性评估中产生的令人兴奋和新颖的想法、趋势和概念。它们是您的读者在阅读您的论文后会记住或“带回家”的信息（图
1B，步骤 1）。科学发现将决定你整个故事的结构，并将导致一个整体总结（图
1C）。这是你的妙语！</p>
<p>你学习的目的应该围绕这些科学发现。几乎可以肯定，它们需要相当长的时间和广泛的思考才能发展。这是您在写作之前进行的研究的智力部分。如果您幸运的话，或者更确切地说，如果您计划周密，那么根据您精心设计的提案，您会预料到要科学发现。然而，往往会出现意想不到的结果——尤其是生物实验——作者必须对它们持开放态度。然后，通过分析您的数据会产生科学发现，您的总体结论将是科学发现的综合（但请阅读下面的说明）。虽然就第一步提供广泛的指导超出了这篇paper的范围（这不可避免地是针对特定研究的），但专栏
1 提供了关于开发科学发现的指导。</p>
<h3 id="专栏-1-编写科学发现">专栏 1 编写科学发现</h3>
<p>这是您学习中富有创意且令人愉快的部分。在这里，您可以获取您辛辛苦苦获得的事实，并将它们塑造成有用且有趣的观点。仅仅告诉读者你发现了什么是不够的。您需要说明它为什么重要以及如何使用它。有效地做到这一点往往是一个真正的挑战。以下是关于如何编写这些科学发现的一些建议。</p>
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208165216.png"
alt="20221208165216" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 4
</figcaption>
<hr />
<h3 id="第-2-步您的依据在哪里">第 2 步：您的依据在哪里？</h3>
<p>下一步是从科学发现和总体结论向后移动，并正式编写结果部分。在这里你应该只提供导致科学发现的信息（即数据和观察），没有无关的信息来分散读者的注意力。坚持你的计划！反复问自己“我需要说明这些发现来支持我的结论吗？”如果答案是“否”，则将该信息保存到另一篇论文，您的文章附件（一个可能添加额外内容的好地方），或者如果您真的不能放弃这些发现，请考虑修改您的科学发现以包含它（即返回步骤
1）。此时，您应该制作最终的图形和表格。<strong>清晰且结构合理的图表可以说明您的主要信息，这对于一个好故事来说是必不可少的。</strong></p>
<h3 id="第3步你是怎么到那里的">第3步：你是怎么到那里的？</h3>
<p>对结果部分感到满意后，再向后移动一步以编写方法部分。您详细的实验笔记将提供本节的基础。此过程允许您仅关注用于生成结果部分中显示的数据的方法。换句话说，您现在可以将大量的方法记录（例如，您的实验书或方法部分的初稿）减少到仅与您当前的结果相关的记录。</p>
<p>许多期刊，包括
MSLT，现在将方法放在手稿的末尾。这并不意味着方法没有什么影响。事实上，整个研究取决于您如何获得结果。如果你的方法——无论是实用的还是分析的——都不充分或不完整，那么结果和讨论都不值得一读；手稿通常仅因方法不佳而被拒绝。事实上，在审阅论文时，如果方法不佳，作者通常甚至不看结果或讨论。因此，请确保本节充分概述了您的结果是如何获得的。</p>
<h3 id="第-4-步将它们组合在一起">第 4 步：将它们组合在一起</h3>
<p>下一步可能是最具挑战性的：确定介绍和讨论之间的平衡。结合起来，这两部分使读者相信您的研究需要完成，并且您的总结信息会产生影响。前言应该简短而切题。然而，有时必须在
Introduction 中预先呈现详细的概念，让读者理解研究的目的，这可以增加
Introduction
的长度。讨论解释了你的主要信息的更广泛背景，因此它可以比你的介绍更长、更具推测性（请参阅表
1 中的来源以获取有关这些部分的进一步指导）。</p>
<p>在这一点上，不要执着于前言中必须包含的内容和讨论中必须包含的内容。当您展开您的故事时，与关键概念相关的大部分文本可能会在介绍和讨论之间来回移动。您可能已经根据您的项目提案起草了一份非常粗略的“工作简介”。如果你有，那么在这一点上，最好把前言的草稿放在一边，专注于写你的讨论。在您的讨论结束后，前言将需要进一步修改，因为作者会继续倒着写。</p>
<h4 id="步骤-4.1-返回科学发现">步骤 4.1 返回科学发现</h4>
<p>到目前为止，您的讨论的结构应该已经完全展开，基于您的目的、您的主要信息、您的总体结论（图
1C）以及您计划呈现这些内容的经过仔细考虑的顺序（图
1C、4）。讨论不应简单地重复结果，也不应包括与以前发现的广泛比较，除非这是您工作的明确目的。这两种方法对读者来说都是无聊和分散注意力的。相反，讨论应该综合您的发现和其他人的发现，探讨总结的影响及其与目的和总体结论的关系（更多指导请参见表
1）。幸运的是，您在步骤 1.2
中制定的顺序已经经过深思熟虑；坚持下去，你就不会失败！</p>
<h4 id="步骤-4.2-要去哪里">步骤 4.2 要去哪里？</h4>
<p>Introduction
应该是最后完成的部分——毕竟，在完成之前很难介绍一个主题；即，直到您完全开发和组织结构。前言介绍了研究的目的（即总体目标和问题，图
1C），这些目的导致科学发现（记住步骤 1.1）。</p>
<p>实现这一目标的最有效方法之一是以一组清晰的问题结束介绍，这些问题反映了您的收获信息。这为故事提供了一个整体的问题解决结构；即，在介绍中提出问题并在讨论中提供解决方案（图
1C、2）。这些要点不一定被表述为“问题”。它们可以是将被评估的“命题”，或者是将被检验的“假设”。不管它们是如何表述的，这些最后的要点将引入将在整个研究中解决的关键问题。</p>
<p>以明确的问题/命题/假设结束前言还有一个额外的好处，因为读者可以批判性地评估方法和结果是否充分解决了研究开始时的问题。鉴于您一直在倒着写（图
1B，步骤
1-4）并有解决方案，问题/命题/假设应该自然而然地出现。例如，对于图 4
中呈现的故事（在提供足够的背景之后），作者可能会以这一段结束前言：</p>
<blockquote>
<p>“因此，这项研究考察了气候变化对 21
世纪饥荒事件的影响。为此，通过作者的文献回顾和Meta分析，作者解决了以下问题：(i)
20 世纪工业在多大程度上增加了 CO2 水平？(ii) CO2
如何改变温室效应和全球变暖？(iii)
变暖是否会对干旱地区产生不成比例的影响？”</p>
</blockquote>
<p>显然，这是一个简单的例子，但它说明了如何从科学发现中得出问题。顺便说一句，在图
1C
之后，如果问题按上述顺序提出，则方法和结果中的子部分应具有平行结构，解决
(i)、(ii) 和
(iii)，在同样的顺序，最后是如何获得总体结论（例如，与气候变化对二十一世纪饥荒的影响有关）。</p>
<h2 id="注意事项">注意事项</h2>
<p>正如作者和其他人所建议的那样，倒着写有一种危险。如果应用不当，这个过程会破坏客观科学探究的基本原则。通过检查数据并确定科学发现，至少部分地忽略了开发初始（先验）预测的想法。相反，在某种程度上，依赖事后（事后）观察和解释。这种事后方法现在是一种公认的、完全合适的科学研究形式。<strong>此外，作者的观点是，所有的科学努力都包含一些主观性，关键是研究是否有能力获得或至少接近真相。</strong>从这个意义上说，作者强调作者在进行第
1 步时需要保持客观；即，在决定总体结论和科学发现时（图 1B，Box 1）。
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208181827.png"
alt="20221208181827" /></p>
<hr />
<p>作者还提醒作者确保前言末尾的问题/命题/假设（步骤
4.2）不会显得过于做作；也就是说，它们应该是笼统的，而不是过于详细以至于它们只反映了研究的具体结果。发展一个好故事是一门艺术。这需要练习和训练。在这里和表
2
中，作者提供了一些基本指导，但作者鼓励作者进一步阅读，以便他们可以编写更细致入微和引人入胜的故事（表
1）。</p>
<p><strong>表 2
撰写科学故事时的一些注意事项。此列表提供了有关如何在构建故事时避免陷阱的指导。其中大部分是常识，作者提出它是为了提醒读者，这篇社论只提供非常有针对性的指导，其中一些可能并不适用于所有作者</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208182024.png"
alt="20221208182024" /></p>
<hr />
<h2 id="收尾工作">收尾工作</h2>
<p>本节就与上述要点相关的一系列问题提供简要评论。如果您希望继续发展您的写作，请将它们视为附加建议，并更广泛地阅读（例如，表
1 中的来源）。</p>
<h3 id="向后写总是最好的吗">向后写总是最好的吗？</h3>
<p>编故事的方式有很多种，就像讲笑话的方式有很多种一样。表 1
中的来源提供了一些替代观点，Lippi（2017 年）和 Yusoff（2018
）的文章提供了更具体的方向。Lippi（2017 ）和 Yusoff（2018
）都提出了类似于作者向后书写的方法，但遵循了略有不同的进展（图
5）。例如，在图 5 中，“数据”和“分析”等同于作者识别科学发现的方向。Lippi
(2017) 和 Yusoff (2018)
也鼓励在讨论之前写前言。如上所述，作者认为这两个部分交织在一起，但如果您有明确的要点，他们的方法可能对某些作者更有效。</p>
<p>此外，与 Lippi (2017)（图
5）相反，作者建议在写标题之前先写摘要（尽管您可能有一个“工作标题”，但最终标题应该是您最后创建的东西（参见“标题注释”和摘要”）。</p>
<p>最后，一些有经验的作者从前言开始——他们认为倒着写是没有必要的。然而，作者希望这些有经验的作者在脑海中倒着写。在开始写作过程之前，他们已经能够构思出整个科学故事。然而，作者大多数人都没有那么聪明！作者鼓励读者检查这些选项以及其他选项，以找到最适合他们的选项。</p>
<p>图 5</p>
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208182137.png"
alt="20221208182137" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 5
</figcaption>
<p>另一种可能的论文写作顺序，主要修改自 Lippi (2017)</p>
<hr />
<h3 id="标题和摘要注释">标题和摘要注释</h3>
<p>在这里，作者继续倒着写，最后的部分是摘要，然后是标题。表 1
中的来源提供了编写简短的描述性标题和内容丰富的摘要的指导（但也请参阅
Plakhotnik
2017）。因为Abstract总是和Title一起出现，所以没有必要在Abstract中重复Title的内容。</p>
<p>作者用来写摘要的一种方法是拆分作者的计算机屏幕（图
6），然后通读作者的手稿，从屏幕下半部分复制每个部分的关键句子，并将它们粘贴在标题下摘要在上半部分。一旦作者将这些句子组合在一起，就可以将它们制作成一个连贯、简短且引人入胜的摘要。显然，如果你遵循这个建议，摘要将是你写作的倒数第二位。必须完善整个研究并且标题将是最后一个——再次向后写！</p>
<p>图6</p>
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/如何写好你的科学故事/20221208182329.png"
alt="20221208182329" />
<figcaption style="text-align: center;line-height: 1.75;color: rgb(136, 136, 136);font-size: 0.8em;">
figure 6
</figcaption>
<p>撰写摘要。作者使用软件（例如
Word®）拆分屏幕并滚动文本，找到摘要中需要的关键点</p>
<hr />
<h3 id="修订和向前阅读">修订和“向前阅读”</h3>
<p>修改的必要性应该是不言而喻的，但往往在匆忙提交时被遗忘。你在讲故事。所有这些都必须组合在一起（图
1、2、4）。为此，在你的论文写完之后——甚至在写作过程中——你应该从头到尾阅读它，看看这个故事是否有效。故事必须流畅，顺序正确，这样读者才能完全理解。换句话说，作者提倡倒着写，但在你这样做之后，然后向前阅读——就像读者会做的那样——并修改你的paper以确保它流畅（图
1C）。</p>
<h3 id="朽木不可雕也粪土不可杇也">朽木不可雕也,粪土不可杇也</h3>
<p>最后一点。仅当您的基础数据可靠时，作者上面的建议才有用。作者在这里提供的指导是为了撰写一项研究，而不是进行一项研究。这些建议不得被误认为是实验设计或数据分析的指导。作者假设您的实验设计是合理的，您的实验是正确进行的，您的分析适合解决您提出的问题，并且您已经得出合乎逻辑的结论性信息。换句话说，作者假设您的学习具有适当水平的学术诚信和学术能力（表
2）。</p>
<p>当试图讲述一个好故事时，违反这些要求可能很诱人。这是个错误。尽管您可能会介绍一个看似有趣的故事，但它只是虚构paper，而不是优秀的科学paper。这种行为的后果可能很严重。如果您被发现，编辑或审稿人很可能不仅会拒绝您的paper，而且您的声誉也会受到损害。不要试图用糟糕的材料编出好故事。</p>
<h2 id="作者最后的说明">作者最后的说明</h2>
<p>作者希望这篇关于倒写的paper能提供有用的指导。如果您发现它有启发性，作者将不胜感激您通过在您的致谢中引用作者的工作来表明这一点，并将该出版物包括在您的参考文献列表中。通过这种方式，其他人也可以看到此文并从中受益。</p>
<p><a href="https://doi.org/10.1007/s42995-021-00120-z">原文地址</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在stomics平台使用spateo圈细胞</title>
    <url>/2023/2333370760.html</url>
    <content><![CDATA[<p><a
href="https://www.stomics.tech/products/BioinfoTools/STOmicsCloud">时空云平台（STOmics
Cloud）</a>是以时空为特色的多组学数据分析平台，可以管理和分析多组学数据。
STOmics
Cloud以项目为核心，用户可快速将数据和工具整合到项目，实现分析过程可追溯，结果可复现，知识可分享，项目可协作，形成项目分析体系。并通过一个用户友好的门户，提供灵活易于使用的无代码标准和高级分析，高分辨率可视化分析，以及个性化的分析服务，任何注册登录的用户可以轻松在平台上访问，分析，使用和共享数据和工具。</p>
<p>总体来说，STOmics
平台是一个很出色的多组学的数据分析平台，但是仍然有一些不足，STOmics
在做数据分析的时候无法连接外部网络，如果说我们需要用到一些外部的模型或是其他资源的时候，则是会遇到十分大的阻碍，尤其是当我们调用
keras
的某些模型的时候，是需要进行联网下载的，那我们就需要对源码进行一些修改。</p>
<p><a href="https://spateo-release.readthedocs.io/en/latest/">Spateo</a>
利用 Stereo-seq 的超高空间分辨率、大视野和高 RNA
捕获灵敏度，通过核染色和基于 RNA
信号的细胞分割实现单细胞分辨率空间转录组学。Spateo
还提供了空间约束聚类的新方法，以识别连续的组织域，空间感知差异分析以揭示空间基因表达热点和模块，以及复杂的配体-受体相互作用。</p>
<p>首先我们需要在 STOmics
上构建镜像，通过测试，以下镜像构建代码是有较为不错的效果，基础镜像选择为<code>Python 3 and R image</code>，也可以采用已经构建好的
spateo_zt
镜像。镜像使用需要在自己的工作目录创建<code>/data/work/.keras/models</code>和<code>/data/work/.cellpose/models</code>文件夹。</p>
<p>stardist需要下载 <a
href="https://github.com/stardist/stardist-models/releases/download/v0.1/python_2D_versatile_fluo.zip">python_2D_versatile_fluo.zip</a>
并且改名为 <code>2D_versatile_fluo.zip</code>，放置于
<code>/data/work/.keras/models/StarDist2D/2D_versatile_fluo/2D_versatile_fluo.zip</code>。cellpose需要下载
<a
href="https://www.cellpose.org/models/nucleitorch_0">nucleitorch_0</a>
和 <a
href="https://www.cellpose.org/models/size_nucleitorch_0.npy">size_nucleitorch_0.npy</a>
放置于 <code>/data/work/.cellpose/models/nucleitorch_0</code>
和<code>/data/work/.cellpose/models/size_nucleitorch_0.npy</code>。deepcell需要下载
<a
href="https://deepcell-data.s3-us-west-1.amazonaws.com/saved-models/NuclearSegmentation-75.tar.gz">NuclearSegmentation-75.tar.gz</a>
并且改名为 <code>NuclearSegmentation.tgz</code>，放置于
<code>/data/work/.keras/models/NuclearSegmentation.tgz</code>
之后便可进行正常的圈细胞。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/software/python/bin/python3.8 -m pip <span class="token function">install</span> --upgrade pip
pip <span class="token function">install</span> scanpy
pip <span class="token function">install</span> spateo-release
pip <span class="token function">install</span> <span class="token assign-left variable">tensorflow</span><span class="token operator">==</span><span class="token number">2.12</span>.0
pip <span class="token function">install</span> stardist
pip <span class="token function">install</span> cellpose
pip <span class="token function">install</span> DeepCell
<span class="token function">sed</span> -i <span class="token string">'214a \ \ \ \ cache_dir="/data/work/.keras"'</span> /opt/software/python/lib/python3.8/site-packages/keras/utils/data_utils.py
<span class="token function">sed</span> -i <span class="token string">'221a \ \ \ \ datadir_base="/data/work/.keras"'</span> /opt/software/python/lib/python3.8/site-packages/keras/utils/data_utils.py
<span class="token function">sed</span> -i <span class="token string">'17a MODEL_DIR = pathlib.Path("/data/work/.cellpose/models")'</span> /opt/software/python/lib/python3.8/site-packages/cellpose/models.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>构建镜像完成之后便是可以使用空间组芯片数据gem和空间组拍照数据tif进行圈细胞。我写的代码如下所示</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cellbin_spateo</span><span class="token punctuation">(</span>gem_path<span class="token punctuation">,</span> ssDNA_path<span class="token punctuation">,</span> save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    adata <span class="token operator">=</span> st<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_bgi_agg<span class="token punctuation">(</span>
        gem_path<span class="token punctuation">,</span> ssDNA_path<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    
    name <span class="token operator">=</span> gem_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    
    <span class="token comment">## stain mask</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>mask_nuclei_from_stain<span class="token punctuation">(</span>adata<span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain_mask'</span><span class="token punctuation">,</span> save_show_or_return <span class="token operator">=</span> <span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'01.stain_mask_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">## watershed_labels</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>find_peaks_from_mask<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>watershed<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> out_layer<span class="token operator">=</span><span class="token string">'watershed_labels'</span><span class="token punctuation">)</span>
    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'return'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'watershed_labels'</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'02.watershed_labels_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">## stardist_labels</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>stardist<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> tilesize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> equalize<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">,</span> out_layer<span class="token operator">=</span><span class="token string">'stardist_labels'</span><span class="token punctuation">)</span>
    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'return'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stardist_labels'</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'03.stardist_labels_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">## augmented_labels</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>augment_labels<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'watershed_labels'</span><span class="token punctuation">,</span> <span class="token string">'stardist_labels'</span><span class="token punctuation">,</span> out_layer<span class="token operator">=</span><span class="token string">'augmented_labels'</span><span class="token punctuation">)</span>
    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'return'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'augmented_labels'</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'04.augmented_labels_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">##</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>mask_cells_from_stain<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> out_layer<span class="token operator">=</span><span class="token string">'stain_cell_mask'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>watershed<span class="token punctuation">(</span>
        adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span>
        mask_layer<span class="token operator">=</span><span class="token string">'stain_cell_mask'</span><span class="token punctuation">,</span>
        markers_layer<span class="token operator">=</span><span class="token string">'augmented_labels'</span><span class="token punctuation">,</span>
        out_layer<span class="token operator">=</span><span class="token string">'cell_labels'</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    
    <span class="token comment">## </span>
    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'return'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'cell_labels'</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'05.cell_labels_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">## expand_labels</span>
    st<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>expand_labels<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'augmented_labels'</span><span class="token punctuation">,</span> distance<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> max_area<span class="token operator">=</span><span class="token number">1600</span><span class="token punctuation">)</span>
    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'stain'</span><span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'return'</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>pl<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>adata<span class="token punctuation">,</span> <span class="token string">'augmented_labels_expanded'</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> save_show_or_return<span class="token operator">=</span><span class="token string">'save'</span><span class="token punctuation">,</span> save_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'path'</span><span class="token punctuation">:</span>save_path <span class="token operator">+</span> <span class="token string">'06.augmented_labels_expanded_'</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">## label adata</span>
    adata<span class="token punctuation">.</span>write<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">'07.labeled_adata_'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'.h5ad'</span><span class="token punctuation">)</span>
    
    <span class="token comment">## final adata</span>
    cell_adata <span class="token operator">=</span> st<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_bgi<span class="token punctuation">(</span>
        gem_path<span class="token punctuation">,</span>
        segmentation_adata<span class="token operator">=</span>adata<span class="token punctuation">,</span>
        labels_layer<span class="token operator">=</span><span class="token string">'augmented_labels_expanded'</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    cell_adata<span class="token punctuation">.</span>write<span class="token punctuation">(</span>save_path <span class="token operator">+</span> <span class="token string">'08.final_adata_'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'.h5ad'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用上述代码则可以正常在 STOmics
平台上进行圈细胞。获得单细胞分辨率的空间组的数据。需要注意的是我们的拍照的
tif 数据是需要和 gem
数据的空间位置对应上的。那么应该如何对应呢？这里使用师兄 liaokuo
的代码，生成由 gem 文件生成的灰度图，将灰度图放置于 PhotoShop
中作为底图，然后将 tif
图与灰度图手动配准（因为自动配准效果不好），导出以
灰度图大小画布为底的、调整过的 tif
图片，然后将此图片拿去与gem文件做圈细胞。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># author: liaokuo</span>
<span class="token comment"># time: 2022/4/1</span>

<span class="token comment"># this is to generate grey graphic from spatial RNA.</span>
<span class="token comment"># create_greyplot.py input_file_path out_put_directory</span>

<span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
inpath<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
outpath<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>outpath<span class="token punctuation">)</span> <span class="token comment"># change the working directory</span>
<span class="token builtin">file</span><span class="token operator">=</span>inpath<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
name<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">mRNA_image_load</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> gray_factor<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cbs <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>comment<span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token comment"># therefore, the input file must be a clear txt or csv file.</span>
    cbs<span class="token punctuation">[</span><span class="token string">'coor'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cbs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> cbs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
    cbs2 <span class="token operator">=</span> cbs<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'coor'</span><span class="token punctuation">,</span> <span class="token string">'UMICount'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">'UMICount'</span> <span class="token keyword">in</span> cbs<span class="token punctuation">.</span>columns <span class="token keyword">else</span> cbs<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'coor'</span><span class="token punctuation">,</span> <span class="token string">'MIDCount'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># there must be careful.</span>
    cbs2 <span class="token operator">=</span> cbs2<span class="token punctuation">[</span><span class="token string">'coor'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cbs2<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cbs2<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    cbs2<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cbs2<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token comment">#cbs2['x'] -= cbs2['x'].min()</span>
    <span class="token comment">#cbs2['y'] -= cbs2['y'].min()</span>
    h <span class="token operator">=</span> cbs2<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    w <span class="token operator">=</span> cbs2<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    mtx <span class="token operator">=</span> cbs2<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token string">'coor'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> mtx<span class="token punctuation">.</span>index<span class="token punctuation">:</span>
            mtx<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> j <span class="token keyword">not</span> <span class="token keyword">in</span> mtx<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
            mtx<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    mtx <span class="token operator">=</span> mtx<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    mtx <span class="token operator">=</span> mtx <span class="token operator">*</span> gray_factor
    mtx<span class="token punctuation">[</span>mtx<span class="token operator">></span><span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>
    mtx <span class="token operator">=</span> mtx<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>values
    <span class="token keyword">return</span> mtx




<span class="token comment"># get the grey scale matrix</span>
mtx<span class="token operator">=</span>mRNA_image_load<span class="token punctuation">(</span>path<span class="token operator">=</span>inpath<span class="token punctuation">)</span>
data<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>mtx<span class="token punctuation">)</span>
data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"_grey.csv"</span><span class="token punctuation">)</span>


<span class="token comment"># draw grep scale plot in format of png</span>
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># image object should be an array in 0-255</span>
im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token comment"># L means grey scale, while RGB means color scale</span>
im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"_grey.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>spatial transcriptomics</category>
      </categories>
      <tags>
        <tag>spatial transcriptomics</tag>
        <tag>spateo</tag>
      </tags>
  </entry>
  <entry>
    <title>愿河南平安</title>
    <url>/2021/3942837084.html</url>
    <content><![CDATA[<p>一直在看着新闻，镜头前的消防战士来往没停过，拖着橡皮艇从南边的地铁站和商场将人员运到较为安全的区域，其中还有不少一两岁的孩子。刚刚记者突然间就断线了，心就突然揪住了，就挺伤心的，莫名的哭了起来</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fa1321ca1c578d58bcf290cd9237e6b1_720w.jpg"
alt="愿河南平安v2-fa1321ca1c578d58bcf290cd9237e6b1_720w" /></p>
<span id="more"></span>
<p>切到了高架路的设备采像</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-c376cf38bfa6935f54a3e66a5236dc78_720w.jpg"
alt="愿河南平安v2-c376cf38bfa6935f54a3e66a5236dc78_720w" /></p>
<p>就逐渐看到路面上开始逐渐有车辆的走动，采像机前的雨滴逐渐减小</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-3c666b6f469019e7b091bdfdc75bc55b_720w.jpg"
alt="愿河南平安v2-3c666b6f469019e7b091bdfdc75bc55b_720w" /></p>
<p>约摸二三十分钟后，记者重新连线了，但是却还是一片黑暗，缺少灯光</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fb1ae0008a50819d823dfc040188f2ad_720w.jpg"
alt="愿河南平安v2-fb1ae0008a50819d823dfc040188f2ad_720w" /></p>
<p>之后记者也是在黑暗里摸索着找到了较为光亮地方，肉眼可见的雨在逐渐减小</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-bb65d10bd07ed67da95dde420c9d2d8e_720w.jpg"
alt="愿河南平安v2-bb65d10bd07ed67da95dde420c9d2d8e_720w" /></p>
<p>现在记者可以前往之前待救援的南边地区，已经是开始好转起来了；继续向南走还是有很长的一段没有灯光的路，后来开始看到了一家开着的店</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-c8d84a77447826b14a1699e990b0c072_720w.jpg"
alt="愿河南平安v2-c8d84a77447826b14a1699e990b0c072_720w" /></p>
<p>，店里还是很多的人在这边作为一个休息区，店主提供了热水充电宝之类的；店门口的是位广东的同志，来河南旅游，算是碰上了前所未遇的一个特大暴雨；</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-9c577ac3d2f4726408d86b0fd7b8a7da_720w.jpg"
alt="愿河南平安v2-9c577ac3d2f4726408d86b0fd7b8a7da_720w" /></p>
<p>店主也是很勇敢的人，公司可以让直接关门下班了，但是店主很有社会责任感，坚持开门，通宵收容不能回家的人，真的很感动；</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-30942b423eda147cd3b4e8420e210aaa_720w.jpg"
alt="愿河南平安v2-30942b423eda147cd3b4e8420e210aaa_720w" /></p>
<p>采访完毕后记者继续想南边的黑暗处走去，雨又开始大了起来，愿一切平安，众志成城，共克时艰</p>
<p>继续向前走是碰到了一连串的车队，其实是不能向前走了，前面被淹了</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fe0962dc416428b9610ec0044545dafa_720w.jpg"
alt="愿河南平安v2-fe0962dc416428b9610ec0044545dafa_720w" /></p>
<p>再往前有一辆公交车，车上有很多人在休息</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-ea205c6ed312e1567a37c0a71014ff46_720w.jpg"
alt="愿河南平安v2-ea205c6ed312e1567a37c0a71014ff46_720w" /></p>
<p>说着说着，来了一个出租车师傅，这位师傅看到了直播，敲开了自己家楼下没有开门的店，买了全部的食物和水，跟着直播走的路，送来了食物和矿泉水，还特地带来了热水</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-0ba2b6fb175867cd6a50d23a156746f2_720w.jpg"
alt="师傅送来了食物和水" /></p>
<p>好心的出租车师傅不愿意透露姓名，但是记者特地拍了车牌号，感谢好心的出租车师傅，不仅送来了吃的，还送了充电器充电线</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-a91d255d691911ce371f1da60887a1fe_720wlas.jpg"
alt="司机师傅的车牌号" /></p>
<p>愿一切平安。</p>
]]></content>
      <tags>
        <tag>家乡</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将rds转为h5ad</title>
    <url>/2023/3539500839.html</url>
    <content><![CDATA[<p>在进行单细胞或是空间组数据分析的时候，有的人喜欢使用 R
语言进行分析，有的同学喜欢使用 Python
进行分析，但是两个语言分析所使用的文件有所不同，R 语言通常保存的为 rds
文件，Python 通常保存的为 h5ad
文件，如果是多人合作分析的时候，往往需要将文件进行格式转换，这通常是一件较为麻烦的事情，看到过有使用
SeuratDisk 和 SeuratData 等 R 语言包进行转换的程序，但是由于本人 R
语言环境等等的问题，总是无法安装，故想了一个新的方法来进行格式转换，教程如下。</p>
<p>首先是将 rds 文件中的信息提取出来。</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">library(Seurat)
# 读取 rds 文件信息
rds_file &#x3D; readRDS(&quot;rds_file.rds&quot;)
rds_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>An object of class Seurat<br> 38153 features across 9567 samples
within 2 assays<br> Active assay: Spatial (19082 features, 0 variable
features)<br> 1 other assay present: SCT<br> 2 dimensional reductions
calculated: pca, umap<br> 1 image present: slice1<br></p>
</blockquote>
<p>可以看到，我现在用的是 SCT matrix，所以可以进行读取，保存为 csv
格式，包括元数据等等</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">write.csv(rds_file@meta.data, &#39;rds_file@meta.data.csv&#39;)
write.csv(rds_file@assays$Spatial@data, &#39;rds_file@assays$Spatial@data.csv&#39;)
write.csv(rds_file@assays$SCT@data, &#39;rds_file@assays$SCT@data.csv&#39;)
write.csv(rds_file@assays$SCT@data, &#39;rds_file@assays$SCT@data.csv&#39;)
write.csv(rownames(rds_file),&#39;rownames(rds_file).csv&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么便是得到的 rds 元数据的所有数据了，接下来需要进行读取，使用
anndata 进行读取</p>
<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import matplotlib.patches as mpatches
import scanpy as sc
import pandas as pd
import numpy as np
from anndata import AnnData
import torch
from scipy.sparse import csr_matrix

adata_X &#x3D; pd.read_csv(&quot;rds_file@assays$Spatial@data.csv&quot;,index_col&#x3D;0)
adata_X &#x3D; adata_X.transpose()
adata_X &#x3D; csr_matrix(adata_X)
adata_obs &#x3D; pd.read_csv(&quot;rds_file.data.csv&quot;,index_col&#x3D;0)
adata_var &#x3D; pd.read_csv(&quot;rownames(rds_file).csv&quot;,index_col&#x3D;0)
adata_var &#x3D; pd.DataFrame(index &#x3D; [i for i in adata_var[&#39;x&#39;]])
adata &#x3D; sc.AnnData(X &#x3D; adata_X, obs&#x3D;adata_obs, var &#x3D; adata_var)
adata.write(&#39;result.h5ad&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么便是得到了保存了所有 rds 数据的 h5ad 文件。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Seurat</tag>
        <tag>Scanpy</tag>
      </tags>
  </entry>
  <entry>
    <title>我们把你们想得太好了</title>
    <url>/2021/1333461694.html</url>
    <content><![CDATA[<p>“我们把你们想的太好了，我们认为你们会遵守基本的外交礼节”，有些话，原封不动，换个国家名，他居然还能用</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%88%91%E4%BB%AC%E6%8A%8A%E4%BD%A0%E4%BB%AC%E6%83%B3%E5%BE%97%E5%A4%AA%E5%A5%BD%E4%BA%86/%E6%88%91%E4%BB%AC%E6%8A%8A%E4%BD%A0%E4%BB%AC%E6%83%B3%E7%9A%84%E5%A4%AA%E5%A5%BD%E4%BA%86.png"
alt="我们把你们想的太好了" /></p>
]]></content>
      <tags>
        <tag>东京奥运会</tag>
      </tags>
  </entry>
  <entry>
    <title>我的星座分析</title>
    <url>/2021/1421664595.html</url>
    <content><![CDATA[<p>你对自己的认知其实没别人说那么的感性，因为自己干很多事情都有目的性，所以你潜意识认为一切的感性都是建立在理性的基础之上的，但其实并没有这么简单，你潜意识里的理性，其实也是建立在更深的一层感性的基础上，也就是第三层，一般你对自己的了解只停留在第一层，也就是认为自己是一个超级感性的人。</p>
<p>比如，你见了一个很好看的人，非常心动，一会儿的时间就脑补了和他的一生，然后自己沉浸在自己的世界里感性，这是第一层的感性。</p>
<p>随后就开始在现实中去根据自己刚刚幻想完后的余温再去想要做什么，要让自己变成什么样来去达到自己之前幻想的一个目的，这个过程就是你对自己理性方面的认知，虽然自己会代入真感情到里面去，但有的你会以对自己的了解然后明确这是一份站在理性基础上的一份感性，也就是第二层。</p>
<p><span id="more"></span></p>
<p>而其实你如果认为自己很聪明的话，对自己的认知停留在第二层的话，其实就是容易会对除了自己有目的性的人以外的人，造成不好的印象，也就是你会针对自己的目的，明确的去让一个人走进他五彩缤纷的情感世界，而所用的方式，在其他人眼里是不喜欢的，也就是好多人说你作什么的，而一个有理性基础的人，如果感性的话，也多多少少会照顾一下其他人的想法。</p>
<p>但你不会，是因为你已经想到了这点，所以进行了一种选择，就是不理会。这也就是你思想世界的第三层，就是我以我的感性来决定理性的选择，然后再在这个理性的选择上去感性，你以为我不知道我这样会引来厌恶？怎么可能，你是十二星座的终点，思想境界的顶流，只是你把所有精力都用在了刀刃上，这样才更有助于达成目的，不去在意别人的感受就是因为自己太懂，自己懂自己没办法照顾所有人的感受，自己没空照顾，自己也不喜欢照顾，自己也不必照顾，说就说呗，我就觉得说我的人挺low的，我会无语不过我的感情永远清澈透明。</p>
<p>你思想的第三层就是在自己喜欢的想法上，感性的情绪中，建立的一种选择，所以你就会做很多别人想做却不敢做的事情，这点客观来说其实已经吸引了所有人（除了被受影响的人）不过客观来说，就算是保守派，看到你这类太过于厉害的狠角色也会有敬意吧（除了戾气重的人）</p>
<p>你要的只有功成名就，自己可以舍弃的东西太多了，只要自己喜欢，就可以无底线无理由的去追求，你是个聪明人，却还是选择了这样的一条路，选择了一条充满浪漫气氛的独木桥。</p>
<p>你的心，敏感又强大、坚定又脆弱，这是两种心态，又融为一颗心，你的内心就是会互相追逐，互相打气，在一片小小天地中就能看到一个丰富的浪漫世界</p>
]]></content>
  </entry>
  <entry>
    <title>战争的目的在于消灭战争</title>
    <url>/2021/3536968392.html</url>
    <content><![CDATA[<p>今日读毛选，读到了中国革命战争的战略问题。我觉得毛泽东真的是一位军事奇才，他对战争的规律总结得十分到位，这是一套方法论，不管用到何处都能经过一定程度的变化，从而发挥作用的方法。</p>
<span id="more"></span>
<blockquote>
<p>战争的规律——这是任何指导战争的人不能不研究和不能不解决的问题。
革命战争的规律——这是任何指导革命战争的人不能不研究和不能不解决的问题。
中国革命战争的规律——这是任何指导中国革命战争的人不能不研究和不能不解决的问题。</p>
<p>我们现在是从事战争，我们的战争是革命战争，我们的革命战争是在中国这个半殖民地的半封建的国度里进行的。因此，我们不但要研究一般战争的规律，还要研究特殊的革命战争的规律，还要研究更加特殊的中国革命战争的规律。</p>
<p>大家明白，不论做什么事，不懂得那件事的情形，它的性质，它和它以外的事情的关联，就不知道那件事的规律，就不知道如何去做，就不能做好那件事。</p>
<p>战争——从有私有财产和有阶级以来就开始了的、用以解决阶级和阶级、民族和民族、国家和国家、政治集团和政治集团之间、在一定发展阶段上的矛盾的一种最高的斗争形式。不懂得它的情形，它的性质，它和它以外事情的关联，就不知道战争的规律，就不知道如何指导战争，就不能打胜仗。</p>
<p>革命战争——革命的阶级战争和革命的民族战争，在一般战争的情形和性质之外，有它的特殊的情形和性质。因此，在一般的战争规律之外，有它的一些特殊的规律。不懂得这些特殊的情形和性质，不懂得它的特殊的规律，就不能指导革命战争，就不能在革命战争中打胜仗。</p>
<p>中国革命战争——不论是国内战争或民族战争，是在中国的特殊环境之内进行的，比较一般的战争，一般的革命战争，又有它的特殊的情形和特殊的性质。因此，在一般战争和一般革命战争的规律之外，又有它的一些特殊的规律。如果不懂得这些，就不能在中国革命战争中打胜仗。</p>
</blockquote>
<p>他没有专注于一般战争的经验，而是吸取各个战争的关键因素，对于中国革命战争，他没有照搬照用其他民族、国家的那一套老一套，或者是说别人特有的战争形式；但是也不是完全不用，而是学习适合自己战争的因素，尊重过去流血的经验，但是还应该尊重自己流血的经验。不仅学习俄国的革命经验，也要了解苏联内战和苏联红军的特殊性；学习北伐战争的经验，但是要了解到当时的战争的情况已发生了变化。由此看来，战争情况的不同，决定着不同的战争指导规律，有时间、地域和性质的差别。从时间的条件说，战争和战争指导规律都是发展的，各个历史阶段有各个历史阶段的特点，因而战争规律也各有其特点，不能呆板地移用于不同的阶段。</p>
<p>关于战争的目的，我觉得毛泽东写的这个是最符合马克思主义的</p>
<blockquote>
<p>战争——这个人类互相残杀的怪物，人类社会的发展终久要把它消灭的，而且就在不远的将来会要把它消灭的。但是消灭它的方法只有一个，就是用战争反对战争，用革命战争反对反革命战争，用民族革命战争反对民族反革命战争，用阶级革命战争反对阶级反革命战争。历史上的战争，只有正义的和非正义的两类。我们是拥护正义战争反对非正义战争的。一切反革命战争都是非正义的，一切革命战争都是正义的。人类的战争生活时代将要由我们之手而结束，我们所进行的战争，毫无疑义地是属于最后战争的一部分。但是我们所面临的战争，毫无疑义又是最大的和最残酷的战争的一部分。最大的和最残酷的非正义的反革命的战争，迫临在我们的头上，我们如果不打起正义战争的旗帜，人类的大多数就要遭受摧残。人类正义战争的旗帜是拯救人类的旗帜，中国正义战争的旗帜是拯救中国的旗帜。人类的大多数和中国人的大多数所举行的战争，毫无疑义地是正义的战争，是拯救人类拯救中国的至高无上的荣誉的事业，是把全世界历史转到新时代的桥梁。人类社会进步到消灭了阶级，消灭了国家，到了那时，什么战争也没有了，反革命战争没有了，革命战争也没有了，非正义战争没有了，正义战争也没有了，这就是人类的永久和平的时代。我们研究革命战争的规律，出发于我们要求消灭一切战争的志愿，这是区别我们共产党人和一切剥削阶级的界线。</p>
</blockquote>
]]></content>
      <tags>
        <tag>毛选</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Promise</title>
    <url>/2022/2502972644.html</url>
    <content><![CDATA[<h2 id="初始结构">初始结构</h2>
<p>我们在 <code>New</code> 一个 <code>Promise</code>
里的时候肯定是需要传入参数的，不然这个实例用处不大，而这个参数我们知道是一个函数，而且当我们传入这个函数参数的时候，这个函数参数会被自动执行。
因此我们需要在类的 <code>constructor</code> 里面添加一个参数，这里就用
<code>func</code>
来作为形参，并且执行一下这个参数，接下来需要为这个函数参数传入他自己的参数，也就是
<code>resolve</code> 和 <code>reject</code>，原生的 Promise 里面可以传入
<code>resolve</code>，<code>reject</code>
两个参数，那么我们也得允许手写这边可以传入这两个参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">func</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>但是这样写明显有问题，因为手写这边不知道在哪里调用
<code>resolve</code> 和 <code>reject</code> 这两个参数，毕竟
<code>resolve</code> 和 <code>reject</code>
还没有定义。因此，就需要创造出这两个对象，有一点我们要知道的是，<code>resolve</code>、<code>reject</code>
也是以函数的形式来执行的，我们在原生 <code>Promise</code> 里也是在
<code>resolve</code> 或者 <code>reject</code>
后面加个括号来执行的，因此我们可以用类方法的形式，来创建这两个函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么这里的 <code>resolve</code>，<code>reject</code>
方法应该如何执行呢？里面应该写什么内容呢。这就需要用到状态了。
Promise有三种状态，分别是 <code>pending</code>，<code>fulfilled</code>
和 <code>rejected</code>。初始的时候是
<code>pending</code>，<code>pending</code> 可以转为
<code>fulfilled</code> 状态，但是不能逆转，<code>pending</code>
也可以转为 <code>rejected</code>
状态，但是也不能逆转。<code>fulfilled</code> 和 <code>rejected</code>
之间也不能互转</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129134733.png"
alt="20220129134733" /></p>
<p>因此，需要提前先把这些状态定义好，可以用const来创建外部的固定变量，但是这里为了统一，就用
<code>static</code>
来创建静态属性，创建了状态属性以后，还需要为每一个实例添加一个状态属性，这里就用
<code>this.status</code>，这个状态属性默认就是<code>待定状态</code>。这样在每一个实例被创建以后，就会有自身的状态属性可以进行判断和变动了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么在执行 <code>resolve</code>
的时候，就需要判断状态是否为待定，如果是待定的话，就把状态改为成功；同样的道理，在执行
<code>reject</code>
时候，就需要判断状态是否为待定，如果是待定的话，就把状态改为拒绝。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再回忆一下原生 <code>Promise</code>，在执行 <code>resolve</code> 或者
<code>reject</code>
的时候，都是可以传入一个参数，这样我们后面就可以使用这个参数了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> Promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们可以把这个结果参数命名为
<code>result</code>，不管是成功还是拒绝的结果，两者选其一我们让每个实例都有
<code>result</code> 属性，并且给他们都负值 <code>null</code>，这里给空值
<code>null</code> 是因为执行 resolve 或者 reject
的时候会给结果赋值，接着我们就可以给 <code>resolve</code>
添加参数，并且把参数负值给实例的 <code>result</code> 属性，为
<code>reject</code>添加参数，并且为参数负值给实例resort属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129172325.png"
alt="20220129172325" /></p>
<h2 id="this-指向">this 指向</h2>
<p>但是此时却出现了一些问题，但是从报错的信息里面我们貌似发现不了有什么错误，因为
<code>status</code> 属性我们已经创建了，不应该是
<code>undefined</code>，但我们仔细看看 <code>status</code>，前面是有
<code>this</code> 关键字的，那么只有一种可能，要用
<code>this.status</code> 的时候并没有调用 <code>constructor</code> 里的
<code>this.status</code>，也就是这里的 <code>this</code>
已经跟丢了。我们在 <code>new</code> 一个新实例的时候，执行的是
<code>constructor</code> 里的内容，也就是 <code>constructor</code> 里的
<code>this</code>
确实是新实例的，但现在我们是在新实例被创建后，再在外部环境下执行
<code>resolve</code> 方法的，这里的 <code>resolve</code>
看着像是和实例一起执行的，其实不然，也就相当于不在 <code>class</code>
内部使用这个 <code>this</code>，而我们。没有在外部定义任何
<code>status</code> 变量，因此这里会报错。解决 <code>class</code> 的
<code>this</code>
指向问题，一般会用<code>箭头函数</code>，<code>bind</code>或者
<code>proxy</code>，在这里我们就可以使用 <code>bind</code> 来绑定
<code>this</code>。只需要在 <code>this.resolve</code> 和
<code>this.reject</code> 后加上
<code>bind(this)</code>，刷新之后便不报错了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129172340.png"
alt="20220129172340" /></p>
<p>对 <code>resolve</code> 来说，这里就是给实例的 <code>resolve</code>
方法，绑定这个 <code>this</code> 为当前实例对象，并且执行
<code>this.resolve</code> 方法；对于 <code>reject</code>
来说，这里就是给实例的 <code>reject</code> 方法绑定这个
<code>this</code> 为当前的实例对象，并且执行 <code>this.reject</code>
方法。</p>
<h2 id="then">then</h2>
<p>原生的 <code>then</code> 方法，<code>then</code>
方法可以传入两个参数，这两个参数都是函数，一个是当状态为成功时执行的代码，另一个是当状态为拒绝时执行的代码</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此我们就可以先给手写的店里面添加两个参数。一个是
<code>onFULFILLED</code>，表示状态为成功时，另一个是
<code>onREJECTED</code>，表示状态为拒绝时，这里我们先看看原生
<code>Promise</code> 产生的结果。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129205912.png"
alt="20220129205912" /></p>
<p>可以看到控制台只显示了一个 <code>console</code>
的结果。证明只会执行成功状态或者拒绝状态其中一个，因此我们在手写的时候就必须进行判断。如果当前实力的stands状态属性为成功的话，我们就执行传进来的
<code>onFULFILLED</code> 函数，并且为 <code>onFULFILLED</code>
函数传入前面保留的 <code>result</code> 属性值，如果当前实例的
<code>status</code>
状态属性为拒绝的话。我们就执行传进来的<code>onREJECTED</code>
函数，并且为 <code>onREJECTED</code> 函数传入前面保留的
<code>result</code> 属性值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>定义好了判断条件以后，我们就来测试一下代码。也是一样，在实例上使用
<code>then</code>
方法，我们来看看控制台，会发现这里并没有报错，也就是暂时安全了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129210813.png"
alt="20220129210813" /></p>
<p>为什么说暂时安全了呢？手写 <code>Promise</code>
的时候，有一个难点，就在于有很多地方需要和原生一样严谨。也就是说，原生的
<code>Promise</code>
会考虑很多特殊情况，我们在实际运用时可能暂时不会碰到这些情况，可是当我们遇到的时候，却不知底层的原理，这就是为什么我们要知道如何手写
<code>Promise</code>。</p>
<h2 id="执行异常">执行异常</h2>
<p>如果在 <code>new Promise</code>
的时候。执行函数里面我们抛出错误，是会触发<code>拒绝</code>方法，也就是在原生的
<code>promise</code> 里面调用 <code>then</code>
方法时可以把错误的信息作文内容输出出来</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129211639.png"
alt="20220129211639" /></p>
<p>但是如果我们在手写这边写上同样道理的代码，很多人会忽略这个细节，我们看看控制台。这个时候就是报错了，而且没有把内容输出出来。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129211754.png"
alt="20220129211754" /></p>
<p>于是我们就可以在执行 <code>resolve</code> 和 <code>reject</code>
之前进行判断，可以用 <code>try</code> 和 <code>catch</code> 在
<code>constructor</code>
里面完善代码，当生成实力的时候判断是否有报错，如果没有报错的话就按照正常执行
<code>resolve</code> 和 <code>reject</code>
方法，如果报错的话，就把错误信息传入给 <code>reject</code>
方法，并且直接执行 <code>reject</code> 方法。注意，这里不需要给
<code>reject</code> 方法进行 <code>this</code>
的绑定了，因为这里是直接执行而不是创建实例后再执行。现在我们再刷新一下控制台，就能看出手写这边没有报错了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129212346.png"
alt="20220129212346" /></p>
<p>原生 <code>Promise</code> 里规定 <code>then</code>
里面的两个参数，如果不是函数的话就要被忽略,所以需要把不是函数的参数改为函数，这里我们就可以用条件运算符，我们在进行if判断之前。进行预先判断，如果
<code>onFULFILLED</code> 参数是一个函数，就把原来的
<code>onFULFILLED</code> 的内容重新复制给他，如果
<code>onFULFILLED</code> 参数不是一个函数，就把它改为空函数，如果
<code>onREJECTED</code> 参数。是一个函数，就把原来的
<code>onREJECTED</code> 的内容重新复制给他，如果 <code>onREJECTED</code>
参数不是一个函数。就把它改为空函数，现在我们再来查看一下控制台的时候，就没有发现报错了。</p>
<h2 id="异步">异步</h2>
<p>在手写代码里面。依旧没有植入异步功能，毕竟最基本的
<code>setTimeout</code> 我们都没有使用，但是我们必须先了解一下原生
<code>Promise</code> 的一些运行顺序规则。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129214909.png"
alt="20220129214909" /></p>
<p>我们配合这段原生 <code>Promise</code>
代码结合控制台一起看看，首先执行第一步，接着创建 <code>promise</code>
实例并且输出第二步，因为这里依旧是同步，接着碰到 <code>resolve</code>
的时候，修改结果，值到了 <code>promise.then</code>
会进行异步操作，也就是我们需要先把执行栈的内容清空，于是就执行第三步，接着才会执行
<code>promise.then</code>
里面的内容，也就是最后输出<code>zepoch</code>。
我们用同样的测试代码应用在手写代码上面，也就是在手写代码写上步骤的信息，然后node运行</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129215225.png"
alt="20220129215225" /></p>
<p>这次我们发现有些不同了，第一第二步都没有问题，问题就是<code>zepoch</code>和第三步，这里的顺序不对。其实问题很简单，就是我们刚刚说的没有设置异步执行，所以直接给
<code>then</code> 方法里面添加 <code>setTimeout</code>
就可以了，我们需要在进行if判断以后再添加
<code>setTimeout</code>，要不然状态不符合添加异步也是没有意义的，然后在
<code>setTimeout</code> 里执行传入的函数参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们看看控制台。这次的顺序就比较顺眼了</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129215855.png"
alt="20220129215855" /></p>
<p>不过异步的问题真的解决了吗？现在又要进入 <code>Promise</code>
另一个难点了，我们来给原生的 <code>Promise</code> 里添加
<code>setTimeout</code>，使得 <code>resolve</code>
也进行异步执行，那么就会出现一个问题了，<code>resolve</code>
是异步的，<code>then</code>也是异步的，究竟谁会先被调用呢？</p>
<p>我们看看控制台，步骤是按照我标注的正常顺序来的。特别要注意的是，当遇到
<code>setTimeout</code> 的时候被异步执行了，而
<code>resolve('zepoch')</code>没有被马上执行，而是先执行第四步，等到
<code>then</code> 的时候再执行 <code>resolve</code> 里保存的值。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129220439.png"
alt="20220129220439" /></p>
<p>我们用同样的代码应用到手写的部分，先来看看控制台。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129220904.png"
alt="20220129220904" /></p>
<p>可以发现<code>zepoch</code>并没有输出，我们可以。先猜测一下没有输出的原因，很可能是因为
<code>then</code> 方法没有被执行，看看 <code>then</code>
方法里面是根据条件判断来执行代码的，也就是说。很可能没有符合的条件，再换句话说，可能没有符合的状态，那么我们就在三个位置分别输出当前的状态，这样分别来判断哪个位置出了问题。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129221345.png"
alt="20220129221345" /></p>
<p>现在在看看控制台，发现。只有两组状态被输出，这两组都在第四步前被输出了。证明
<code>setTimeout</code> 里面的状态都被输出了，只有 <code>then</code>
里面的状态没有被输出，那基本就能确定是因为 <code>then</code>
里面的状态判断出了问题。
执行第一，第二，第三步的时候，就要开始处理异步了。这里肯定是因为先执行了
<code>then</code>
方法又发现这个时候状态依旧是待定，而我们手写部分没有定义待定状态的时候应该做什么，因此。就少了
<code>zepoch</code> 这句话的输出了，所以我们就直接给 <code>then</code>
方法里面添加待定状态的情况就可以了，也就是用 <code>if</code>
进行判断。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是问题来了。当在里面判断到待定状态时，我们要干什么？ 因为这个时候
<code>resolve</code> 或者 <code>reject</code>
还没有获取到任何值。因此，我们必须让 <code>then</code>
里的函数稍后再执行的，等 <code>resolve</code> 执行了以后，再执行
<code>then</code>，为了保留 <code>then</code>
里的函数，我们可以创建数组来保存函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在实例化对象的时候就让每一个实例都有这两个数组，一个数组保存
<code>resolve</code> 函数，另一个数组保存 <code>reject</code>
函数，为什么是数组呢？因为数组是先入先出的顺序，接着就完善
<code>then</code> 里面的代码，也就是当判断到状态为待定时，暂且把
<code>then</code>
里的两个函数参数分别放在两个数组里面，数组里面放完函数以后就可以完善
<code>resolve</code> 和 <code>reject</code> 代码了。 在执行
<code>resolve</code> 或者 <code>reject</code> 的时候，遍历自身的
<code>callback</code> 数组。看看数组里面有没有 <code>then</code>
那边保留过来的待执行函数，然后逐个执行数组里面的函数，执行的时候会传入相应的参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我们修改一下实例里面的代码，并且同时用 <code>resolve</code> 和
<code>reject</code>，为了看看是否会同时出现两种状态的值，是否有这样的错误。结果我们可以看到代码顺序，还是不太对。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130001359.png"
alt="20220130001359" /></p>
<p>这里有个小细节，<code>resolve</code> 和 <code>reject</code>
是要在事件循环末尾执行的，因此我们就给 <code>resolve</code> 和
<code>reject</code> 里面加上
<code>setTimeout</code>，然后把原来的代码复制上去就可以了，现在再来看看控制台，就会发现没有错误了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130224337.png"
alt="20220130224337" /></p>
<p>首先进行第一步，然后 <code>new</code> 一个实例进行，第二步遇到
<code>setTimeout</code> 的时候进行异步操作，然后运行实例的
<code>then</code>
方法，发现依旧是待定状态，就把函数参数放到数组里面保存起来。然后进行第三步，现在又要回头去执行刚刚
<code>setTimeout</code> 里面的内容，要执行 <code>resolve</code>
的时候发现又要 <code>setTimeout</code>
异步处理，于是就执行第四步，最后再来执行
<code>resolve</code>，也就是改变状态，改变结果值，并且遍历刚刚保存的数组对象，最后执行刚刚保存的函数对象，然后就输出
<code>zepoch</code> 了</p>
<h2 id="链式">链式</h2>
<p>现在我们已经越来越接近胜利了，我修改一下代码，来看一下
<code>promise</code> 的链式功能。也就是 <code>then</code> 后面又有一个
<code>then</code>，毫无疑问在控制台里面是会报错的</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130225239.png"
alt="20220130225239" /></p>
<p>为了可以实现链式功能，我们需要让 <code>then</code> 方法返回一个新的
<code>promise</code>，返回一个新的 <code>promise</code>
以后。他就有自己的 <code>then</code>
方法，这样就能实现无限的链式，现在我们就在 <code>then</code>
方法里面返回一个新的手写 <code>Promise</code>
实例，再把原来的代码复制上去就可以了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>全部代码如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-回归</title>
    <url>/2022/1247504268.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>此次学习的课程为李宏毅机器学习，之前学过一遍吴恩达的课程，只可惜当时没记笔记，且近些时候没有写代码，逐渐疏忽了，故选择李宏毅再进行新一遍的学习，所谓温故而知新。</p>
<p>回归是我们通常会使用的机器学习中的一类，比如日常中的我们的身高预测，股票预测等等，这些都可以看作为粗略的回归。</p>
<h2 id="举一个例子">举一个例子</h2>
<p>小时候我们会玩一个叫赛尔号的游戏，游戏里有各种各样的精力，就好比我们捕捉到了一只雷伊，然后我们可以向雷伊投经验值，让他升级，这只雷伊会有一个攻击力，我们想要预测雷伊的各种各样的属性与其攻击力之间的关系。</p>
<span id="more"></span>
<p>于是我们设其血量为<span
class="math inline">\(X_{hp}\)</span>，其体重为<span
class="math inline">\(x_{w}\)</span>，其身高为<span
class="math inline">\(x_{h}\)</span>，其物种为<span
class="math inline">\(x_s\)</span>，其战斗力为<span
class="math inline">\(x_{cp}\)</span>，然后预测他进化之后的战斗力值。那么便有<span
class="math inline">\(y=b+\sum w_ix_i\)</span>，其中<span
class="math inline">\(w_i:weight,b:bias\)</span>。如果单一个<span
class="math inline">\(x_{cp}\)</span>作预测的话便是<span
class="math inline">\(y=b+w\cdot x_{cp}\)</span>。</p>
<p>收集到了数据之后，便是可以进行预测，在此我们使用一个名为Loss函数进行Loss计算
<span class="math display">\[
L(f) = \sum^{10}_{n=1}(\hat y^n-f(x^n_{cp}))^2\\
L(f) = \sum^{10}_{n=1}(\hat y^n-(b+w\cdot x^n_{cp}))^2
\]</span> 我们想要的结果是需要 loss
函数尽可能的小，我们需要选择一个最好的函数，在此我们通过梯度下降来进行函数优化，进行如此迭代。
<span class="math display">\[
w^1 = w^0-\alpha\frac{dL}{dw}|_{w=w^0}\\
w^2 = w^1-\alpha\frac{dL}{dw}|_{w=w^1}
\]</span> 对于我们有两个参数的函数来说，也是一样可以进行迭代 <span
class="math display">\[
w^1 = w^0-\alpha\frac{\partial L}{\partial w}|_{w=w^0,b=b^0},b^1 =
b^0-\alpha\frac{\partial L}{\partial b}|_{w=w^0,b=b^0}
\]</span> 沿着梯度方向逐渐减小，直到让 loss 函数最小，偏微分公式如下
<span class="math display">\[
\frac{\partial L}{\partial w}=\sum^{10}_{n=1}2(\hat y^n-(b+w\cdot
x^n_{cp}))(-x^n_{cp})
\]</span> 那么经过迭代之后便可以求得一个较为合适的<span
class="math inline">\(w和b\)</span>，便是得到了方程。</p>
<h2 id="实践">实践</h2>
<p>此次的实践为一项 PM.2.5 预测任务</p>
<ul>
<li>数据使用丰原站的观测记录，分成 train set 跟 test set，train set
是丰原站每个月的前 20 天所有资料。test set
则是从丰原站剩下的资料中取样出来。</li>
<li>train.csv: 每个月前 20 天的完整资料。</li>
<li>test.csv : 从剩下的资料当中取样出连续的 10
小时为一笔，前九小时的所有观测数据当作 feature，第十小时的 PM2.5 当作
answer。一共取出 240 笔不重複的 test data，请根据 feature 预测这 240
笔的 PM2.5。</li>
<li>Data 含有 18 项观测数据 AMB_TEMP, CH4, CO, NHMC, NO, NO2, NOx, O3,
PM10, PM2.5, RAINFALL, RH, SO2, THC, WD_HR, WIND_DIREC, WIND_SPEED,
WS_HR。</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'work/hw1_data/train.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span>
data<span class="token punctuation">[</span>data<span class="token operator">==</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
日期
</th>
<th>
測站
</th>
<th>
測項
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
...
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
<th>
23
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
2014/1/1
</td>
<td>
豐原
</td>
<td>
AMB_TEMP
</td>
<td>
14
</td>
<td>
14
</td>
<td>
14
</td>
<td>
13
</td>
<td>
12
</td>
<td>
12
</td>
<td>
12
</td>
<td>
...
</td>
<td>
22
</td>
<td>
22
</td>
<td>
21
</td>
<td>
19
</td>
<td>
17
</td>
<td>
16
</td>
<td>
15
</td>
<td>
15
</td>
<td>
15
</td>
<td>
15
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2014/1/1
</td>
<td>
豐原
</td>
<td>
CH4
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
...
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2014/1/1
</td>
<td>
豐原
</td>
<td>
CO
</td>
<td>
0.51
</td>
<td>
0.41
</td>
<td>
0.39
</td>
<td>
0.37
</td>
<td>
0.35
</td>
<td>
0.3
</td>
<td>
0.37
</td>
<td>
...
</td>
<td>
0.37
</td>
<td>
0.37
</td>
<td>
0.47
</td>
<td>
0.69
</td>
<td>
0.56
</td>
<td>
0.45
</td>
<td>
0.38
</td>
<td>
0.35
</td>
<td>
0.36
</td>
<td>
0.32
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2014/1/1
</td>
<td>
豐原
</td>
<td>
NMHC
</td>
<td>
0.2
</td>
<td>
0.15
</td>
<td>
0.13
</td>
<td>
0.12
</td>
<td>
0.11
</td>
<td>
0.06
</td>
<td>
0.1
</td>
<td>
...
</td>
<td>
0.1
</td>
<td>
0.13
</td>
<td>
0.14
</td>
<td>
0.23
</td>
<td>
0.18
</td>
<td>
0.12
</td>
<td>
0.1
</td>
<td>
0.09
</td>
<td>
0.1
</td>
<td>
0.08
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2014/1/1
</td>
<td>
豐原
</td>
<td>
NO
</td>
<td>
0.9
</td>
<td>
0.6
</td>
<td>
0.5
</td>
<td>
1.7
</td>
<td>
1.8
</td>
<td>
1.5
</td>
<td>
1.9
</td>
<td>
...
</td>
<td>
2.5
</td>
<td>
2.2
</td>
<td>
2.5
</td>
<td>
2.3
</td>
<td>
2.1
</td>
<td>
1.9
</td>
<td>
1.5
</td>
<td>
1.6
</td>
<td>
1.8
</td>
<td>
1.5
</td>
</tr>
<tr>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
4315
</th>
<td>
2014/12/20
</td>
<td>
豐原
</td>
<td>
THC
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.7
</td>
<td>
1.7
</td>
<td>
...
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
2
</td>
<td>
2.1
</td>
<td>
2
</td>
<td>
1.9
</td>
<td>
1.9
</td>
<td>
1.9
</td>
<td>
2
</td>
<td>
2
</td>
</tr>
<tr>
<th>
4316
</th>
<td>
2014/12/20
</td>
<td>
豐原
</td>
<td>
WD_HR
</td>
<td>
46
</td>
<td>
13
</td>
<td>
61
</td>
<td>
44
</td>
<td>
55
</td>
<td>
68
</td>
<td>
66
</td>
<td>
...
</td>
<td>
59
</td>
<td>
308
</td>
<td>
327
</td>
<td>
21
</td>
<td>
100
</td>
<td>
109
</td>
<td>
108
</td>
<td>
114
</td>
<td>
108
</td>
<td>
109
</td>
</tr>
<tr>
<th>
4317
</th>
<td>
2014/12/20
</td>
<td>
豐原
</td>
<td>
WIND_DIREC
</td>
<td>
36
</td>
<td>
55
</td>
<td>
72
</td>
<td>
327
</td>
<td>
74
</td>
<td>
52
</td>
<td>
59
</td>
<td>
...
</td>
<td>
18
</td>
<td>
311
</td>
<td>
52
</td>
<td>
54
</td>
<td>
121
</td>
<td>
97
</td>
<td>
107
</td>
<td>
118
</td>
<td>
100
</td>
<td>
105
</td>
</tr>
<tr>
<th>
4318
</th>
<td>
2014/12/20
</td>
<td>
豐原
</td>
<td>
WIND_SPEED
</td>
<td>
1.9
</td>
<td>
2.4
</td>
<td>
1.9
</td>
<td>
2.8
</td>
<td>
2.3
</td>
<td>
1.9
</td>
<td>
2.1
</td>
<td>
...
</td>
<td>
2.3
</td>
<td>
2.6
</td>
<td>
1.3
</td>
<td>
1
</td>
<td>
1.5
</td>
<td>
1
</td>
<td>
1.7
</td>
<td>
1.5
</td>
<td>
2
</td>
<td>
2
</td>
</tr>
<tr>
<th>
4319
</th>
<td>
2014/12/20
</td>
<td>
豐原
</td>
<td>
WS_HR
</td>
<td>
0.7
</td>
<td>
0.8
</td>
<td>
1.8
</td>
<td>
1
</td>
<td>
1.9
</td>
<td>
1.7
</td>
<td>
2.1
</td>
<td>
...
</td>
<td>
1.3
</td>
<td>
1.7
</td>
<td>
0.7
</td>
<td>
0.4
</td>
<td>
1.1
</td>
<td>
1.4
</td>
<td>
1.3
</td>
<td>
1.6
</td>
<td>
1.8
</td>
<td>
2
</td>
</tr>
</tbody>
</table>
<p>
4320 rows × 27 columns
</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">raw_data <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
raw_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
0
</th>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
...
</th>
<th>
14
</th>
<th>
15
</th>
<th>
16
</th>
<th>
17
</th>
<th>
18
</th>
<th>
19
</th>
<th>
20
</th>
<th>
21
</th>
<th>
22
</th>
<th>
23
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
14
</td>
<td>
14
</td>
<td>
14
</td>
<td>
13
</td>
<td>
12
</td>
<td>
12
</td>
<td>
12
</td>
<td>
12
</td>
<td>
15
</td>
<td>
17
</td>
<td>
...
</td>
<td>
22
</td>
<td>
22
</td>
<td>
21
</td>
<td>
19
</td>
<td>
17
</td>
<td>
16
</td>
<td>
15
</td>
<td>
15
</td>
<td>
15
</td>
<td>
15
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
...
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
</tr>
<tr>
<th>
2
</th>
<td>
0.51
</td>
<td>
0.41
</td>
<td>
0.39
</td>
<td>
0.37
</td>
<td>
0.35
</td>
<td>
0.3
</td>
<td>
0.37
</td>
<td>
0.47
</td>
<td>
0.78
</td>
<td>
0.74
</td>
<td>
...
</td>
<td>
0.37
</td>
<td>
0.37
</td>
<td>
0.47
</td>
<td>
0.69
</td>
<td>
0.56
</td>
<td>
0.45
</td>
<td>
0.38
</td>
<td>
0.35
</td>
<td>
0.36
</td>
<td>
0.32
</td>
</tr>
<tr>
<th>
3
</th>
<td>
0.2
</td>
<td>
0.15
</td>
<td>
0.13
</td>
<td>
0.12
</td>
<td>
0.11
</td>
<td>
0.06
</td>
<td>
0.1
</td>
<td>
0.13
</td>
<td>
0.26
</td>
<td>
0.23
</td>
<td>
...
</td>
<td>
0.1
</td>
<td>
0.13
</td>
<td>
0.14
</td>
<td>
0.23
</td>
<td>
0.18
</td>
<td>
0.12
</td>
<td>
0.1
</td>
<td>
0.09
</td>
<td>
0.1
</td>
<td>
0.08
</td>
</tr>
<tr>
<th>
4
</th>
<td>
0.9
</td>
<td>
0.6
</td>
<td>
0.5
</td>
<td>
1.7
</td>
<td>
1.8
</td>
<td>
1.5
</td>
<td>
1.9
</td>
<td>
2.2
</td>
<td>
6.6
</td>
<td>
7.9
</td>
<td>
...
</td>
<td>
2.5
</td>
<td>
2.2
</td>
<td>
2.5
</td>
<td>
2.3
</td>
<td>
2.1
</td>
<td>
1.9
</td>
<td>
1.5
</td>
<td>
1.6
</td>
<td>
1.8
</td>
<td>
1.5
</td>
</tr>
<tr>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
4315
</th>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.7
</td>
<td>
1.7
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
...
</td>
<td>
1.8
</td>
<td>
1.8
</td>
<td>
2
</td>
<td>
2.1
</td>
<td>
2
</td>
<td>
1.9
</td>
<td>
1.9
</td>
<td>
1.9
</td>
<td>
2
</td>
<td>
2
</td>
</tr>
<tr>
<th>
4316
</th>
<td>
46
</td>
<td>
13
</td>
<td>
61
</td>
<td>
44
</td>
<td>
55
</td>
<td>
68
</td>
<td>
66
</td>
<td>
70
</td>
<td>
66
</td>
<td>
85
</td>
<td>
...
</td>
<td>
59
</td>
<td>
308
</td>
<td>
327
</td>
<td>
21
</td>
<td>
100
</td>
<td>
109
</td>
<td>
108
</td>
<td>
114
</td>
<td>
108
</td>
<td>
109
</td>
</tr>
<tr>
<th>
4317
</th>
<td>
36
</td>
<td>
55
</td>
<td>
72
</td>
<td>
327
</td>
<td>
74
</td>
<td>
52
</td>
<td>
59
</td>
<td>
83
</td>
<td>
106
</td>
<td>
105
</td>
<td>
...
</td>
<td>
18
</td>
<td>
311
</td>
<td>
52
</td>
<td>
54
</td>
<td>
121
</td>
<td>
97
</td>
<td>
107
</td>
<td>
118
</td>
<td>
100
</td>
<td>
105
</td>
</tr>
<tr>
<th>
4318
</th>
<td>
1.9
</td>
<td>
2.4
</td>
<td>
1.9
</td>
<td>
2.8
</td>
<td>
2.3
</td>
<td>
1.9
</td>
<td>
2.1
</td>
<td>
3.7
</td>
<td>
2.8
</td>
<td>
3.8
</td>
<td>
...
</td>
<td>
2.3
</td>
<td>
2.6
</td>
<td>
1.3
</td>
<td>
1
</td>
<td>
1.5
</td>
<td>
1
</td>
<td>
1.7
</td>
<td>
1.5
</td>
<td>
2
</td>
<td>
2
</td>
</tr>
<tr>
<th>
4319
</th>
<td>
0.7
</td>
<td>
0.8
</td>
<td>
1.8
</td>
<td>
1
</td>
<td>
1.9
</td>
<td>
1.7
</td>
<td>
2.1
</td>
<td>
2
</td>
<td>
2
</td>
<td>
1.7
</td>
<td>
...
</td>
<td>
1.3
</td>
<td>
1.7
</td>
<td>
0.7
</td>
<td>
0.4
</td>
<td>
1.1
</td>
<td>
1.4
</td>
<td>
1.3
</td>
<td>
1.6
</td>
<td>
1.8
</td>
<td>
2
</td>
</tr>
</tbody>
</table>
<p>
4320 rows × 24 columns
</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">mouth_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> mouth <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sample <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> day <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sample<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token punctuation">(</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">=</span>raw_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>mouth<span class="token operator">*</span><span class="token number">20</span><span class="token operator">+</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>mouth<span class="token operator">*</span><span class="token number">20</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token comment"># 数据每个月有 20 天，每天有 24 小时，每个月有 480 小时的数据</span>
        <span class="token comment"># 每天有 18 项数据</span>
        <span class="token comment"># 将每个月 20 天的数据，20*24=480 个数据排列在一行上面</span>
    mouth_data<span class="token punctuation">[</span>mouth<span class="token punctuation">]</span> <span class="token operator">=</span> sample<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据题目描述，我们要根据前九个小时的数据去预测第十个小时的数据，所以我们需要将数据再次进行切分，每个前九个小时都是x，每个第十个小时都是y，每个月一共有480个小时，所以每个月
y 的数量为 480-9 =471 个，每个 y 对应 18*9 个特征</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">471</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">471</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> mouth <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> day <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> hour <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> day<span class="token operator">==</span><span class="token number">19</span> <span class="token keyword">or</span> hour<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            x<span class="token punctuation">[</span>mouth<span class="token operator">*</span><span class="token number">471</span><span class="token operator">+</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>hour<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> mouth_data<span class="token punctuation">[</span>mouth<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>hour<span class="token punctuation">:</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>hour<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            y<span class="token punctuation">[</span>mouth<span class="token operator">*</span><span class="token number">471</span><span class="token operator">+</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>hour<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mouth_data<span class="token punctuation">[</span>mouth<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span>day<span class="token operator">*</span><span class="token number">24</span><span class="token operator">+</span>hour<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>目前 x 为12 * 471 行， 18*9 列</p>
<p>目前 y 为12 * 471 行， 1 列</p>
<p>将 x 进行归一化</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 每一列的均值</span>
std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 每一列的标准差</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">471</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据集进行划分，训练集：测试集 = 4：1</span>
<span class="token keyword">import</span> math
x_train_set <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
y_train_set <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

x_validation <span class="token operator">=</span> x<span class="token punctuation">[</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
y_validation <span class="token operator">=</span> y<span class="token punctuation">[</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_train_set<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_train_set<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_validation<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>y_validation<span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">471</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>4521 4521 1131 1131</code></pre>
<p>使用梯度下降进行训练</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>
w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
learning_rate <span class="token operator">=</span> <span class="token number">0.000001</span>
iter_time <span class="token operator">=</span> <span class="token number">1000</span>
adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>
<span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>
    loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">#rmse</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>
    gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token comment">#dim*1</span>
<span class="token comment">#     adagrad += gradient ** 2</span>
<span class="token comment">#     w = w - learning_rate * gradient / np.sqrt(adagrad + eps)</span>
    w <span class="token operator">=</span> w <span class="token operator">-</span> learning_rate <span class="token operator">*</span> gradient
np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'work/weight.npy'</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>0:23.067503022281024
100:16.01469450959162
200:15.785217268902825
300:15.667044002058859
400:15.59344540214558
500:15.54253683834305
600:15.504902944004627
700:15.475801107300377
800:15.452554803514973
900:15.433523145338306</code></pre>
<p>读取测试数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">testdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'work/hw1_data/test.csv'</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span>
testdata <span class="token operator">=</span> testdata<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
testdata<span class="token punctuation">[</span>testdata<span class="token operator">==</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
test_data <span class="token operator">=</span> testdata<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
test_x <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    test_x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 归一化</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
            test_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>test_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
test_x <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test_x<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进行预测</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'work/weight.npy'</span><span class="token punctuation">)</span>
ans_y <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span>w<span class="token punctuation">)</span>
ans_y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>保存到 CSV 文件</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'work/submit.csv'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span>newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>
    csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">]</span>
    csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>ans_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此便是完成了预测，并未找到对比的真实数据，等找到真实数据再去测试正确率</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-支持向量机</title>
    <url>/2022/917828124.html</url>
    <content><![CDATA[<p>支持向量机总体是由一个合页损失函数和一个核函数组成</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819195408.png"
alt="20220819195408" /></p>
<h2 id="合页损失函数">合页损失函数</h2>
<p>由于函数形状像一个合页，故命合页损失函数，下图为合页损失函数的图形。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819195640.png"
alt="20220819195640" /></p>
<p>二分类问题求解分为三个步骤，第一步为定义函数</p>
<p><span class="math display">\[
g(x)= \begin{cases} f(x)&gt;0, &amp; \text {output= +1} \\ f(x)&lt;0,
&amp; \text{output= -1} \end{cases}
\]</span></p>
<p>上述定义的函数，其输出由f(x)决定，当f(x)大于零时，输出为+1，当f(x)小于零时，输出为-1。第二步是通过损失函数判断函数的好坏。我们定义损失函数如下：</p>
<p><span class="math display">\[
L(f)=\sum_nI(g(x^n)\not \neq \hat y^n)
\]</span></p>
<p><span
class="math inline">\(x^n\)</span>表示训练集中第n个数据，I代表指示函数，当它的输入为True的时候，输出1；否则输出0。也就是说，当我们的函数g预测的结果和实际结果一样的时候就没有损失，不一样的时候才有损失。但是这个损失函数是不可微分的，就无法用梯度下降的方法来优化。这时我们用另一个近似的函数来表示：</p>
<p><span class="math display">\[
L(f)=\sum_nI(f(x^n),\hat y^n)
\]</span></p>
<p>那这个损失函数是什么样的呢？我们来看一个这样的图形。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819201846.png"
alt="20220819201846" /></p>
<p>它的横轴是 <span class="math inline">\(\hat{y}^nf(x)\)</span>，<span
class="math inline">\(\hat{y}^n\)</span> 可以是+1或-1，我们希望当 <span
class="math inline">\(\hat{y}^n=+1\)</span> 时，<span
class="math inline">\(f(x)\)</span> 的值正的越大越好；当 <span
class="math inline">\(\hat{y}^n=-1\)</span> 时，$ f(x)$
的值负的越大越好。整体就 <span
class="math inline">\(\hat{y}^nf(x)\)</span>
的值越大越好。纵轴当成损失的话，越往右，<span class="math inline">\(\hat
y^nf(x)\)</span> 越大，损失越小。</p>
<p>损失函数的理想情况是两条黑线。当 <span class="math inline">\(g(x^n) =
\hat{y}^n\)</span> 时损失为0，这时 <span
class="math inline">\(\hat{y}^nf(x)\)</span> 为正数；当 <span
class="math inline">\(g(x^n)\neq \hat{y}^n\)</span> 时损失为1，这时<span
class="math inline">\(\hat{y}^nf(x)\)</span>
为负数；但是这样是无法微分的。我们把I用l来取代。</p>
<p>这时 l 有很多选择，比如：</p>
<p><span class="math display">\[
Square Loss = \begin{cases} if \hat y^n=1, &amp; \text {f(x) close to 1}
\\ if \hat y^n=-1, &amp; \text{f(x) close to -1} \end{cases}
\]</span></p>
<p>这个是平方损失，可以写成: <span
class="math inline">\(l(f(x^n),\hat{y}^n) = (\hat{y}^nf(x^n) -
1)^2\)</span> 。当 <span class="math inline">\(\hat{y}^n=1\)</span>
时，上式就是 <span class="math inline">\((f(x^n) - 1)^2\)</span> ；当
<span class="math inline">\(\hat{y}^n=-1\)</span> 时，上式就是 <span
class="math inline">\((-f(x^n) - 1)^2 = (f(x^n) + 1)^2\)</span>
。所以，当 <span class="math inline">\(\hat{y}^n=1\)</span> 时，$
f(x^n)$ 要和 1 越接近越好；当 <span class="math inline">\(f(x^n) =
-1\)</span> 时，<span class="math inline">\(f(x^n)\)</span> 要和 -1
越接近越好。</p>
<p>平方损失函数图形是上面红色的抛物线，但是它是不合理的，因为当 <span
class="math inline">\(\hat{y}^nf(x)\)</span>
很大的时候，竟然有个很大的损失。还有一种选择是Sigmoid + Square Loss:</p>
<p><span class="math display">\[
Sigmoid + Square Loss = \begin{cases} if \hat y^n=1, &amp; \text
{σ(f(x)) close to 1} \\ if \hat y^n=-1, &amp; \text{σ(f(x)) close to -1}
\end{cases}
\]</span></p>
<p>它的图形是上面蓝色的线，我们讲过，在逻辑回归中，不会用平方损失，而是用交叉熵。我们这里替换成交叉熵。这里
<span class="math inline">\(\sigma(f(x))\)</span> 代表了一个分布，Ground
Truth(指的是真实情况)代表另一个分布。</p>
<p>这两个分布之间的交叉熵，就是要最小化的损失值。</p>
<p>它可以写成：<span class="math inline">\(l(f(x^n),\hat{y}^n) =\ln(1 +
e^{-(\hat{y}^nf(x))})\)</span> 。它是上面绿色的线，这里除了 <span
class="math inline">\(ln2\)</span>
，这不是影响这个函数图形走势，但是可以让它变成理想损失的上边界(upper
bound)，我们虽然无法最小化理想的损失，但是可以最小化它的上边界。</p>
<p>这个式子是合理的，当 <span
class="math inline">\(\hat{y}^nf(x)\)</span> 趋近于正无穷大时，<span
class="math inline">\(e^{-\infty}=\frac{1}{e^\infty}=0\)</span>;当 <span
class="math inline">\(\hat{y}^nf(x)\)</span> 趋近于负无穷大时，<span
class="math inline">\(e^{\infty}=\infty=&gt;ln(1+\infty)=\infty\)</span>
我们可以比较用交叉熵和平方损失的曲线，这样就可以知道为什么选择交叉熵。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819205957.png"
alt="20220819205957" /></p>
<p>我们把 $^nf(x) <span class="math inline">\(从 -2 移动到 -1
时，交叉熵的那条线变化很明显，而平方损失的那条线变化很小。当\)</span>^nf(x)$
负的很大的时候，调整这个值，对总损失影响不大，这样训练出来的效果很不好。而交叉熵调整的时候影响很大。
最后看下什么是Hinge Loss</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819212136.png"
alt="20220819212136" /></p>
<p>它的式子是：<span class="math inline">\(l(f(x^n),\hat{y}^n) =\max(0,1
- \hat{y}^nf(x))\)</span>。当 <span
class="math inline">\(\hat{y}^n=1\)</span> 时，只要 <span
class="math inline">\(f(x) &gt; 1\)</span>，它的损失就是 0；而当 <span
class="math inline">\(\hat{y}^n = -1\)</span> 时，<span
class="math inline">\(f(x)&lt;-1\)</span>，它的损失才会是 0。</p>
<p>把折页损失的图像画出来，是上面紫色的那条线。在这条线上，只要 <span
class="math inline">\(\hat{y}^nf(x) &gt; 1\)</span>
时，就已经够好了，损失是0。</p>
<h2 id="线性svm">线性SVM</h2>
<p><span class="math display">\[
f(x)=∑_iw_ix_i+b={w\brack b}⋅{1\brack x}=w^Tx
\]</span></p>
<p>上面这个线性等式可以看成是两个向量的内积。接下来我们把<span
class="math inline">\({w\brack b}\)</span>用新的 w 来表示，把 <span
class="math inline">\({x\brack 1}\)</span> 用新的x xx来表示，最终得到
<span class="math inline">\(w^T x\)</span> 这样当$f(x) &gt;
0f(x)&gt;0时属于一个类别；当 <span class="math inline">\(f(x) &lt;
0\)</span> 时属于另一个类别。</p>
<p>此时，SVM采用的损失函数是折页损失。<span
class="math inline">\(l(f(x^n),\hat{y}^n) =\max (0,1 -
\hat{y}^nf(x))\)</span></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819220153.png"
alt="20220819220153" /></p>
<p>通常还会加上正则化 <span class="math inline">\(\lambda
||w||_2\)</span> ，这个损失函数是凸函数。而 <span
class="math inline">\(\lambda ||w||_2\)</span>
也是凸函数。把它们加起来仍然是一个凸函数。</p>
<p>这个函数其实不一定是线性的，如果不是线性的，也可以用梯度下降的方法来训练。</p>
<p>接下来看下如何用梯度下降来训练SVM。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819220358.png"
alt="20220819220358" /></p>
<p>我们的损失函数长这样，它是合页损失，这里为了简单，去掉了正则项。
只要可以对这个合页损失函数做微分，就能做梯度下降。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819221635.png"
alt="20220819221635" /></p>
<p>它有两个区域，可以是0是最大者；或 <span class="math inline">\(1 -
\hat{y}^nf(x^n)\)</span> 是最大者。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819223303.png"
alt="20220819223303" /></p>
<p>我们现在要最小化<span
class="math inline">\(L(f)\)</span>，要选择一个最小的 <span
class="math inline">\(x^n\)</span> 让 L 能最小，就是要选个 <span
class="math inline">\(x^n\)</span> 让 $^n 越小越好。 <span
class="math inline">\(\varepsilon^n\)</span>
的限制是大于等于0，以及大于等于 <span
class="math inline">\(1-\hat{y}^nf(x^n)\)</span>，让$ ^n$
最小的方法，就是让 <span class="math inline">\(\varepsilon^n\)</span>
等于 0 和 <span class="math inline">\(1-\hat{y}^nf(x^n)\)</span>
最大者。所以，当要最小化的时候，这两个红框是相等的。</p>
<h2 id="dual-representation">Dual Representation</h2>
<p>我们把能最小化损失函数的权值写成 <span
class="math inline">\(w^*\)</span>，它其实是我们的数据线性组合</p>
<p><span class="math display">\[
w^*=\sum_n\alpha^*_nx^n
\]</span></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819224035.png"
alt="20220819224035" /></p>
<p>如果初始的w是个零向量，每次在更新w
ww的时候，后面加上的就是数据点的线性组合。</p>
<p>w可以写成<span class="math inline">\(\alpha
X\)</span>，这时我们可以改写f(x)的式子，这里把 <span
class="math inline">\((x^n \cdot x)\)</span>写成一个函数 <span
class="math inline">\(K(x^n,x)\)</span>这个函数就叫核函数(Kernel
function)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819230513.png"
alt="20220819230513" /></p>
<p>我知道可以这样写以后，未知的就变成了 <span
class="math inline">\(\alpha_n\)</span>，那在第二步和第三步的问题就变成了找一组最好的
<span class="math inline">\(\alpha_n\)</span>，让总损失最小。</p>
<h2 id="核技巧kernel-trick">核技巧(Kernel Trick)</h2>
<p>如果数据是非线性的，直接使用SVM，得不到好的结果。此时需要特殊处理，使用一个变换将原空间的数据映射到新空间中，变成线性可分的，然后再使用SVM。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819231336.png"
alt="20220819231336" /></p>
<p>所以，把 <span class="math inline">\(x,z\)</span>
先做特征转换后，再做内积等于它们先做内积的平方。有时直接计算<span
class="math inline">\((x\cdot
z)^2\)</span>会比先做特征转换，再做内积要快很多。比如 x,z都是 k
维的向量，我们想把它们投影到更高维的平面。在更高维的平面，要考虑向量元素中两两之间的关系。</p>
<p>如果用核技巧的话，可以轻易的计算出 <span
class="math inline">\(\phi(x) \cdot \phi(z)\)</span>
的结果，怎么算呢，通过 <span class="math inline">\((x\cdot z)^2\)</span>
就可以。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819232023.png"
alt="20220819232023" /></p>
<p>上式中可以x xx集中到一边就可以得到 <span
class="math inline">\(\phi(x)\)</span> ，同理 z 也是一样。</p>
<p>还有更惊人的是RBF Kernel。</p>
<h2 id="rbf-kernel">RBF Kernel</h2>
<p>径向基函数核(Radial basis function Kernel,RBF
Kernel)式子是这样的：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819232632.png"
alt="20220819232632" /></p>
<p>这个可以衡量 x,z 的相似度，如果 x,z 是一样的话，Kernel的值就是
1；如果 x,z 完全不一样的话，值就是
0。也可以写成两个高纬度的向量做内积。在这个式子中 <span
class="math inline">\(\phi(*)\)</span>
的结果可以是无穷多维的，但是我们无法做到无穷多维向量的内积。可以看成是两个无穷长的向量做内积，最后得到的结果就是这个K(x,z)的结果。</p>
<h2 id="sigmoid-kernel">Sigmoid Kernel</h2>
<p>K(x,z)=tanh(x⋅z)</p>
<p>当我们把训练数据 x 代入 f 中的时候，其实是计算 x
和训练数据集中所有数据的 <span class="math inline">\(K(x^n,x)\)</span>
然后再乘上 <span class="math inline">\(\alpha_n\)</span> 如果用Sigmoid
Kernel 的时候就是</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819233200.png"
alt="20220819233200" /></p>
<p>如果我们用Sigmoid
Kernel，这个f(x)可以想象成只有一个隐藏层的神经网络。x会和所有的 <span
class="math inline">\(x^n\)</span>
做内积，就好像是有个神经元它的权值就是某笔数据 <span
class="math inline">\(x^n\)</span> ,它的输入就是向量x。把 <span
class="math inline">\(x^1\)</span> 当做第一个神经元的权值， <span
class="math inline">\(x^2\)</span> 作为第二个神经元的权值</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819233422.png"
alt="20220819233422" /></p>
<p>然后把它们都通过双曲正切(tanhx ,hyperbolic tangent)
得到输出后，再乘上<span
class="math inline">\(\alpha\)</span>，最后累加起来就得到f(x)的结果。</p>
<p><span class="math display">\[
\tanh x = \frac{\sinh x}{\cosh x} = \frac{e^x - e^{-x}}{e^x + e^{-x}}
\]</span></p>
<p>其实有了核技巧后，我们可以直接设计这个核函数，而不用考虑<span
class="math inline">\(\phi(x),\phi(z)\)</span>长什么样子。</p>
<p>什么时候可以这样呢，假设你的输入数据 x
是结构数据，比如序列，此时很难表示成 <span
class="math inline">\(\phi(x)\)</span>。</p>
<p>我们可以直接定它的核函数，我们知道核函数其实就是投影到高维的内积，所以核函数是个类似相似度(similarity)的东西。</p>
<p>所以可以定一个描述x , z
x,zx,z相似度的函数，哪怕它们是结构数据，只要知道怎么计算两个序列之间的相似度，就可以把这个相似度当成核函数来使用。</p>
<p>不是所有的相似度函数都可以，有个Mercer’s
理论可以告诉你哪些函数可以。这个理论可以检查你定出来的相似度函数背后有没有两个向量做内积。</p>
<p>比如在语音上，假设你要分类的对象是声音讯号(Audio segment)。</p>
<p>每个声音讯号可以用向量序列(vector
sequnce)来描述它。每段声音讯号的长度不一样，所以向量序列的长度也不一样。</p>
<p>假设现在给你一段声音讯号，要你判断说话者的情绪(高兴、生气…)。</p>
<p>因为声音讯号的长度不一，所以无法直接用一个向量来描述，这时可以直接定相似函数(核函数K(x,z))。</p>
<h2 id="svm和深度学习">SVM和深度学习</h2>
<p>我们知道深度学习的前几层可以看成适特征转换，最后一层可以看成是线性分类器。其实SVM做的事情也是很类似的。SVM先用一个核函数把特征转换到高维空间上面，然后就可以用线性分类器进行分类。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-支持向量机/20220819234350.png"
alt="20220819234350" /></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-梯度下降的优化</title>
    <url>/2022/3163358201.html</url>
    <content><![CDATA[<p>在回归中，我们需要解决下面的优化问题，即使得Loss函数尽可能的小 <span
class="math display">\[
\theta^*=arg\min L(\theta),L:loss function,\theta:parameters
\]</span> 假设一共有两个参数<span
class="math inline">\(\theta_1,\theta_2\)</span>，使得<span
class="math inline">\(\theta^0=
\begin{bmatrix}\theta^0\\\theta^1\end{bmatrix}\)</span>，便有梯度如下
<span class="math display">\[\nabla L(\theta)=\begin{bmatrix} \partial
L(\theta_1)/ \partial \theta_1\\\ \partial L(\theta_2)/ \partial
\theta_2\end{bmatrix}\]</span> 那么参数的更新便可通过向量的形式进行
<span class="math display">\[
\begin{bmatrix}\theta^1_1\\\theta^1_2\end{bmatrix}=\begin{bmatrix}\theta^0_1\\\theta^0_2\end{bmatrix}-\eta\begin{bmatrix}
\partial L(\theta^0_1)/ \partial \theta_1\\\ \partial L(\theta^0_2)/
\partial \theta_2\end{bmatrix}
\]</span> 但是其中，<span
class="math inline">\(\eta\)</span>是一直不变的，但是我们知道，经过迭代之后，在越来约接近目标的时候，我们需要将学习率降低，使其能够愈发趋近目的地。故，我们对<span
class="math inline">\(eta\)</span>进行改进，使其经过一定的迭代后越来越小。
<span class="math display">\[
\eta^t=\eta/\sqrt{t+1}
\]</span>
但是学习率不能一刀切，对于参数，我们也需要给予其一定的改变。一般我们的参数的改变为
<span class="math display">\[
w^{t+1}=w^t-\eta^tg^t
\]</span> w是一个参数，我们设置<span
class="math inline">\(\eta^t\)</span>
为参数w之前导数的均方根，使其成为一个参数依赖型的学习率。也就是说 <span
class="math display">\[
w^1=w^0-\frac{\eta^0}{\sigma^0}g^0,\sigma^0=\sqrt{(g^0)^2}\\
w^2=w^1-\frac{\eta^1}{\sigma^1}g^1,\sigma^1=\sqrt{\frac{1}{2}[(g^0)^2+(g^1)^2]}\\
\]</span> 如此迭代，直到 <span class="math display">\[
w^{t+1}=w^t-\frac{\eta^t}{\sigma^t}g^t,\sigma^t=\sqrt{\frac{1}{t+1}\sum^t_{i=0}(g^i)^2}
\]</span> 从上面的式子中，我们可以看到<span
class="math inline">\(\eta^t\)</span>是一个时间相关的学习率，<span
class="math inline">\(\sigma^t\)</span>是一个参数相关的学习率，且 <span
class="math display">\[
\eta^t=\frac{\eta}{\sqrt{t+1}},\sigma^t=\sqrt{\frac{1}{t+1}\sum^t_{i=0}(g^i)^2}
\]</span> 故相除之后得到下列的公式 <span class="math display">\[
w^{t+1}=w^t-\frac{\eta}{\sqrt{\sum^t_{i=0}(g^i)^2}}g^t
\]</span> 梯度改进之后的对比如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-梯度下降的优化/20220816173111.png"
alt="20220816173111" /></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>机器学习</tag>
        <tag>梯度下降</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊1</title>
    <url>/2021/1510919766.html</url>
    <content><![CDATA[<p>七月三十一日，这个月结束了大三学年的学习，开始较为枯燥的考研生活，到了月底也是应该做一个小小的总结了，不然这个月也又是要浑浑噩噩地过去了。</p>
<span id="more"></span>
<h1 id="考研复习">考研复习</h1>
<p>先总结一下考研复习进度吧，在七月中把网课过了一遍，是华中科技大学杨广笑老师的<a
href="https://www.bilibili.com/video/BV1Ss411i7Mm">生物化学与分子生物学</a>，网课体验还是挺不错的，但是看完之后就觉得这门课要背诵要记忆的内容还是蛮多的，也有好多是自己没有掌握的，也是为过去自己没有好好学习这门科目感到羞愧；另外一个课是北京大学魏丽萍老师的<a
href="https://www.bilibili.com/video/BV13t411G7oh">生物信息学</a>，感觉还是蛮简单的，好多东西记忆都还是十分清晰，甚至觉得要是选择生物信息学进行考试的话甚至不用怎么复习。但是又觉得自己要是没有良好的生物化学基础的话怕是对日后的科研道路会有一些影响，于是呢，最后还是选择了生物化学与分子生物学进行复习，本来计划这个月先把第一本书看完来着，但是到目前吧，现在是晚上八点，还有八十页没看，待会儿看一下，应该能在明天也就是下个月开启新的篇章。</p>
<p>发现生物化学（第三版）这本书有一些有意思的地方，看的时候可以笑起来的那种。</p>
<blockquote>
<p>淋病奈瑟球菌（Nsisseria
gonorrhoeae）只感染人的生殖器和口腔黏膜，对人的其他部位和其他不起作用。😅</p>
</blockquote>
<p>怪起来了。</p>
<h1 id="代码之路">代码之路</h1>
<p>虽然说是在复习期间，也没有落下编程的功底，力扣的每日写题也是没有落下，成功拿到了七月的打卡牌子。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20210731200525059.png"
alt="image-20210731200525059" /></p>
<p>关于开源项目的开发，倒是开启的一个小项目 <a
href="https://github.com/zEpoch/webStart">zEpoch/webStart
(github.com)</a>，算是一个前端的入门项目吧，希望能够在日后获得一个 Star
之类的吧。</p>
<p>关于这个博客，配置这个博客倒是配置了挺多的时间，也是做了很多的调试，目前来说速度和舒适度还是蛮比较不错的。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-概率生成模型</title>
    <url>/2022/925661245.html</url>
    <content><![CDATA[<h2 id="理论基础">理论基础</h2>
<p>概率生成模型，是概率统计和机器学习中的一类重要模型，指一系列用于随机生成可观测数据的模型。假设有两类数据，每一类都有若干个样本；概率生成模型认为每一类数据都服从某一种分布，如高斯分布；从两类训练数据中得到两个高斯分布的密度函数，具体的是获得均值和方差两个参数；测试样本输入到其中一个高斯分布函数，得到的概率值若大于0.5，则说明该样本属于该类，否则属于另一类。</p>
<p>生成模型可以和贝叶斯概率公式进行结合，用于分类问题。原始贝叶斯概率公式为：</p>
<p><span class="math display">\[
P(A|B)=\frac{P(B|A)P(A)}{P(B)} \tag{1}
\]</span></p>
<p>对于一个<span
class="math inline">\(2\times2\)</span>的分类则有下图所述的贝叶斯分类</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-梯度下降的优化/20220817235221.png"
alt="20220817235221" /></p>
<p>在上图中，训练数据中有两个类别；每个类别下有5个样本，我们想要知道新的测试样本<span
class="math inline">\(x\)</span>属于<span
class="math inline">\(C1\)</span>的可能性。根据贝叶斯概率公式可以得到上图片所示的概率公式。其中，<span
class="math inline">\(P(C1)\)</span>和<span
class="math inline">\(P(C2)\)</span>表示在训练数据中，随机采样得到<span
class="math inline">\(C1\)</span>或者C2的概率，即两个类别在训练数据中所占的比重。分母项<span
class="math inline">\(P(x)\)</span>表示生成数据x的概率，此处可以由生成模型计算得到；</p>
<p><span class="math display">\[
P(x) = P(x|C1)P(C1) + P(x|C2)P(C2)
\]</span></p>
<p>因为有两个类别，每个类别下的数据具有不同的规律，服从不同的分布，都有可能生成数据<span
class="math inline">\(x\)</span>，所以相加得到生成<span
class="math inline">\(x\)</span>的概率。<span
class="math inline">\(P(C1)\)</span>和<span
class="math inline">\(P(C2)\)</span>可以由训练数据中的统计结果计算得到。</p>
<p>接下来是计算<span class="math inline">\(P(x|C1)\)</span>和<span
class="math inline">\(P(x|C2)\)</span>，我们一般是采用最大似然估计来计算。</p>
<p>给定一个概率分布D，假定其概率密度函数（连续分布）或概率聚集函数（离散分布）为<span
class="math inline">\(f_D\)</span>，以及一个分布参数<span
class="math inline">\(θ\)</span>，我们可以从这个分布中抽出一个具有n个值的采样<span
class="math inline">\(X_1,X_2,...,X_n\)</span>，通过利用<span
class="math inline">\(f_D\)</span>，我们就能计算出其概率：</p>
<p><span class="math display">\[
P=(x_1,x_2,...,x_n)=f_D(x_1,x_2,...,x_n|\theta)
\]</span></p>
<p>但是，我们可能不知道θ的值，尽管我们知道这些采样数据来自于分布D。那么我们如何才能估计出θ呢？一个自然的想法是从这个分布中抽出一个具有n个值的采样<span
class="math inline">\(X_1,X_2,...,X_n\)</span>，然后用这些采样数据来估计θ。
要在数学上实现最大似然估计法，我们首先要定义可能性：</p>
<p><span class="math display">\[
lik(\theta)=f_D(x_1,x_2,...,x_n|\theta)
\]</span></p>
<p>并且在<span
class="math inline">\(θ\)</span>的所有取值上，使这个函数最大化。这个使可能性最大的值即被称为θ的最大似然估计。</p>
<h2 id="实例">实例</h2>
<p>在此进行一个宝可梦类别的分类工作：我们使用两个类别的宝可梦构成训练数据，分别是水系（Water）和正常系（Normal），数据构成如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818001409.png"
alt="20220818001409" /></p>
<p>根据贝叶斯概率公式，计算P(x|C1)和P(x|C2)。分析每个类别下的数据分布规律，计算新的测试数据x分别由每个类别的数据模型生成的概率。</p>
<p>每个宝可梦，有两个特征属性 Defence 和 SP
Defence，假设数据的分布符合高斯分布。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818001903.png"
alt="20220818001903" /></p>
<p>接着由极大似然估计法，计算得到高斯分布的参数，即均值和标准差。</p>
<ul>
<li>均值表征的是各维变量的中心</li>
<li>协方差矩阵的对角线上的两个元素，决定了整个高斯曲面在某一维度上的“跨度”，方差越大，“跨度”越大</li>
<li>协方差矩阵的斜对角线上面的两个元素，表征的是各维变量之间的相关性，其数值大于零说明x与y呈正相关，其值越大，正相关程度越大，小于零则是负相关，否则则是不相关</li>
</ul>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818002328.png"
alt="20220818002328" /></p>
<p>接着，使用贝叶斯概率公式进行分类</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818002949.png"
alt="20220818002949" /></p>
<p>测试数据上的准确率为47%，效果很差。使用更多特征之后，准确率为54%</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818003049.png"
alt="20220818003049" /></p>
<p>那么则需要对模型进行调整，也就是调整高斯分布的均值和标准差</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818003814.png"
alt="20220818003814" /></p>
<p>这里使水系宝可梦和普通系宝可梦使用一个标准差矩阵，计算方式为其二者加权平均，使其准确率得到了一定的提升。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818004759.png"
alt="20220818004759" /></p>
<h2 id="总结">总结</h2>
<p>概率生成模型进行分类问题的三个步骤如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818004913.png"
alt="20220818004913" /></p>
<h2 id="后续">后续</h2>
<p>之前我们有贝叶斯的公式，那么能够将其进行简化呢？</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005111.png"
alt="20220818005111" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005153.png"
alt="20220818005153" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005212.png"
alt="20220818005212" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005227.png"
alt="20220818005227" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005307.png"
alt="20220818005307" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-概率生成模型/20220818005609.png"
alt="20220818005609" /></p>
<p>经过最终的化简计算可以知道，概率生成模型的本质是寻找参数w和b。如果我们直接进行参数w和b的求解，是不是就可以简化前面那么复杂的计算过程呢？那么请看下一篇博客吧。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-逻辑回归</title>
    <url>/2022/2694928426.html</url>
    <content><![CDATA[<p>接着上篇博客继续，我们发现，概率生成模型最终推导函数，其本质还是寻找参数w和b，所以可以设置一个函数，直接来寻找最优的w和b</p>
<p><span class="math display">\[
f_{w,b}(x)=P_{w,b}(C_1|x)=\sigma(z)\\
\sigma(z)=\frac{1}{1+exp(-z)}\\
z = w \cdot x+b
\]</span></p>
<p>相较于线性回归，逻辑回归做的事情便是将 wx+b 放入 sigmoid
函数中，使其输出一直处于0~1之间。</p>
<p>在我们确定了函数之后，便是应该再定义一个损失函数。 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818202556.png"
alt="20220818202556" /> 假设有一组训练数据，其数据大小为
N，而且分别有自己的类别标签C。给定一组 w 和
b，就可以计算这组w，b下产生上图N个训练数据的概率，<span
class="math inline">\(f_{w,b}(x^3)\)</span>表示 <span
class="math inline">\(x^3\)</span>
属于C1的概率，但是其真实分类为C2，所以要用 <span
class="math inline">\(1-f_{w,b}(x^3)\)</span>。</p>
<p><span
class="math inline">\(L(w,b)L(w,b)\)</span>取得的数值最大的时候，即取得最好的w和b，<span
class="math inline">\(w^∗,b^∗ = argmax_{w,b}L(w,b)\)</span></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818204159.png"
alt="20220818204159" /></p>
<p>在此我们可以做一个变换，对 <span
class="math inline">\(L(w,b)\)</span>取对数不影响其单调性，然后再加上符号，单调性与之前的相反，那么就是求
<span class="math inline">\(-lnL(w,b)\)</span> 的最小值。对于 <span
class="math inline">\(-lnL(w,b)\)</span>，我们可以将其写为 <span
class="math display">\[
-lnL(w,b) \\
= -lnf_{w,b}(x^1)\\
=-[\hat yln_{w,b}f(x^1)+(1-\hat y)ln(1-f_{w,b}(x^1))]
\]</span></p>
<p>其实很好理解，当 <span class="math inline">\(\hat y\)</span> 为 1
的时候 <span class="math display">\[
lnf_{w,b}(x)=[1 \cdot ln_{w,b}f(x)+(1-1) \cdot
ln(1-f_{w,b}(x))]=lnf_{w,b}(x)
\]</span> 当 <span class="math inline">\(\hat y\)</span>为 0 的时候
<span class="math display">\[ln(1-f_{w,b}(x))=[0 \cdot
ln_{w,b}f(x)+(1-0) \cdot ln(1-f_{w,b}(x))]=ln(1-f_{w,b}(x))
\]</span></p>
<p>所以便是有了下图的转化</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818211509.png"
alt="20220818211509" /></p>
<p>即两个伯努利分布的交叉熵，假设有两个分布 p 和
q，这两个分布的交叉熵就是H(p,q)，交叉熵代表的含义是这两个分布有多接近，如果两个分布是一模一样的话，那计算出的交叉熵就是0，也就是说，当交叉熵为零的时候，说明我们的函数完全符合实际的分布。
如果把function的输出和target都看作是两个伯努利分布，所做的事情就是希望这两个分布越接近越好，交叉熵最小，Loss就最小。</p>
<p>对找最好的function，就是最小化−lnL(w,b)，用梯度下降方法即可。</p>
<ul>
<li>计算算出<span class="math inline">\(lnf_w,_b(x^n)\)</span>对<span
class="math inline">\(w_i​\)</span>​的偏微分</li>
<li><span class="math inline">\(​f_w,_b(x)\)</span>​可以用 <span
class="math inline">\(\sigma{(z)}\)</span>​表示，而z可以用 ​<span
class="math inline">\(w_i\)</span> ​和 $b
$表示，所以可以利用链式法则展开</li>
<li>计算 <span class="math inline">\(​ln(1-f_{w,_b}(x^n))\)</span> 对
<span class="math inline">\(​w_i\)</span>​的偏微分</li>
<li>继续使用链式法则进行计算</li>
</ul>
<p><span
class="math inline">\((lnx)^′=\frac{1}{x}\)</span>，sigmoid函数求导：<span
class="math inline">\(\sigma(x)^′=\sigma(x)⋅(1−\sigma(x))\)</span></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818213456.png"
alt="20220818213456" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818213521.png"
alt="20220818213521" /></p>
<p>下图则为最终的结果：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818213551.png"
alt="20220818213551" /></p>
<p>得到了梯度之后，便是可以再度使用梯度下降进行 <span
class="math inline">\(w_i\)</span> 的更新。对于 Loss
函数的选择，我们使用交叉熵作为其损失。</p>
<p>上面说的是二分类问题，对于多分类应该如何解决呢？</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/机器学习-逻辑回归/20220818215308.png"
alt="20220818215308" /></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊10</title>
    <url>/2023/3164448168.html</url>
    <content><![CDATA[<p>回顾一下昨天。</p>
<p>昨天是周三，是要开组会的日子，但是我起晚了，醒来一看手机已然是九点半了，想来他们是已经开始会议了，我却还在被窝，究其原因还是昨晚的熬夜，但这就是另外一回事情了。</p>
<p>起来也没洗漱，也没去那家我常去买早餐的包子铺，穿上衣服匆匆的来了研究院。</p>
<p>来的时候第一时间也没有找到组会的会议室，还要找之前的会议通知去找，显得稍微有些狼狈了，组会汇报倒是很平静和正常，又加上了一些其他的吐槽。</p>
<p>中午吃完饭之后也并没有睡觉，想来我是应该好好休息一下的，但是奈何自走棋带走了我的注意力，两句棋过去之后已然是下午两点了，那就继续接下来的办公吧，看了一篇古早的一篇结合了解剖学的综述文章，讲的还是挺有意思的。</p>
<p>晚上早早的在六点前去吃了饭，晚上回来之后写了一会儿代码，做了一会儿学习，之后去健身到了十一点多，晚上回到住处已然是十二点了，洗漱放松之后又是一点多了，今天也就这么结束了？</p>
<p>最近觉得自己的时间很少，要做的东西很多，需要很多的时间；要学的事情很多，需要很多的时间；想要锻炼强健的体魄，需要很多的时间；想要良好的休息，需要很多的时间。时间真的是很少啊，很珍贵啊。</p>
<p>也许我应该逐步去更换一下自己的生活节奏和时间观以及做一些相应的规划了，希望明天会好一些。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊2</title>
    <url>/2021/1220239800.html</url>
    <content><![CDATA[<p>早上八点，起床，下了床墨迹了一会儿，醒醒了脑子，再一看时间，已经八点四十了，呕吼，穿上袜子穿上鞋，刷个牙，洗把脸，再抹一曾润肤乳，完事。</p>
<p>九点，下楼去食堂吃饭，磨磨唧唧到食堂又是五分钟后了，所幸还有饭，一个鸡蛋一个大饼一杯豆浆，肉蛋奶都有了，吃完饭回到寝室就是九点四十了。</p>
<span id="more"></span>
<p>为什么今天没有直接去图书馆呢？因为今天有个面试，什么面试呢？腾讯的一个面试，为什么会有这么一个面试呢？因为有个老哥让我扫了个二维码，我扫完二维码，填了姓名学习院校后居然就成功投递了简历，然后笔试都没有就收到了鹅厂的面试邀请，我也挺懵的，其实也还好，可以面试一下看看自己有多菜。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%91%B8%E9%B1%BC%E6%97%A5%E8%AE%B0%EF%BC%882%EF%BC%89/image-20210811225211599.png"
alt="image-20210811225211599" /></p>
<p>九点四十，到了宿舍，打开力扣，看了一下水友讲的鹅厂大概会面试的题，又做了一遍，再打开
B 站，又看了一会儿 <a href="https://space.bilibili.com/415434293">Pink
老师</a>的前端课程，磨叽磨叽就到了十一点。</p>
<p>十一点，开始面试，十一点刚到就打开了面试窗口，但是 hr
没有来，于是就等了 23
秒，她终于来了，而且还是个声音十分温柔的姐姐，希望是个姐姐吧，不然我的心态会出问题的。接下来半个小时，我和这位声音十分甜美的姐姐度过了愉快的一段时间（是的）。</p>
<p>十一点半，面试结束去吃饭。</p>
<p>十二点，吃完了饭悠悠哉哉去图书馆。</p>
<p>十二点二十三，来到了图书馆找了个位子坐下，去接了杯水，打开了手机，点开了打麻将。我当时心里想的是，我赢一局就去学习，然后打到了两点二十七，一局没赢，我心态炸裂。</p>
<p>两点二十七，我看了一眼时间，距离图书馆关门只有两个半小时了，也该学习了。于是乎，打开课本，怒学两个半小时，去吃饭。</p>
<p>五点二十，来到食堂吃饭。</p>
<p>五点四十五，吃完饭回到了宿舍，打开电脑，打开
wegame，打开英雄联盟。下了一局棋，没赢，不开心两局，那就排位吧，排位都是用的提莫，很舒服，七秒一个蘑菇，满地图都是蘑菇，人在上路补着兵就拿了
ad 的人头，很开心，两局都赢了，很开心，看了一眼时间，七点四十七。</p>
<p>七点四十七，去活动室看书。</p>
<p>九点半，出门健身，锻炼身体，今晚练了腹部和背部，感觉还挺舒服。</p>
<p>十点三十三，回到寝室，看了一眼面试结果，挂了。为什么挂了，因为我投的前端，刚刚学了两天的前端，感觉还行，主要是面试的姐姐说话真的是好温柔，就像是恋爱的感觉，虽然我单身了二十年，准备洗洗睡觉。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%91%B8%E9%B1%BC%E6%97%A5%E8%AE%B0%EF%BC%882%EF%BC%89/image-20210811230426475.png"
alt="image-20210811230426475" /></p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
        <tag>考研日记</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊3</title>
    <url>/2021/4026992349.html</url>
    <content><![CDATA[<p>本来呢，暑假的计划是要读习的，奈何之前的毛选一还没读完，便是摸摸索索地读了毛选一，但也读的并不是很多，最重要地实践论和矛盾论倒是还没有看。</p>
<p>这毛选读起来是真的有意思，很多东西，修修改改，放到现在，依旧是可以用的，对于中国社会各阶层地分析，将近一百年过去了，中国的阶层中，也就是文中的“地主阶级和买办阶级”换了一种形式存在了下来，有人称其为“人民富豪”之类的。</p>
<span id="more"></span>
<p>这两年，天下并不太平，工薪阶层声讨“人民富豪”之类的呼声越来越高，<code>其势如暴风骤雨，迅猛异常，无论什么大的力量都将压抑不住。他们将冲决一切束缚他们的罗网，朝着解放生产力的路上迅跑。一切帝国主义、军阀、贪官污吏、土豪劣绅，都将被他们葬入坟墓。</code>很大一部分原因出在某些人屁股背离了无产阶级的穷人，凡是反抗最力、乱子闹得最大的地方，都是那些“人民富豪”为恶最甚的地方。农民、工人的眼睛，全然没有错的。谁个劣，谁个不劣，谁个最甚，谁个稍次，谁个惩办要严，谁个处罚从轻，农民、工人都有极明白的计算，罚不当罪的极少。</p>
<p>没有调查就没有发言权，这一点也是很重要的一件事情，尤其是在目前的互联网浪潮中。大多数人上网发表观点其实是所谓的情绪的宣泄，<code>看到一点表面，一个枝节，就指手画脚地说这也不对，那也错误</code>，而非通过调查查明某些事情，得到一手真实有效的证据，然后经过深思熟虑的分析，得到某些结论，这显然是不对的。离开实际调查就要产生唯心的阶级估量和唯心的工作指导，
那么，它的结果，不是机会主义，便是盲动主义。</p>
<p>关心群众的生活问题，我觉得这一点，现在做的十分好，我是国家级贫困县出身的人，我能看到的是当地的政府工作人员对于当地的很多事情都是十分负责、尽心的。去年是扶贫大年，好多乡政府都想办法带动当地的村民去创业实现长久致富，这都是让当地人感到很开心的事情。前些日子家里发了大水，同志们都是和群众打成一片齐心抗洪的，没有一个人说不理会群众之类的，一个都没有。</p>
<p>关于毛对战争的理解，除了战争本身外，我最敬佩的便是其中对未来的指导：<code>人类社会进步到消灭了阶级，消灭了国家，到了那时，什么战争也没有了，反革命战争没有了，革命战争也没有了，非正义战争没有了，正义战争也没有了，这就是人类的永久和平的时代。我们研究革命战争的规律，出发于我们要求消灭一切战争的志愿，这是区别我们共产党人和一切剥削阶级的界线。</code>这个便是我们无产阶级要为之奋斗一生的目标。</p>
]]></content>
      <tags>
        <tag>毛选</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊11</title>
    <url>/2023/3415905598.html</url>
    <content><![CDATA[<p>今天起床就更晚了，但是昨晚却是睡得很是舒适，昨天健身到了十一点多，相信身体确实是累了，所以睡得很是香甜。</p>
<p>今天早上起来，就是在床上躺了一会儿，然后就是起来洗漱，然后就是去研究院。</p>
<p>早上回顾了昨天留下来的一些工作，发现了一些奇妙的科学现象，这很奇妙，确实是一个比较好的科学发现了。</p>
<p>中午和大家一起吃了饭，回来之后睡到了两点，下午的工作在于读论文，做分析，处理数据，也是比较快乐了。</p>
<p>下午的时候悄悄的出去海底捞，和朋友们一起，一群单身的朋友们和我这一个有女朋友的人一起吃饭，这很是奇妙。</p>
<p>临近走的时候隔壁桌开始唱起了生日歌，倒是第一次感受这样子的情景。</p>
<p>晚上回来的时候，路上不停的吹着冷风，那个时候突然觉得好疲惫，好想休息，但是回到了研究院之后却觉得又是一切都变得精神抖擞了。</p>
<p>一天啊，就这样子过去了。</p>
<p>好好吃饭，好好睡觉，好好地生活下去，绝大多数事情都能迎刃而解。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊4</title>
    <url>/2021/1842364004.html</url>
    <content><![CDATA[<p>呕吼，突然就过去了一个月，上一次更新博客还是上一次（确实）。那就回顾一下这个月做了些什么、发生了些什么吧。</p>
<p>八月底大概就是和辅导员谈话、迎新相关的事务了，考研呢也是磨磨蹭蹭的没怎么放在心上（虽然现在看来不用当时甚至都不用管考研的事情）。</p>
<span id="more"></span>
<p>当时有个很有意思的事情就是把《天龙八部》看了一遍，有一说一嗷，那是真的好看，段誉的凌波微步，语嫣的博识多闻，萧峰的英雄自我，虚竹的纯真善良，算是我看的第一部武侠片了，剧情相对来说也是很不错的，近些年的仙侠剧倒是都没看过，唯一看过的就是初中时看过的《兰陵王》了，相比较而言《天龙八部》真的是好太多了。</p>
<p>后来就步入了九月，周一周二还有一节课，占用时间不算很多，周五要去国际处值班，倒是成了我为数不多与人打交道的机会。</p>
<p>后来就是保研竞赛加分答辩了，这个真的是太搞心态了。十号去交了材料，十三号答辩，结果我忘记，十三号正好还有课，自己和自己生气索性就不去了。然后辅导员问我还去不去答辩了，毕竟能加三分来着；然后问辅导员我们专业能保研多少呢？答曰五人。我这一听啊，那就不去了呗，我这名词本来就是十名开外了，于是呢，最后便是真的没有去答辩，也没有加分。</p>
<p>第二天，保研名额出了，能保研八个人，我心态瞬间就崩了，本来没有去加分答辩就很生气，现在保研名额增加了就更生气了。那得了，终究还是变成了真正的考研人。</p>
<p>然后到了十六号，呜呼，同济的官网发布信息，考研生物信息学的话要必须考生物信息，得嘞，复习两个月的生物化学、分子生物学都用不上了，又要重新开始学习了。你说巧不巧，居然还正好距考研有百天时间。</p>
<p>也许能复习完吧，也许吧。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
        <tag>考研</tag>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊6</title>
    <url>/2022/1781028612.html</url>
    <content><![CDATA[<p>我没有那么专注了，是的。</p>
<p>最近处于一种不太专注的状态，又或许我已经处于这个状态很长时间了，但是现在才发现这件事情，感觉给自己的生活造成了有好大一部分的困扰，还是记录一下吧。</p>
<p>大概已经是一年多了，我可能处于同一时间做多件事情，我尤其清晰的记得，去年年底的时候，那时候还是台式机，我可以开着terminal炼丹，然后开着LOL，然后旁边的手机还放着柯南，键盘上面半盖着一本小说，大概是处于一心四用。当然这样子的事情还是有很多的，只是最近觉得，这样子效率很低，而且我在事后感觉不到满足感了，这个是给我很大打击的地方。</p>
<p>我尤其清晰的记得，上初中的时候，我悄悄的溜出家门，然后小跑跑到距离家有一段距离的黑网吧，然后开一台机器，开机就选择英雄联盟，丝毫没有其他选择，我很清晰的记得我的卡特琳娜开启死亡莲花拿到五杀推平对方基地之后，我长舒口气，然后习惯摇了摇脖子，才发现背后有人，转身过去才发现是我爸在那儿站着。事后问网吧老板，老板说我爸已经站了十多分钟了，但是我全然没有知觉，我的注意力十分集中，集中于那唯一的一点英雄联盟。</p>
<p>后来到了高中的做题家，我也觉得自己是十分专注的，尤其是数据物理和英语，全神贯注，老师从我身边走过并且把后一排谈恋爱的同学抓走我也没有感觉，下课了才听同桌说后排上课时候手拉手被德育室老师带走请家长了，又或是我跑步踢球的时候，我感受到的是一种全神贯注的精神。</p>
<p>我觉得大一的时候我还好，因为那个时候我的生活相当的单调，还没有那么多成年人的焦虑，顶多是隔壁ACM群看到大佬很猛拿了牌子但是我居然题目都看不懂的那种焦虑，但是相对还好。</p>
<p>大二的时候也还行，但是我觉得毛病就是从那个时候开始的，那时候我开始分心了，在同学们都在好好学习生物化学和分子生物学的时候，我一个劲儿的在搞机器学习深度学习之类的，然后后来又开始做开发，前端后端为主。然后后来真的去了校队做开发，我觉得那个时候应该是一个开始吧。</p>
<p>大概的一个表现就是，手头写着写着代码，然后突然拿起手机刷一会儿群聊里面的信息，看看各位大佬吹牛逼，唠闲嗑，逛逛知乎，刷刷B站，然后被队长看到，然后被骂一顿，然后把手机放下继续写码，虽然后来开发的软件拿了金奖还拿了最佳软件提名，但是后来我似乎变得更加不再专注了。</p>
<p>大概后来就是考研了，考研的时候也不专注，本来时间也不多，错过了保研，然后觉得自己考研也是考生物相关的，觉得自己并不是那么喜欢生物，随机开始去各个厂子面试，也拿到了很不错的offer，多的三四十万，少的一二十万，最终真的拿到offer之后，才回去考研了。</p>
<p>真正留给考研的时间也不到一个月，但是即便这样也是早上十点多去，然后中午回去睡个午觉到三四点，然后去图书馆看书到五六点，然后吃饭罢了，然后晚上再看到十点左右就回去了，当然，在图书馆也不完全是看书，也会打些手游，看看图书馆的美女，发现图书馆的美女确实很多，也确实看了挺长时间就是了，所以导致专业课考的十分烂，我甚至都没有把书给看完，虽然是很薄的一本书，但是确实没有看完，所幸凭借着自己的计算机相关的知识调剂去了遗传学读书。</p>
<p>大概是上周吧，有那么一个时刻，我电脑挂着网课，iPad开着C++阅读，手机开着B站，键盘上放着《遗传学》，手里拿着手柄看着switch打塞尔达，网课没有听进去，C++特性没看进去，B站的乐子我也没有享受到，本来要复习的《遗传学》也是化成泡沫，更可气的是，手里塞尔达的神庙试炼也没有通过。我把心分拆成多个碎片，终于是一事无成。</p>
<p>我觉得我的欲望太大了，或者又不是很大，只是我一和别人对比就会觉得自己什么也不会。有人炼丹还是研一刚刚开学就发了CNS，但是我的炼丹水平远远没有那么高；有人弹的一手好琴，我当年学的钢琴现在几乎全部忘记了；有人会跳舞，而且也是男孩子，而且跳的特别好，但是我不行，我也没有坚持；有的人很会打篮球，我也不会，想学，却觉得自己不会打然后再学也是耽误别人；羽毛球也没有室友打得好；游泳以前还很好，但是得了肺炎之后明显觉得体力下降，现在也只是游个半场；晚上想要跑步却又想到自己要增重，犹犹豫豫；每天给自己订了背单词的KPI，却总是不能早起然后拖到晚上。还有好多其他的事情，觉得自己真的是十分的废物。</p>
<p>牢骚就发到现在，现在，开始看C++，然后背单词，然后看书，然后跑步，然后睡觉，就这样吧，再过一段时间我再记录些。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>杂聊</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊5</title>
    <url>/2022/4079027902.html</url>
    <content><![CDATA[<p>又是一个月过去，十一仿佛就在昨日，然后劈里啪啦的，就跑走了三个星期，只能说感受不到自己做了什么，学到了什么，所以觉得落差感比较大。而且博客也是很久没写了，进行稍微长一点的叙述就会显得我的逻辑比较混乱。</p>
<p>今天应该是还有很多的ddl的，比如刚刚开辟的Python_70_Project，想做一个稍微大一些的Python导学项目，然后大概也是每天写个几十行那个样子；比如还要重温C++，这是很久之前学习的了，现在写起来也是逐渐手生，根本写不下去，于是乎重新打开黑马，又开始无聊又有趣的学习之路，希望之后能把硬件做起来吧，要学习一下老学长，成为一名稍微全栈一些的孩子。</p>
<p>目前上课的状态大概就是，老师讲自己领域内最为前言的工作，讲他们自己做的实验的思路、流程，以及相关的一些延申，这两周大概也有课陆续要结课了，大概就是政治课和一门选修课，政治课的pre文稿刚刚交了上去，这门选修课大概就是临时做一个数模之类的。</p>
<p>生物统计学的作业到现在还没做，明明26号就是ddl了，居然自己还在玩。前些日子入手了一只switch，到现在已经玩了快三十个小时了，平均每天三小时吧大概，按照晚上十点下课，到宿舍十点半，开始玩，接着到一点半，然后再收拾收拾睡觉觉就是两点了，虽然作业还没做，明天的课程还没有预习，今天的课程也没有复习，但是还是要睡觉觉，
毕竟第二天还有早八，刚刚打开了B站，挺多UP主也都更新了，自己还没看，然后十二点多开始看，看到了现在，本来打算今天下午做几道英语题，结果时间又被荒废掉了，一会儿还约了人去打羽毛球，属于是最佳拖延王了。</p>
<p>文献倒是看了一些，但是这一周进展颇为缓慢，还是要抓紧时间干活儿啊，时间不等人啊。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊7</title>
    <url>/2023/2239161542.html</url>
    <content><![CDATA[<p>又是好久没有写博客了，应该还是写一写记录一下我的生活的，我的记忆感觉比以前差了很多，记录下来总归是好的事情，也许我还能再回顾一下，总觉得要把自己的博客捋的清晰一下，在生活的栏目里面要少讲一些科研或是正经的工作故事，这里就是纯粹的、枯燥的、无聊的、单调的我的生活故事。</p>
<p>就先从华大九九健康节讲一下吧。九九健康，大概是华大在每年九月九日时间点附近组织一些秋游活动，大都是令人感到快乐的户外郊游，我应该还是比较习惯到处走走的，尤其还是杭州这样子的湿地城市，在西湖景区里面到处都是可以走一走的，而且有很多的人文景观，我本身也是也是走过了很多次了。</p>
<p>徒步是这周五的事情了，其实是九月八号的事情，大概是八点到研究院楼下，然后乘着大巴到了九溪。九九徒步，从这里开始。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/19959205872843570e9ce6a468cd114.jpg"
alt="九溪合照" /></p>
<p>从九溪一直往里面走，很快就能走到九溪烟树，这还没到农历的八月份，但是已经有桂花的香味了，沿路也都是桂花香，有一些桂花树上面还有一些桂花，不过还是比较少的，大概是因为还没有到桂花的季节吧。沿路徒步大都是一些年轻情侣或是白发苍苍的老年情侣，这一带也确实是约会的好地方，恬静淡然，也无人吵闹，有山有水却就在市中心，这样的地方确实是很难得的。</p>
<p>再往前走是九溪十八涧，这里道路两旁都是溪水，其实是很好的玩水的地方，想起来了小时候在外婆家门口就有这样子的小河，那时候我经常下河抓螃蟹，抓鱼，洗澡（这个需要一个能淹到我一半的地方），拿着水枪，几个玩伴，一玩能玩一下午，真想下去玩玩水，下次一定抽出一个专门的时间来玩水，这次就先赶路！</p>
<p>再往前面走便是杨梅岭，在这个时间点，杨梅岭也没有梅子了，倒是较为单调的绿绿的一大片，这边倒是没有什么特别注意到的点，从杨梅林左转，一路向前走，就要慢慢走到龙井村了，其实从杨梅岭走出来，就能看到路两旁的密密匝匝的茶树林，我们还在这里合影的一下。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/6e720fabddaabfd86e846fd05f173ef.jpg"
alt="从杨梅岭出来的合影" /></p>
<p>龙井村这里有一个大大的牌匾，龙井村的牌匾，很有辨识度 <img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/d6f82519ebde13aa2af073f2865680c.jpg"
alt="龙井村的牌匾" /></p>
<p>进去龙井村之后周围都是一些轻奢的茶馆，茶室，茶楼，茶庄，茶店，茶铺等等之类的实物，布置的还是蛮不错的，不时有村民出来看看我们，也没有什么揽客，还是蛮舒服的，这里有一棵很漂亮的树，起初我还以为是桂花树，后面发现这是棵黄花栾树，刘老师恰好在前面走着，给他拍了一张，刘老师大概比我大上十二岁，这次徒步和我们，买桂花同载酒，正还是，少年游。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/0adf1aea1c43d89959804d5ab4e8e2e.jpg"
alt="黄花栾树和刘老师" /></p>
<p>在龙井村里面有十里锒铛的入口。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/9fa9be257b019a4e1dab4d92b83a105.jpg"
alt="9fa9be257b019a4e1dab4d92b83a105" /></p>
<p>十里锒铛入口看着小小的一个，后面发现这里才是最累的一段路，台阶很急很陡很多很密集，但是这段路是真的很美，一路都是茶树，沿着茶树一直到最最上面的五云山，一路山走走停停，吃了苹果吃了番茄吃了黄瓜，是快乐的事情，这时候同行的只有刘老师和另外一个细胞的同事，我们三个人了，属于是走到了一百多人的最前排了。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/6c4ee518e29664fc727e4c317e75368.jpg"
alt="龙井山景" /> <img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/d5b2bdc7f1b7d08dbd559493ccf5091.jpg"
alt="山路上的狗狗" /></p>
<p>沿着山岭一路走大概两三公里，便是到达了五云寺，这里有个五福殿，下次过年就直接来这边求一下五福了。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/9533a1b85e6ec56eded06a346e86e3f.jpg"
alt="五福殿和门前的一对老人" /></p>
<p>再然后就是一路的下山之路，到了山脚下看到一个女孩在池塘边画画，正好有一束光穿过竹林打在了她的肩上，是很美的场景。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/81e92871b1417c03e64a02705932a99.jpg"
alt="阳光中花花的女孩儿" /></p>
<p>之后便是一路走，终于遇到了一个店，可以买个冰淇淋快乐一下了，但是我比较渴就只拿了水，也可能是因为我刚刚喝了好大一罐冰红茶。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A7/16b694e9e697f270083de2f0f367715.jpg"
alt="我、细胞同学和刘老师" /></p>
<p>之后再走了大概两三公里，终于回到了九溪，全程呢，大概就此结束咯，有时间也许可以写写这两天的故事，写文字还是需要练习的，不然容易手生。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>爬行动物中由单细胞转录组揭示的大脑皮层，海马和皮层细胞类型的进化</title>
    <url>/2023/1344738173.html</url>
    <content><![CDATA[<p>这是读的第一篇的关于不同物种脑比较的文章，进行了较为精细的阅读，故作此记录。<a
href="https://pubmed.ncbi.nlm.nih.gov/29724907/">原文链接</a></p>
<h2 id="摘要">摘要</h2>
<p>哺乳动物皮层中的计算通过谷氨酸和γ氨基丁酸释放神经元形成的特定回路区域进行的。我们在这里探究了这些神经元，这些区域是如何在羊膜动物中进化的。我们使用了大规模的单细胞
mRNA
测序构建了两种爬行动物的大脑皮层的基因表达图谱。爬行动物皮层中谷氨酸神经元转录特征表明哺乳动物新皮质层是由新的细胞类型通过祖先的基因调控程序分化生成的。相反的，爬行动物的
GABAergic
神经元的分化表明在哺乳动物中已知的中间神经元类型早已存在于羊膜动物的共同祖先中。</p>
<h2 id="开篇">开篇</h2>
<p>大约3.2亿年前，羊膜类脊椎动物(哺乳动物、爬行动物和鸟类)起源于一个共同的祖先。在所有发育中的羊膜动物中，端脑背侧（dorsal
telencephalon）或大脑皮层有着相同的信号分子，并被分为同源的胚胎区域。然而在成年羊膜动物脑区中，来自这些同源皮层区域的结构具有不同的形态和连接性。例如，六层大脑皮层只存在于哺乳动物中，背侧脑室脊(DVR)只在鸟类和爬行动物中发现。海马区可能是最保守的大脑皮层区域，即使在海马区，也不确定哺乳动物中已知的所有亚区(例如齿状回)，是否在非哺乳动物中也存在。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306203620.png"
alt="20230306203620" /></p>
<p>基因表达数据可以帮助重建大脑区域和细胞类型的进化。在这里，我们使用单细胞转录组学来研究羊膜动物脑中神经元多样性的进化。因为通过转录组学定义的细胞类型与通过形态学、生理学和连接性定义的细胞类型相匹配，单细胞mRNA测序不仅可以用于细胞类型发现和还可以用于跨物种比较。爬行动物不同于鸟类，有分层的大脑皮层，本文聚焦于爬行动物，并提出了以下问题：(1)我们是否能够识别爬行动物和哺乳动物大脑皮层区域之间的分子相似性和同源性？(2)是否存在与哺乳动物海马神经元同源的哺乳动物皮层神经元？(3)我们能把爬行动物的三层cortex和哺乳动物的六层
neocortex
联系起来吗？(4)哺乳动物释放γ-氨基丁酸的中间神经元类型是否也存在于爬行动物大脑皮层中。</p>
<h2
id="爬行动物大脑皮层的神经元和神经胶质细胞">爬行动物大脑皮层的神经元和神经胶质细胞</h2>
<p>使用Drop-seq，我们获得了从海龟和蜥蜴物种的大脑皮层取样的成体细胞类型的全面、无偏见的分类(在图S1和S2以及表S1和S2中的解剖和测序统计)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306213331.png"
alt="20230306213331" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306213512.png"
alt="20230306213512" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306213545.png"
alt="20230306213545" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306214105.png"
alt="20230306214105" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306213404.png"
alt="20230306213404" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306213432.png"
alt="20230306213432" /></p>
<p>在质量过滤后，我们使用了来自18，828只海龟和4187只蜥蜴细胞的转录物的无监督的基于图的聚类(每个细胞的中值分别为2731.5和1918个转录物)，并鉴定了神经元和非神经元细胞的一级聚类。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306214243.png"
alt="20230306214243" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306214601.png"
alt="20230306214601" /></p>
<p>在非神经元细胞中，我们发现了表达哺乳动物神经胶质细胞原型标记物的簇：成熟少突胶质细胞及其前体、室管膜胶质细胞和小胶质细胞。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306214615.png"
alt="20230306214615" /></p>
<p>哺乳动物星形胶质细胞室管膜胶质细胞共表达(GFAP)、成体干细胞(SOX9)和室管膜细胞(FOXJ1)的标记，表明这些细胞类型具有共同的进化起源(图S4，A至C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306215250.png"
alt="20230306215250" /></p>
<p>爬行动物神经元簇包括囊泡谷氨酸转运体1型(VGLUT1+),谷氨酸能兴奋性神经元、谷氨酸脱羧酶1和2(gaD1
+
gaD2+),γ-氨基丁酸能抑制性中间神经元和神经祖细胞(图1，A至D)，与爬行动物成体神经发生的存在一致。</p>
<p>为了比较海龟、蜥蜴和小鼠神经元和非神经元细胞的转录组，我们选择了在这些细胞类型中差异表达的一对一的同源物，定义了每个簇中每个基因的特异性得分，并计算了成对的秩相关关系。该分析支持海龟、蜥蜴和小鼠的主要神经元和非神经元细胞类别之间的一致性。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306215934.png"
alt="20230306215934" /></p>
<p>乌龟和蜥蜴神经元的亚聚类揭示了兴奋性谷氨酸能和抑制性γ-氨基丁酸能神经元类型之间和之内的更细微的区别。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306220136.png"
alt="20230306220136" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306220338.png"
alt="20230306220338" /></p>
<p>从这些神经元数据集中，我们选择差异表达的基因作为组织学验证和与哺乳动物细胞类型进行无偏比较的标记。我们专注于海龟的数据，并用蜥蜴的数据来佐证。</p>
<h2
id="谷氨酸能神经元的空间分离爬行动物大脑皮层的分子图谱">谷氨酸能神经元的空间分离:爬行动物大脑皮层的分子图谱</h2>
<p>我们的解剖涵盖了爬行动物大脑皮层的多个区域，这些区域可能包含不同种类的谷氨酸能神经元。为了确定我们的海龟谷氨酸能细胞簇的解剖位置，我们在数据集中选择了高度可变的基因，这些基因在一些簇中表达，但在另一些簇中没有检测到。这些标记在大脑皮层的不同区域表达。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306220919.png"
alt="20230306220919" /></p>
<p>标记的组合表达被定义为“超簇”，也被视为t分布随机相邻嵌入(tSNE)图中相邻簇的分组(图2，A至B，和图S6A比较图1E和图2B)，</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306221048.png"
alt="20230306221048" /></p>
<p>与更高级聚类分析和我们的组织切片一致(图S7和S8D以及表S1和S2)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306223555.png"
alt="20230306223555" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306223614.png"
alt="20230306223614" /></p>
<p>这些超簇对应于定义的解剖区域:内侧皮层(medial
cortex)，背内侧皮层(dorsal medial cortex)、前背侧皮层(anterior dorsal
cortex)和后背侧皮层(posterior dorsal cortex)、大脑皮层增厚区(the pallial
thickending)、前外侧皮层(anterior lateral cortex)和后外侧皮层(posterior
lateral cortex)以及前DVR(anterior DVR)和后DVR(posterior DVR)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307103010.png"
alt="20230307103010" /></p>
<p>簇内细胞类型的相关性大于簇之间的细胞类型相关性。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307104158.png"
alt="20230307104158" /></p>
<p>加权基因相关网络分析(WGCNA，见方法)表明每个区域的独特基因特征来自基因模块的不同组合(图2C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307104648.png"
alt="20230307104648" /></p>
<p>我们还将谷氨酸能簇与蜥蜴的解剖学定义的大脑皮层区域相关联(图S9)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307105831.png"
alt="20230307105831" /></p>
<p>蜥蜴和海龟中的相应区域具有不同的相对大小(例如，蜥蜴前背皮层较小)，但通过表达相同的发育转录因子如ZBTB20、SATB1、DACH2和ETV1
(ER81)而清晰地描绘出来(图
2D)。这些数据确定了成年爬行动物大脑皮层的分子分区。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307110450.png"
alt="20230307110450" /></p>
<p>在龟和蜥蜴中标记相应大脑皮层区域的转录因子的表达。</p>
<p>爬行动物和哺乳动物大脑皮层衍生物之间的假定同源性是有争议的。这场争论的中心是前DVR，它是鸟类和爬行动物腹侧大脑皮层的衍生物之一。该区域被认为是哺乳动物腹侧大脑皮层衍生物（皮层、内环形核和杏仁体）或大脑皮层部分的同源物。后一种假设表明了新皮层的双重进化起源，要么是单独的区域——内侧和外侧新皮层分别与爬行动物背侧皮层和DVR同源——要么是混合的细胞类型，其中单独的新皮层与爬行动物背侧皮层或DVR同源。我们使用了一个人类微型芯片数据集作为参考，将海龟超簇于哺乳类大脑皮层衍生物做了比较。我们的分析使用了所有的差异表达基因。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306224417.png"
alt="20230306224417" /></p>
<p>揭示了内侧和背内侧皮层于人类海马体的相似性，支持了先前的假设。在哺乳动物中，前背侧皮层和前DVR区在转录因子表达上的不同，发现在新皮层和大脑皮层杏仁核也是这样。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306224953.png"
alt="20230306224953" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306225427.png"
alt="20230306225427" /></p>
<p>在哺乳动物大脑皮层杏仁核子分区中，只有侧杏仁核和前DVR区相关。我们的结果表明:(1)转录因子的不同组合可能调节前背皮层和前DVR中“新皮层”效应基因的表达；(
2)转录因子的表达反映了大脑皮层神经元的发育和进化历史。由此可以进一步提出，爬行动物前背皮层和哺乳动物新皮层作为背侧大脑皮层衍生物是同源的，爬行动物DVR和哺乳动物大脑皮层杏仁核作为腹侧大脑皮层衍生物是同源的。在爬行动物中，感觉受体前DVR的扩张导致了专门处理不同感觉形式的神经元类型的出现，可识别为独立的分子、解剖和功能簇(图S9和S10)
(17)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306231527.png"
alt="20230306231527" /></p>
<p>根据这一假说，爬行动物的前DVR和哺乳动物的新大脑皮层通过趋同进化获得了相似的效应基因表达。</p>
<h2
id="海马神经元类型和区域组织的保守性">海马神经元类型和区域组织的保守性</h2>
<p>解剖学和发育的证据表明爬行动物的最内侧皮层与哺乳动物的海马是同源的。与此相似，乌龟和蜥蜴的内侧皮层表达哺乳动物泛海马转录因子ZBTB20(图3A和图S11)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306231721.png"
alt="20230306231721" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306231804.png"
alt="20230306231804" /></p>
<p>爬行动物和鸟类中是否存在单独的海马亚区[齿状回(DG)、海马角(CA)3、CA2和CA1]尚不清楚。发育证据表明一些人将哺乳动物DG及其苔藓细胞和颗粒细胞描述为哺乳动物的新的东西。爬行动物ZBTB20阳性簇可通过哺乳动物DG或CA转录因子的表达进一步区分:在龟中，PROX1和MEF2C(指定小鼠DG颗粒细胞)标记内侧皮层，ETV1、MEIS2和LMO4
(CA)标记背内侧皮层(图3A)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306233000.png"
alt="20230306233000" /></p>
<p>这些基因在龟和蜥蜴中皮层相邻区域的表达(图S11)表明爬行动物中存在DG-和CA-样神经元类型。细胞型转录组的无偏分析进一步支持了这一观点。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306232518.png"
alt="20230306232518" /></p>
<p>使用WGCNA来鉴定和比较基因模块，我们发现小鼠DG和海龟内侧皮层模块之间以及小鼠CA和龟背内侧皮质模块之间有统计学上显著的重叠(图S12)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230306233432.png"
alt="20230306233432" /></p>
<p>海龟(列)和小鼠(行)海马基因模块的重叠。该表显示了重叠基因的数量和重叠的p值(斜体)。括号中为每个模块中的基因数。</p>
<p>小鼠DG和海龟内侧皮层模块共享编码K例子通道亚单位或相关蛋白(KCNG1、KCNA1和KCNIP4)的基因，这可能是电生理学相似性的原因。其他共享基因包括参与DG-CA3突触形成的钙粘蛋白CDH8，以及突触发生的颗粒细胞特异性调节因子和AMPA受体介导的突触传递LRRTM4和CNIH3(图S12)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307101619.png"
alt="20230307101619" /></p>
<p>海龟和老鼠基因网络结合的图解。节点代表基因，根据(C)进行颜色编码；连线代表基因与基因之间的相关性。</p>
<p>因此，DG颗粒细胞，包括其膜和突触生理学方面，在哺乳动物和爬行动物中是保守的。[没有苔藓细胞标记物(21)在海龟内侧皮质中具有细胞类型特异性表达。]</p>
<p>接下来，我们使用在ZBTB20+簇中差异表达的一对一直向同源物计算成对簇相关性。这揭示了ZBTB20
+ ETV1
+细胞之间的进一步异质性，其中海龟背内侧皮层簇显示出与小鼠CA3或CA1的最佳相互相关性。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307102606.png"
alt="20230307102606" /></p>
<p>哺乳动物CA3或CA1标记物在这些海龟群中差异表达(图3C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307112303.png"
alt="20230307112303" /></p>
<p>CA3-和CA1-样细胞占据相邻的位置（CA3-样细胞最接近中皮层(DG)）并形成形态学上不同的细胞板(图3A和图S11)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307112546.png"
alt="20230307112546" /></p>
<p>显示蜥蜴中泛海马标记ZBTB20、DG标记PROX1、CA标记ETV1和CA3标记COCH表达的原位杂交。</p>
<p>我们没有发现爬行动物CA2细胞类型的证据(图3B和图S11B)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307112455.png"
alt="20230307112455" /></p>
<p>总之，爬行动物海马体可以被细分为相邻的区域，类似于哺乳动物的DG、CA3和CA1区域。这些细胞发育起源于中央大脑皮层,它们相似的内外侧分布、连接、生物物理特性和分子同一性(本研究)支持这样的假设，即哺乳动物样海马区域已经作为相邻区域存在于所有羊膜动物的祖先中。哺乳动物海体的结构及其标志性的折叠，可能是由于哺乳动物谱系中新皮层的显著扩大造成的。</p>
<h2
id="海龟背皮层新皮层上层和深层的转录组特征">海龟背皮层新皮层上层和深层的转录组特征</h2>
<p>哺乳动物的六层新皮层是从最开始的羊膜动物的的可能存在三层原始皮层进化而来的。哺乳动物新皮层和爬行动物皮层中的神经元和层之间的关系是什么？早期的研究表明，L2/3和L4(较上面的层，UL)神经元是哺乳动物新生的；因此爬行动物的锥体神经元要与哺乳动物早期出生的L5和L6(深层，DL)神经元相比较。但是，连接性意味着爬行动物的皮层应该包含L4(即丘脑受体)和L5(离皮质细胞)两种类型，可以推出这些类型不是占据不同的层，而是占据海龟皮层的相邻区域:一个在前背皮层(RORB+
L4样神经元)，一个在后背皮层(ETV1 + L5样神经元)。</p>
<p>我们的数据表明，前背皮层是唯一可与哺乳动物新皮层相比的区域(图2)。我们检测了原型哺乳动物层标记物(7，25，26)在六个海龟前背皮层谷氨酸能簇(e07，e08，e13至e16)中的表达。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307120900.png"
alt="20230307120900" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307121131.png"
alt="20230307121131" /></p>
<p>海龟谷氨酸能超簇和人类大脑皮层区域的成对相关性，由海龟或人类中差异表达的所有基因(E)或转录因子(F)计算得出。在哺乳动物中，只有扣带回(CgG)、长岛回(LIG)和短岛回(SIG)的一些部分被归类为新皮层。圆点表示统计上显著的cor关系。MC，内侧皮质；DMC，背内侧皮质；pDC和aDC，后背皮质和前背皮质；PT，大脑皮层增厚；aLC和pLC，前外侧皮质和后外侧皮质；aDVR和pDVR，前、后背侧脑室嵴；DG，齿状回；钙，氨角；亚托，下托；海马旁回；OL，枕叶；TL，颞叶；PL，顶叶；FL，额叶；Cl，claustrumPir，梨状皮质；LA，外侧杏仁核；ATZ，杏仁核-海马过渡带；BLA，基底外侧杏仁核；BMA，基底内侧杏仁核；昏迷，皮质内侧杏仁核。</p>
<p>这些细胞表达了几种哺乳动物UL和DL标记，但是这些基因通常在相同的簇中共表达(图4A和图S13A)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307121534.png"
alt="20230307121534" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307121553.png"
alt="20230307121553" /></p>
<p>当我们专注于在新皮层中建立和维持细胞身份的转录因子时，我们观察到，在海龟中，这些基因以组合形式表达，且从未在分化的哺乳动物皮质神经元中观察到。例如，所有海龟前背皮质细胞类型共表达富含哺乳动物L2/3、L4和L5a的大脑内神经元的基因，包括SATB2、RORB和RFX3，以及指定L5b和L6离皮质投射神经元的基因，如BCL11B
(CTIP2)、TBR1和SOX5(除e13外的所有簇)(25)(图4，A和B)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307122002.png"
alt="20230307122002" /></p>
<p>在小鼠新皮层中，已知这些基因中的一些在有丝分裂后细胞中抑制彼此的表达(例如，Satb2和Bcl11bTbr1和Bcl11b)
( 26)</p>
<p>将比较分析扩展到所有差异表达的基因，揭示了前背皮质细胞类型与哺乳动物UL
(e13至e16)或DL(e07和e08)神经元相关，独立于用于比较的新皮质区(图4C和图S14，A至C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307122414.png"
alt="20230307122414" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307122531.png"
alt="20230307122531" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307122549.png"
alt="20230307122549" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307122606.png"
alt="20230307122606" /></p>
<p>基因网络分析证实了这一趋势(图S13，B和C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307164641.png"
alt="20230307164641" /></p>
<p>相比之下，前DVR簇不能被分组为UL类和DL类(图S14，D至F)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307164947.png"
alt="20230307164947" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307165003.png"
alt="20230307165003" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307165012.png"
alt="20230307165012" /></p>
<p>正如测序数据所预期的，原位杂交(ISHs)显示哺乳动物UL和DL转录因子在整个海龟前背皮质中共表达(图4B)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307165444.png"
alt="20230307165444" /></p>
<p>单个UL样神经元类型(e13至e16)沿前背皮质的内外侧和喙尾轴有差异地分布，与已知的解剖亚类相匹配(图S15)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307165551.png"
alt="20230307165551" /></p>
<p>相比之下，通过甲状旁腺激素样激素(PTHLH)表达识别的DL样细胞e07和e08似乎散布在整个前背皮质。在吻侧背侧皮质中，DL样细胞局限于L2的表面部分(图。4D；图S15、C至E中的附加标记)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307165809.png"
alt="20230307165809" /></p>
<p>左图，用PTHLH(绿色)标记的龟DL样细胞，优先在浅表L2中发现(蓝色，4ʹ，6-二脒基-2-苯基吲哚(DAPI))。中图，SATB1(富含UL样细胞，品红色)和ETV1
(e07
DL样细胞，绿色)的双ISH，显示了这些细胞的相对位置。右图是总结UL样和DL样谷氨酸能神经元分布的示意图(与在哺乳动物中观察到的排列相反)。</p>
<p>因此，这些标记确定了海龟L2的两个不同亚层:主要含有DL样神经元的表层L2a和主要含有UL样神经元的深层L2b。从丘脑的逆行追踪标记L2a细胞，表明这些神经元或它们的子集是离皮质的并投射到丘脑。</p>
<p>总之，我们的转录组范围的比较揭示了在海龟前背皮层不同的神经元类型中存在整体的UL和DL样的遗传标记，但是在目前的分辨率下，不支持海龟谷氨酸能类型和个体新皮质层之间的同源性。</p>
<p>在爬行动物和哺乳动物中，UL和DL基因特征可能是从缺乏明显的UL和DL样神经元的原始羊膜中独立进化而来的:具有相似特征(如输入输出连接性)的神经元将通过趋同进化获得相似基因组的表达。或者可能是UL样和DL样神经元可能已经存在于羊膜干细胞的背皮质中。如果是真的，形成哺乳动物新大脑皮层的六层的出现将是一个新奇的事物，通过对指定祖先UL和DL样类型的遗传程序的广泛修改，使得新锥体细胞类型的进化。</p>
<h2
id="羊膜动物γ-氨基丁酸能中间神经元的保守性">羊膜动物γ-氨基丁酸能中间神经元的保守性</h2>
<p>哺乳动物新皮层中的γ-氨基丁酸能中间神经元是多样的，并参与不同的回路基序和计算。但是我们却对哺乳动物以外的皮质中间神经元知之甚少。在包括龟在内的几种脊椎动物中，γ-氨基丁酸能中间神经元在保守的小脑延髓下区域产生——在内侧、尾侧和外侧神经节隆起(MGE、CGE和LGE)——并迁移到大脑皮层。然而，爬行动物被认为缺乏一些哺乳动物γ-氨基丁酸能类型，如皮质血管活性肠肽(VIP)中间神经元。我们研究了海龟γ-氨基丁酸能簇(i01至i18)和已知定义哺乳动物γ-氨基丁酸能类型的转录因子的表达。从这些基因的组合表达中，我们鉴定了推定的MGE衍生的(i07至i13:
LHX6+，SOX6+和SATB1+)，CGE衍生的(i14至i18:
NPAS1+，SP8+，NR2E1+和PROX1+)和LGE衍生的(i01和i04至i06:meis 2+zi
C1-和在子集TSHZ1+ SIX3+和/或PBX3+)簇(图5A)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307171703.png"
alt="20230307171703" /></p>
<p>在蜥蜴中也可以鉴定出相应的MGE、CGE和LGE衍生的神经元(图S16，A至C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307171740.png"
alt="20230307171740" /></p>
<p>剩余的γ-氨基丁酸能簇对应于从邻近的隔膜(i02和i03)和纹状体(i04)分离的细胞。染色显示在杏仁核(i04和i05)和嗅球(i01和i02)中存在LGE和隔源性中间神经元，表明在爬行动物和哺乳动物中LGE和隔源性γ-氨基丁酸能神经元具有相似的分子特性和迁移轨迹(图5A和图S16，D和E)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307173034.png"
alt="20230307173034" /></p>
<p>海龟MGE和CGE衍生的中间神经元可以进一步细分为生长抑素(“SST”)、小清蛋白样(“PV样”)、HTR3A
Reln和“HTR3A
VIP样”类，与哺乳动物皮质γ-氨基丁酸能中间神经元的分类相匹配(7，30)(图5A)。成对聚类相关性(图5B)和基因网络分析(图S17)进一步支持PV-like、SST和HTR3A中间神经元类在爬行动物和哺乳动物中保守的结论。（注意，转录组学鉴定VIP和PV样中间神经元，即使VIP和PVALB在这些细胞中不可靠表达(图5A)。）</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307173220.png"
alt="20230307173220" /></p>
<p>在海龟和蜥蜴中，MGE和CGE衍生的中间神经元的标记物在分布于包括背皮层在内的整个大脑皮层的细胞中表达(图5C)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307173820.png"
alt="20230307173820" /></p>
<p>在哺乳动物中，MGE和CGE衍生的中间神经元在皮质层中具有不同的密度，表达ADARB2
(HTR3A)和SST (SST)的神经元分别优先在浅背皮质和深背皮质中发现；NDNF
(HTR3A
Reln)在罕见的背侧皮质软膜下细胞中表达，使人想起哺乳动物L1神经胶质细胞(图5，D和E)。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/Evolution_of_pallium_hippocampus_and_cortical_cell_types/20230307173848.png"
alt="20230307173848" /></p>
<p>因为在哺乳动物和爬行动物中存在相同种类的皮质γ-氨基丁酸能神经元，它们可能存在于它们的羊膜祖先中。我们的分析没有在更精细的水平上发现相似性:例如，我们没有发现与哺乳动物Martinotti或篮子细胞相对应的海龟群。这表明，在哺乳动物和爬行动物中，中间神经元的物种特异性亚型独立地从祖先的PV样、SST和HTR3A(可能是VIP样和Reln)细胞类别中分化出来。</p>
<h2 id="讨论">讨论</h2>
<p>我们的单细胞数据为羊膜上皮中保守区域和细胞类型的存在提供了分子支持。哺乳动物新大脑皮层、“核心”海马(具有齿状和CA区域)、皮层和大脑皮层杏仁核的同源物可能已经存在于干细胞羊膜动物中。具有UL或DL样遗传标记的谷氨酸能神经元存在于海龟前背皮层中，但是我们的数据不支持这些细胞类型和单个哺乳动物层类型的一对一同源性。相反，皮质γ-氨基丁酸能中间神经元类(SST、PV样和HTR3A)是羊膜动物的祖先。</p>
<p>我们的分析表明，哺乳动物和爬行动物的大脑通过不同大脑皮层区域的扩展和独立进化而多样化，并且这些扩展与新神经元类型的进化相一致。例如，大型爬行动物的前DVR(腹侧大脑皮层)由专门处理视觉、听觉或躯体感觉刺激的空间分离的神经元类型组成。同样的感觉通路也到达哺乳动物的腹侧大脑皮层(例如，外侧杏仁核)，但不被那里的专用神经元群处理。这表明DVR神经元和回路的形成是爬行动物和鸟类特有的。</p>
<p>背侧大脑皮层的情况正好相反。哺乳动物的新皮层是通过一个小的背侧皮层区域的扩张而出现的，与爬行动物的前背侧皮层和鸟类的前背侧皮层同源。这可能与UL样和DL样神经元的多样化产生新的谷氨酸能细胞类型相一致。具有不同身份的神经元的连续产生是哺乳动物和爬行动物背侧大脑皮层祖细胞的保守特征,并且皮质丘脑神经元是小鼠和海龟中早期出生的神经元。</p>
<p>海龟和哺乳动物的神经元出生顺序是相同的(DL在先，UL在后)，海龟DL样神经元的表面位置与皮质发生的反转一致(爬行动物由外向内，哺乳动物由内向外)。最后，在哺乳动物中，决定UL和DL命运的转录因子在祖细胞中共表达，并且只有在细胞周期结束后才获得相互排斥的表达。哺乳动物UL和DL命运说明符在海龟神经元中的共表达表明，皮质层可能是从这些转录因子之间的调节相互作用的重塑中进化而来的，可能是通过新的抑制相互作用。神经发生的时间延伸可能使最初重叠的基因表达程序分离，从而使祖先UL和DL类型多样化。</p>
<p>这些海龟和蜥蜴大脑皮层的分子图谱为未来的功能研究提供了一个框架。基因表达程序的异同如何告知我们大脑功能的进化？例如，爬行动物皮层的大部分在分子上与核心哺乳动物海马体相关。爬行动物的损伤实验表明内侧皮质在导航中的作用，但目前还没有从这些区域获得慢性电生理数据。需要将我们的分子图谱与示踪、电子显微镜和电生理学研究相结合，以了解基因表达程序是否以及如何与连通性和功能的进化相关联。</p>
<p>突触组织的一般原理可以从三层和六层皮层的比较中推断出来。这些相似之处是巧合还是反映了祖先的皮层回路？在哺乳动物中，局部回路基序涉及具有不同分子和功能特征的γ-氨基丁酸能类型。我们的研究表明，中间神经元的多样性是哺乳动物和爬行动物的祖先。中间神经元类在至少3.2亿年间的保守性表明，不仅存在中间神经元多样性的选择压力，而且中间神经元多样性本身可能在原始皮质回路内的干细胞脊椎动物中进化而来。或者，中间神经元类的保守性可能仅仅是由于球下模式的发育限制。对爬行动物大脑皮层中回路基序的分子和功能的联合研究可能有助于理解脊椎动物大脑皮层的祖先设计和计算逻辑。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>单细胞</tag>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊8</title>
    <url>/2023/2375055875.html</url>
    <content><![CDATA[<p>以后尽量是可以做到每天的快乐生活当天记录下来，我的记忆会慢慢遗忘掉一些内容，记录下来或许能够让我减少遗忘。</p>
<p>今天是周日，所以又是我外出走走的日子，今天是和朋友们一起去西湖边的吴山景区附近走走，爬爬山。是要早起的，但是也并没起的很早，只得是草草吃了饭，甚至还是在等地铁的时候草草吃了两个饼，但是算得上给我提供能量了。</p>
<p>和朋友们约定好的集合地点是吴山广场，但我却稍稍有些迟到了，这是我的问题，只得是一路跟随着朋友们留下的脚印，知道江湖汇观亭，终于是和朋友们相会了，之后我们从汇观亭下山，到了烈士陵园附近，这里很安静，晨光照射下来的时候，人民英雄纪念碑染上了一层金光。
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/19c604c47999f5214596baaa6dc40d8.jpg"
alt="革命烈士 永垂不朽" />
再往下走有一群恬淡的老人，他们在这里打太极，这就是杭州人民悠闲自得的养老生活吧，打打太极喝喝茶，每天都是悠闲乐。
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/94ab43860f015f8ab7c164cb3adbb8f.jpg"
alt="打太极的老人们" /></p>
<p>穿过了他们之后，就来到了白蛇飞度，这里我还是第一次来，感觉这个造景倒是显得很柔适，很婉转，造景和自然融为一体。
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/cafc7b8da24e9b0a2834cfe629299c1.jpg"
alt="白蛇飞度" /></p>
<p>过了白蛇飞度之后是梦幻森林，这里是路途中间的一个部分，在这里并没有过多的停留，马上就此离去，这里的树木之类的倒是称得上是说奇支趣木，倒也是第一次看得如此场景。</p>
<p>再之后便是一路直走，直到八卦田之上，远远眺望过去，先是八卦田，再有蜿蜒的钱塘江，再往后是烟雾朦胧的江南楼阁。</p>
<p><img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/527cab2140ced5baea6d712ecf9b669.jpg"
alt="八卦田与钱塘江" /></p>
<p>过了八卦田之后，再次登上的是福星观，这里有一只灵巧的三花猫，还有可爱的敏子姐，两个可爱就在这里玩闹，也是很开心啊，而且从这里还能看得到西湖边上的雷峰塔，这个倒是十分新奇了。
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/778467b3fa1b4c7e590fd3eeccdd3a5.jpg"
alt="三花猫" />
<!-- ![893ed551707973d0575b635c4d6eddb](https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/893ed551707973d0575b635c4d6eddb.jpg) -->
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/81f9fb1e99bb10ebe04acbe51db70ac.jpg"
alt="81f9fb1e99bb10ebe04acbe51db70ac" /></p>
<p>回去的路上走到西湖边，有两棵梧桐树在阳光下，已经发黄了，叶子悄然的落下，杭州的秋天真的到了吗，或许吧。
<img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/%E6%9D%82%E8%81%8A8/fd57a0057d3648b4c171c10bb2f7c9f.jpg"
alt="fd57a0057d3648b4c171c10bb2f7c9f" /></p>
<p>总结一下今天吧。早起和朋友们一起去西湖边爬山，一路山见识了白蛇飞渡，经历了紫气东来，在八卦田上远眺钱塘江，于福星观一览雷峰塔，登九曜山俯视西湖；一路上有金黄梧桐叶的飘落，也有秋叶茶的新生，有灵动三花猫的闪动，也有朋友们的欢笑。难得的早起把一天的时间都快乐延长，也认识了新的朋友们下次继续快乐登山，远望山水共长天，此情此景永不远，朋友们，咱们下次再见！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>空间转录组不同binsize之间迁移注释</title>
    <url>/2023/3357301420.html</url>
    <content><![CDATA[<p>在做空间转录组分析的时候，我们大多数会使用两种类型的数据，一种是bin100，bin50此类的数据，还有一种则是cellbin的数据，通常我们会使用
bin100/bin50 这样子的数据去做区域的注释，而 cellbin
的数据则是通过单细胞映射空间组，得到细胞类型的数据。但是这两种数据之间的迁移注释是一个问题，因为他们的分辨率不一样，所以我们需要将他们进行迁移注释，让
cellbin 的数据注释上脑区的信息。</p>
<p>首先要明确的是，我们的 bin100/bin50 的数据都是由同一个空间组的 gem
之类的文件生成的，要保证其基准坐标保持不变，这样子才能进行迁移注释。</p>
<p>但是基准不变的话，其实从 bin100 映射到 bin50 与 bin100 映射到 cellbin
其实原理是一样的，都是将 bin100 的数据映射到 bin50 或者 cellbin
的数据上，所以我们可以直接使用 bin100 的数据去做迁移注释。</p>
<p>首先，bin100 的每个 spots 都有一个坐标，但是实际上 bin100 应该是要有
100<em>100 个坐标的，所以我们就需要将其还原回到 100</em>100
的坐标上，这样子才能进行迁移注释，就像图片一样填满了整个背景板，那么这个时候，我们再拿出
bin50 或者 cellbin 的坐标数据，就可以将 bin100 的数据映射到 bin50 或者
cellbin 的数据上，这样子就完成了迁移注释。</p>
<p>但实际上这样子还是会有一些问题，比如某些细胞在两个bin100的正中间，或是其他的一些边界问题，还有很多的其他情况，这些我也没有考虑，笔者总体上觉得大多数的细胞映射还是没有太大问题的。代码如下所示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bin100_2_bin50</span><span class="token punctuation">(</span>bin50_file_path<span class="token punctuation">,</span> bin100_file_path<span class="token punctuation">,</span> bin100_anno<span class="token punctuation">,</span> bin50_anno<span class="token punctuation">,</span> bin50_save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 没有脑区注释</span>
    adata_bin50 <span class="token operator">=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span>bin50_file_path<span class="token punctuation">)</span>
    adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> adata_bin50<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
    adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> adata_bin50<span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
    adata_bin50<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bin50_file_path<span class="token punctuation">)</span>
    
    <span class="token comment"># 有脑区注释的数据</span>
    adata_bin100 <span class="token operator">=</span> sc<span class="token punctuation">.</span>read<span class="token punctuation">(</span>bin100_file_path<span class="token punctuation">)</span>
    
    <span class="token comment"># 构建映射字典 region_1 = 1</span>
    dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>adata_bin100<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin100_anno<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dic<span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>adata_bin100<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin100_anno<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>

    <span class="token comment"># 将每个脑区变换成为 数字 id</span>
    celltype <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    refined <span class="token operator">=</span> adata_bin100<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin100_anno<span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    celltype <span class="token operator">=</span> <span class="token punctuation">[</span>dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> refined<span class="token punctuation">]</span>
    
    <span class="token comment"># 构建大图，并且填写上 id，指脑区信息</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> adata_bin100<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> adata_bin100<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span>
    shape <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span>
    X <span class="token operator">=</span> csr_matrix<span class="token punctuation">(</span><span class="token punctuation">(</span>celltype<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shape<span class="token operator">=</span>shape<span class="token punctuation">)</span>
    X <span class="token operator">=</span> X<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    obs <span class="token operator">=</span> adata_bin100<span class="token punctuation">.</span>obs

    <span class="token comment"># 求出 长度</span>
    bin100_spot_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adata_bin100<span class="token punctuation">)</span>
    
    <span class="token comment"># 转为 bin1 形式，将脑区信息补全</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bin100_spot_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
        X<span class="token punctuation">[</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">:</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">,</span> obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">:</span>obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 脑区映射信息</span>
    dic_reverse <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span>val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>
        dic_reverse<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val
    dic_reverse<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'others'</span>
    
    bin50_spot_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>adata_bin50<span class="token punctuation">)</span>
    
    t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bin50_spot_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    adata_bin50_region_type <span class="token operator">=</span> <span class="token punctuation">[</span>dic_reverse<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">]</span>
    
    adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin50_anno<span class="token punctuation">]</span> <span class="token operator">=</span> adata_bin50_region_type
    adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin50_anno<span class="token punctuation">]</span> <span class="token operator">=</span> adata_bin50<span class="token punctuation">.</span>obs<span class="token punctuation">[</span>bin50_anno<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span>
    
    adata_bin50<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bin50_save_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>欢迎各位评论留言</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>表观遗传学期末</title>
    <url>/2022/2048236357.html</url>
    <content><![CDATA[<h2
id="表观遗传学概念分子机制及表观遗传经典现象">1.表观遗传学概念，分子机制，及表观遗传经典现象</h2>
<p><strong>概念：</strong>
是指在DNA序列不发生改变的情况下，基因表达发生可遗传变异的现象</p>
<p><strong>分子机制：</strong></p>
<ol type="1">
<li>DNA甲基化修饰。是表观遗传的主要形式，DNA甲基化是指在DNA甲基转移酶的作用下，在基因组CpG岛的胞嘧啶五号碳原子上结合一个甲基基团。</li>
<li>组蛋白修饰：主要组蛋白甲基化和去甲基化、乙酰化与去乙酰化、磷酸化和泛素化。修饰的组蛋白改变了与DNA双链的亲和性，从而改变染色质的疏松或凝集状态，或通过影响转录因子与启动子的亲和性来发挥对基因表达的调控作用。</li>
<li>组蛋白变体：染色质由许多核小体组成，核小体是由组蛋白H2A，H2B，H3和H4各两个分子构成的八聚体，H1帮助DNA缠绕在核小体上形成高级结构。其中H2A，H3容易产生变体，H2B和H4不容易产生变体。组蛋白H3变体由H3.3、CENP-A、H3.3t，组蛋白H2A变体由H2A.Z、H2A.X、marco
H2A、H2A.Bob，组蛋白H2B变体由H2BWT，暂未发现更多的其他变体，组蛋白H4最保守，没有变体。</li>
<li>非编码 RNA
调控：长链非编码RNA在基因簇乃至整个染色体水平发挥顺式调节作用。短链RNA在基因组水平对极影表达进行调控，可介导mRNA的降解，诱导染色质结构的改变，还对外源的核酸序列有降解作用以保护本身的基因组。常见的短链RNA为SiRNA和miRNA。</li>
<li>染色质重塑。染色体重塑是指染色体结构和位置的改变。是指在DNA复制或者重组过程中，染色质状态、组蛋白和DNA分子结构发生改变的分子机理。ATP依赖的染色质重塑因子可重新定位核小体，改变核小体结构，共价修饰蛋白。</li>
</ol>
<p><strong>表观遗传经典现象：</strong></p>
<ol type="1">
<li>花斑位置效应（Position-Effect
Variegation）:果蝇中，白眼基因正常情况下是红眼表型，它突变之后果蝇变成白眼睛，但有些果蝇的眼睛表型是红白相间的，不是红眼也不是白眼。而染色体会发生连锁互换，当白眼基因改变位置到靠近某个特殊位置周围上时，才会出现红白相间的眼睛表型，白眼基因改变到其他位置时，没有出现红白相间的眼睛的表型。酵母中，观察到另外一种位置效应现象，由ADE2单个基因决定菌落的颜色为白色，如果将ADE2基因敲掉或者失活时，酵母变成红色或者粉色的菌落。但当ADE2基因改变位置到靠近端粒的位置时，酵母菌落变成红白相间的表型。</li>
<li>Polycomb
沉默效应：果蝇中，正常表型是前腿有性梳，后腿没有性梳，但Polycomb突变体的前后腿都有性疏，该突变体是由于Hox基因额错误调控导致的，这就是单个表观遗传因子突变导致形态建成的错误。通过遗传学的筛选可知，有两大类基因和他们编码的蛋白质对Polycomb是重要的。一类是PcG，Ploycomb家族基因，在不该表达Hox基因的地方抑制Hox基因的表达，如果PcG基因被破坏了，Hox基因就会错误表达，此时Polycomb家族基因的作用是抑制基因表达，因此成为Polycomb沉默相应。trxG是三胸基因家族，维持Hox基因的表达。</li>
<li>X染色体失活：磁性哺乳动物只有一条x染色体有活性，另外一条x染色体高度甲基化，浓缩形成异染色质，是去表达活性。</li>
<li>基因组印记：等位基因在父源染色体和母源染色体上表达情况不同，即一个亲本的等位基因表达，另一个不表达或很少表达。是双亲的等位基因发生不对称修饰导致的。</li>
<li>植物副突变：在植物中，由于等位基因之间的相互作用，一个等位基因可以使其同源基因发生稳定的可遗传的变化。</li>
</ol>
<p>二、在真核生物中，基因组DNA会压缩形成复杂的染色质结构，染色质结构及其生物学功能和作用机制？
染色质结构：
一级结构：核小体串珠结构。核小体是由组蛋白H2A，H2B，H3，H4各两分子组成的八聚体结构。双螺旋DNA缠绕在组蛋白八聚体上，组蛋白H1介导核小体相互连接形成直径约11nm的核小体串珠结构。
二级结构：螺线管结构。核小体串珠结构螺旋盘绕，每6~8个核小体形成30nm螺线管结构。30nm染色质纤维结构是由四聚核小体为结构单元的左手螺旋结构。
三级结构：超螺线管结构。螺线管进一步螺旋化形成直径为0.4μm的圆筒状结构，这种超螺线管结构就是染色体三级结构。
四级结构：超螺线管进一步螺旋折叠，形成长2~10μm的染色单体，即染色质包装的四级结构。</p>
<p>生物学作用：</p>
<ol type="1">
<li>染色质是遗传物质的载体。DNA携带了生命个体完整的遗传信息，DNA与组蛋白交联形成核小体，核小体交缠形成染色体，因此染色体是遗传物质的载体。</li>
<li>染色质是生命信息的调控平台。真核生物的基因组在细胞中以染色质的形式存在，染色质的结构和功能与基因的表达与遗传密切相关。如DNA的复制、转录、重组、突变、修复、非编码RNA的传播、胚胎发育等生理功能都是在染色体平台下完成的。</li>
<li>染色质是表观遗传的调控平台。是存储表观遗传信息的场所，如组蛋白修饰、染色质重塑等都是在染色体平台上进行的，染色质在基因转录、细胞命运、生殖发育、疾病发生等不同层次调控。</li>
</ol>
<p>作用机制：染色质通过表观遗传机制，改变染色体三维结构，最终影响基因的表达。组蛋白修饰，如组蛋白甲基化、去甲基化、乙酰化、泛素化修饰等。DNA修饰，如DNA的甲基化、去甲基化、乙酰化、泛素化修饰等。组蛋白变体，染色质重塑因子。</p>
<p>三、简述三维基因研究领域的最新进展
基因组三维结构与功能的研究称为三维基因组学。</p>
<ol type="1">
<li>一级结构包括：DNA序列、核小体定位、DNA甲基化。方法：DNA-seq、CHIP-seq、WGBS、RRBS、TAB-seq、ATAC-seq</li>
<li>二级结构：核小体串珠结构螺旋盘绕、形成30nm螺线管结构。方法：Micro-C，染色质构想捕捉技术、RICC-seq，揭示哺乳动物细胞中30nm染色质结构的zig-zag结构</li>
<li>高级结构：染色质的空间构想，包括染色体环状结构，染色质-染色质相互作用形成的染色质拓扑结构域，染色质-核结构相互作用形成的染色质区域，染色体在细胞核内定位于疆域。方法：3C、4C、5C、single
cell HiC、CHIA-PET、In situ Hi-C、Capture-C</li>
</ol>
<p>四、哺乳动物与高等植物种DNA甲基化图谱分别如何建立？DNA甲基化的主要生物学作用？</p>
<ol type="1">
<li>从头甲基化是指甲基化转移酶的作用下，不依赖已有的甲基化DNA链而在一个新位点将DNA链中的胞嘧啶C5甲基化。</li>
<li>维持甲基化是指在甲基化DNA半保留复制产生的新生链的相应位置上进行的甲基化修饰，且新生链仅在与亲本链甲基化位置相同的碱基位置发生甲基化。</li>
<li>植物DNA甲基化修饰主要发生在CpG、CpGpG与CpHpH
三种序列中，高等植物从头甲基化需要DRM2。CG甲基化维持需要MET1，CHG甲基化维持需要CMT3，CHH甲基化维持需要CMT2和DRM2。</li>
<li>哺乳动物DNA甲基化只发生在CpG岛的胞嘧啶，基本上都是5位的甲基化。甲基化图谱的从头建立：DNMT3A和DNMT3B，DNMT1。甲基化图谱的维持需要DNMT1。</li>
</ol>
<p>作用：</p>
<ol type="1">
<li>转录沉默：DNA甲基化可以作为基因开关，抑制基因转录。可能的机制有两种：
<ul>
<li>DNA本身的甲基化可能在物理上阻碍转录的那白与基因的结合</li>
<li>DNA甲基化可以招募组蛋白去甲基化酶和其他染色质重塑因子，从而形成致密的染色质。</li>
</ul></li>
<li>沉默转座原件：DNA甲基化所形成的稳定的染色质环境保证了转座元件的沉默，组织转座原件在基因组上随意跳动，确保了基因组的稳定性。</li>
<li>维持基因组印记：基因组印记指等位基因在父源染色体上和母源染色体上表达情况不同，基因印记与基因中CpG岛的甲基化密切相关，CpG岛甲基化与否决定基因是否沉默。</li>
<li>X染色体失活：是指雌性哺乳动物细胞中两条X染色体的其中之一失去活性的现象，一条X染色体高度甲基化，浓缩形成异染色质，失去表达活性。</li>
</ol>
<p>五、主要的DNA 甲基化测序方法</p>
<ol type="1">
<li>抗体介导的免疫沉淀方法：哺乳动物中甲基化一般发生在CpG的胞嘧啶5位碳原子上。将基因组DNA超声打断，使用5'甲基胞嘧啶抗体富集高甲基化的DNA片段，对甲基化DNA片段进行测序，而从检测全基因组范围内的甲基化位点。</li>
<li>甲基化敏感的内切酶介导的方法：甲基化敏感的限制性内切酶无法切割甲基化的位点，使用MSPI酶切基因组DNA，根据大小选择片段，腹肌基因组DNA上富含CCGG位点的片段，然后经过亚硫酸盐处理，然后测序分析。</li>
<li>基于亚硫酸盐处理的芯片方法：用亚硫酸盐处理的基因组DNA，未甲基化的C会变成U，甲基化的C没有变化。通过芯片杂交，监测甲基化位点</li>
<li>全基因组亚硫酸盐测序：亚硫酸盐处理基因组DNA，发生甲基化的胞嘧啶不变，而未甲基化的胞嘧啶会变成尿嘧啶，PCR扩增后测序，分析得出甲基化位点。</li>
</ol>
<p>相对WGBS而言RRBS技术作为高性价比的甲基化测序方案，其测序量大幅减少，在大规模临床样本研究中具有广泛的应用价值。</p>
<p>六、组蛋白贡献修饰的种类</p>
<ol type="1">
<li><p>组蛋白乙酰化和去乙酰化</p>
<ul>
<li>组蛋白乙酰化是多发生在核心组蛋白N端碱性氨基酸集中区的特定Lys残基上。Lys侧链有氨基，带正电荷，能够与带负电荷的DNA紧密结合。组蛋白乙酰转移酶将乙酰基转移到Lys的氨基上后，Lys上的正电荷被中和，增加了组蛋白与DNA的排斥力，是的染色质结构松散，进而促进基因表达。</li>
<li>去乙酰化是组蛋白去乙酰化酶使组蛋白去乙酰化，与带负电的DNA紧密结合，染色质致密卷曲，基因转录受抑制。</li>
<li>哺乳动物细胞中赖氨酸乙酰化的半衰期有5~8分钟。乙酰化酶没有特异的赖氨酸位点。</li>
</ul></li>
<li><p>组蛋白甲基化和去甲基化</p>
<ul>
<li>组蛋白甲基化是由组蛋白甲基化转移酶HMT完成的，可以发生在赖氨酸和精氨酸的残基上。赖氨酸可以分别被单、双、三甲基化，精氨酸只能被单、双甲基化，不同程度的甲基化极大的增加了组蛋白修饰和调节基因表达的复杂性。组蛋白赖氨酸甲基化可以激活和抑制基因转录，这取决于具体的情况，组蛋白精氨酸甲基化是相对动态的标记，与基因激活相关。</li>
<li>组蛋白甲基化转移酶有两类，赖氨酸甲基转移酶和精氨酸甲基转移酶。赖氨酸甲基转移酶根据结构域不同分为SET类型和非SET类型，SET结构域是组蛋白甲基化转移酶的重要结构域，也是大多数转移酶含有的结构域，负责甲基转移酶的酶促活性。精氨酸甲基转移酶根据其酶促活性分为三类，分别是催化精氨酸单甲基化、非对称和对称二甲基化转移酶。</li>
<li>组蛋白去甲基化酶，有赖氨酸特异性去甲基化酶lsd和JMJC家族，他们利用不同的反应机理去甲基。</li>
</ul></li>
<li><p>组蛋白磷酸化</p></li>
<li><p>组蛋白泛素化</p></li>
</ol>
]]></content>
      <categories>
        <category>表观遗传学</category>
      </categories>
      <tags>
        <tag>表观遗传学</tag>
      </tags>
  </entry>
  <entry>
    <title>杂聊9</title>
    <url>/2023/4204219029.html</url>
    <content><![CDATA[<p>醒来已然是九点多了，磨磨蹭蹭，拉屎撒尿，洗洗刷刷，就到了十点，想着上午去游泳，于是便速速又把屋子收拾了一下，发现了好多之前早就要扔掉，但是没有扔掉的事物。比如自己之前用完的洗发水空瓶子，某天夜晚吃烧烤顺便买的一瓶快乐水，好多月之前吃完的锅巴的盒子，以及平时擦桌子，擦鼻涕，擦污渍之类的纸巾，居然还在堆着。于是便把这些东西都扔掉了。</p>
<p>但是还是有一些其他的杂物的，比如之前洗干净的衣服；按照之前的习惯可能就是洗完了就放在外面一直晾着了，但是最近这天气属实是较差，时不时风雨大作，实属不想再打开阳台门了，于是在某一个雨夜，把衣服都收了进来，倒也没有怎么叠衣服，只是很粗略的放在了衣筐上面，已是许久都没有打理了，也不是很难收拾，大概是我实在是懒，也不想去收拾，于是就一直放着了。今天想到了这事情了，就把衣服都收拾了一下，叠好了，放在了衣柜里面，细细数数，倒确实是没事情了。</p>
<p>去了宿舍对面吃了沙县，一个鸭腿，两个豆干，就当是十点半的早饭了，之后便是骑车匆匆前往三公里外的游泳馆。</p>
<p>天冷了倒是没什么人了，倒也显得泳池很是开阔，只是这池子里面的水位却是下降了不少。</p>
<p>想来学会游泳是大一时候了，那也是五年前的日子了，之前在杭州游了几次属实是发现了自己的肺活是真的比较差，动作也并不标准，还是需要多多练习的，之前已经练了三五次的蛙泳了，今天的目标便是能够在2.2m游够一个来回，倒也不是很难，但是不会浮水确实是个问题，需要之后抽个时间把浮水练习一下，这样子才不会溺水（大概），还是比较恐惧的，对于那种触及不到底的感觉，不过倒也是能够游到了，不过还是有点累，不过也是因为之前没有练习过，之后多练习一下，应该就没问题了。</p>
<p>昨天练了腿，今天又是游泳，可以说中午回去就已经是累的不行了，把今天的剩余的时间都放到了背单词上面，今天安排了八百个单词，属于是每周休闲背一下了，晚上时候又加了一组健身，原先是周一健身的，但是周二上午体检，倒是稍稍往前推了一些。</p>
<p>周末啊，过的还是蛮快的。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>杂聊</tag>
      </tags>
  </entry>
  <entry>
    <title>计算某个区域中细胞的复杂性</title>
    <url>/2023/959813387.html</url>
    <content><![CDATA[<p>在某系空间组图谱文章中，我们经常会看到一种图片，是去计算某个区域中细胞的复杂性，我们以今年在
Cell
上发表的一篇文章为例，来看看如何计算某个区域中细胞的复杂性。文章名字为Single-cell
spatial transcriptome reveals cell-type organization in the macaque
cortex，文章链接为：<a
href="https://linkinghub.elsevier.com/retrieve/pii/S0092867423006797"
class="uri">https://linkinghub.elsevier.com/retrieve/pii/S0092867423006797</a>
，图二中有这么一张图片： <img
src="https://raw.githubusercontent.com/zEpoch/imageHome/main/blog/calculate_neighborhood_complexity/20231229110148.png"
alt="20231229110148" /></p>
<p>I图的意思是不同的 Layer
中的每个细胞的复杂度分布，每个细胞的复杂的计算为，以每个细胞为圆心，200个像素为半径，画一个圆圈，计算这个圆圈中和这个细胞的类型不同的细胞类型个数。根据这个理解，我们便是可以写程序了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先是包的引入</span>
<span class="token keyword">import</span> anndata <span class="token keyword">as</span> ad
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> scanpy <span class="token keyword">as</span> sc
<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">import</span> FuncFormatter
<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里我写了三个函数，三个函数的计算速度是一个比一个快，但是易理解程度是一个比一个难</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一个函数是非常常见的我们所理解的遍历所有的细胞</span>
<span class="token keyword">def</span> <span class="token function">calculate_neighborhood_complexity</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
    neighborhood_complexities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> central_cell<span class="token punctuation">,</span> central_cluster_label <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        complexity <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">for</span> cell<span class="token punctuation">,</span> cluster_label <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
            distance <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>cell <span class="token operator">-</span> central_cell<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> distance <span class="token operator">&lt;=</span> radius <span class="token keyword">and</span> cluster_label <span class="token keyword">not</span> <span class="token keyword">in</span> cluster_labels<span class="token punctuation">[</span><span class="token punctuation">:</span>complexity<span class="token punctuation">]</span><span class="token punctuation">:</span>
                complexity <span class="token operator">+=</span> <span class="token number">1</span>

        neighborhood_complexities<span class="token punctuation">.</span>append<span class="token punctuation">(</span>complexity<span class="token punctuation">)</span>

    complexity_counts <span class="token operator">=</span> Counter<span class="token punctuation">(</span>neighborhood_complexities<span class="token punctuation">)</span>
    total_cells <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>neighborhood_complexities<span class="token punctuation">)</span>
    complexity_probabilities <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        complexity<span class="token punctuation">:</span> count <span class="token operator">/</span> total_cells <span class="token keyword">for</span> complexity<span class="token punctuation">,</span> count <span class="token keyword">in</span> complexity_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>neighborhood_complexities<span class="token punctuation">)</span><span class="token punctuation">,</span> complexity_probabilities

<span class="token comment"># 第二个函数则是利用了一些 numpy 的函数，速度比第一个函数快了很多</span>
<span class="token keyword">def</span> <span class="token function">calculate_neighborhood_complexity</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
    unique_labels<span class="token punctuation">,</span> label_indices <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>cluster_labels<span class="token punctuation">,</span> return_inverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    complexity_counts <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> central_cell <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span><span class="token punctuation">:</span>
        distances <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>cell_coordinates <span class="token operator">-</span> central_cell<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        mask <span class="token operator">=</span> np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>distances <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> distances <span class="token operator">&lt;=</span> radius<span class="token punctuation">)</span>
        previous_complexities <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> cell_idx<span class="token punctuation">,</span> cluster_idx <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>label_indices<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> cluster_idx <span class="token keyword">not</span> <span class="token keyword">in</span> previous_complexities<span class="token punctuation">:</span>
                complexity_counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                previous_complexities<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cluster_idx<span class="token punctuation">)</span>
    
    total_cells <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span>
    complexity_probabilities <span class="token operator">=</span> np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>complexity_counts<span class="token punctuation">)</span> <span class="token operator">/</span> total_cells
    
    <span class="token keyword">return</span> complexity_counts<span class="token punctuation">,</span> complexity_probabilities

<span class="token comment"># 第三个函数则是利用了 KD 树，在建树的时候就把边进行的维护，速度比第二个函数快了很多</span>
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>spatial <span class="token keyword">import</span> cKDTree

<span class="token keyword">def</span> <span class="token function">calculate_neighborhood_complexity</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
    unique_labels<span class="token punctuation">,</span> label_indices <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>cluster_labels<span class="token punctuation">,</span> return_inverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    complexity_counts <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token comment"># Build a KD-tree from the cell coordinates</span>
    kdtree <span class="token operator">=</span> cKDTree<span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i<span class="token punctuation">,</span> central_cell <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Query the KD-tree to find the cell indices within the radius</span>
        neighbor_indices <span class="token operator">=</span> kdtree<span class="token punctuation">.</span>query_ball_point<span class="token punctuation">(</span>central_cell<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>
        previous_complexities <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> cell_idx<span class="token punctuation">,</span> cluster_idx <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>neighbor_indices<span class="token punctuation">,</span> label_indices<span class="token punctuation">[</span>neighbor_indices<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> cluster_idx <span class="token keyword">not</span> <span class="token keyword">in</span> previous_complexities<span class="token punctuation">:</span>
                complexity_counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                previous_complexities<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cluster_idx<span class="token punctuation">)</span>

    total_cells <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">)</span>
    complexity_probabilities <span class="token operator">=</span> np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>complexity_counts<span class="token punctuation">)</span> <span class="token operator">/</span> total_cells

    <span class="token keyword">return</span> complexity_counts<span class="token punctuation">,</span> complexity_probabilities<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么应该如何是用，以及如何绘制图片呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># adata 为空间组的数据</span>
<span class="token comment"># obs 中的 region 为脑区的信息</span>
<span class="token comment"># obs 中的 celltype 为细胞类型的信息</span>
<span class="token comment"># obsm 中的 spatial 为细胞的坐标信息</span>
<span class="token comment"># layer 为各个层的信息</span>
<span class="token comment"># 实测速度 第一个函数对于 20k 细胞，大概 15 min 左右， 第二个函数大概 5s 左右，第三个函数大概 1.5s 左右</span>
cell_coordinates_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer4'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obsm<span class="token punctuation">[</span><span class="token string">'spatial'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
cluster_labels_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    adata<span class="token punctuation">[</span>adata<span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'layer4'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">[</span><span class="token string">'celltype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'layer1'</span><span class="token punctuation">,</span> <span class="token string">'layer2'</span><span class="token punctuation">,</span> <span class="token string">'layer3'</span><span class="token punctuation">,</span> <span class="token string">'layer4'</span><span class="token punctuation">]</span>

radius_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>

fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">,</span> radius<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>cell_coordinates_list<span class="token punctuation">,</span> cluster_labels_list<span class="token punctuation">,</span> radius_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    complexities<span class="token punctuation">,</span> complexity_probabilities <span class="token operator">=</span> calculate_neighborhood_complexity<span class="token punctuation">(</span>cell_coordinates<span class="token punctuation">,</span> cluster_labels<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>

    sns<span class="token punctuation">.</span>kdeplot<span class="token punctuation">(</span>complexities<span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Neighborhood Complexity'</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Probability (%)'</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Brain Neighborhood Complexity Distribution'</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span>

<span class="token comment"># Format y-axis labels as percentages</span>
ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>FuncFormatter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> _<span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token format-spec">.0f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'Brain_Neighborhood_Complexity_Distribution.pdf'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>画出来的结果便是 Cell 的图片的样子了</p>
]]></content>
      <categories>
        <category>tech</category>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>身体是革命的本钱</title>
    <url>/2022/3627254244.html</url>
    <content><![CDATA[<p>最开始感到身体不适的时候，大概是在六月初，那时候觉得右下腹隐隐不适，但是并不疼痛，我一直以为是肝脏出了问题，随机买了护肝片，然后减少了熬夜。起初还是有一些效果，不适程度减少了很多，但是不到一周的时间又开始了，那是我正在做俯卧撑的时候，毕业的那段时间是每天一百个俯卧撑，那天俯卧撑的时候，突然觉得右胸猛的一痛，就像是要被撕裂了一般，随机停止了，然后上床休息。这便是已经六月中了。</p>
<p>之后便是毕业典礼之类类的事情，这时候大概一直右胸下部都有一种异物感，还是觉得是肝脏的问题，于是去校医院做了肝胆检查，检查结果表示一切正常，所以觉得，是不是健身练的太多了，导致肌肉拉伸了？虽然那个部位肌肉确实没有怎么练到，但是确实就没有继续往下面检查。</p>
<p>时间到了28号，毕业前往深圳，去华大实习，师兄给安排了食宿，然后自己去办理入职，入职需要入职体检，随机去了医院进行体检，血常规没有什么问题，检查心率的时候当时心率达到了116，医生说让做个心电图，这是上午的时候。下午体检结果出来，医生说我X光有问题，肺部有密集的阴影，需要做个CT进行深度检查，然后赶忙去做了CT，然后又去做了心电图，心电图倒是一切正常，还是往常的窦性心律，还有个右束支什么的东西，倒是青少年常见问题了。</p>
<p>拿到CT结果已经是体检第二天的事情了，可以很清楚的看到我的肺部几乎四分之一都被感染了，医生问我痛不痛，我倒是没有觉得有痛感，只是觉得有异物感。也不知道这身体素质是好还是坏，说他好吧，他年纪轻轻染了肺炎，说他差吧，这么大的验证正常人早就疼晕过去了，他偏偏好端端的，要不是体检查出来了，估计这身体还能再挺一个月。</p>
<p>医生说我情况已经很严重了，但是从CT来看确实也没有积液，当时便是建议我住院，可惜我深圳没有医保，还是回家好好治疗吧。出CT结果的那天下午定了回家的车票，第二天早上七点多到家了，然后回家吃了妈妈做的早饭，赶忙去了医院，直接找到了呼吸内科，医生一看我的CT结果哦，立即给我安排了住院，好运的事情是当时医院里面空闲床位还是蛮多的，于是住院相关的工作安排的还是比较容易的。</p>
<p>接下来便是住院的生活了，开始的两天发烧不断，吃了退烧药后便是没有再发烧了，之后便是每日的抗生素输入，每天输液三次，早上九点钟一次输液，下午四点一次，晚上十二点一次，三次输液，使得抗生素在我身体里面一直流动着，住院住了半个月，然后开了药，八月的时候身体仍然感觉不是那么好，去复查发现没有什么问题，后来又去做了CT，确实炎症已经完全消除了，但是粘膜之类的还没有完全修复，还会咳嗽有痰。</p>
<p>最近又嗝气，又开了一些脾胃的中药，大概又要喝药到开学了。</p>
<p>这段时间真的好难受啊，什么东西都学不进去，不可避免的发烧，感到身体急躁，虽然也是把R语言过了一遍，然后又把英语捡了回来，也算是逐渐步入正轨了吧，希望之后不要再有疾病了，身体真的是十分影响我的生活工作和学习。身体是革命的本钱啊。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>疾病</tag>
      </tags>
  </entry>
  <entry>
    <title>返校3周，国科大加重了我的精神内耗</title>
    <url>/2022/4038513713.html</url>
    <content><![CDATA[<p>今天北大出入校改成自动报备了，本科同学们在约饭，我说我在坐牢去不了。</p>
<p>我想起上周中秋节，老师说出校只能当天去当天回，在外过夜需要自费隔离三天，可能是担心我半夜着凉。看了眼怀密线每晚6点的末班车，毅然鸽了同学。假期一结束，又说在外过夜不用隔离了。</p>
<p>能知道中秋节能回家这个消息，还是某个微信群里看到的。该群有段时间一直在锐评学校的出入校政策，后来有几个群友被老师谈话了。现在群已经没了，没准不是学校要求解散的。</p>
<p>倒也不是不能出校，3个星期之前我出了一次，不过是被救护车拉走的，170块钱不知道什么时候能报销。疯狂星期四那天，不知道怎么想的，我在怀柔医院点了一顿麦当劳。</p>
<p>国科大企业微信的疫情防控里需要每日上报，我每次填的都是“当天住在校外”、“昨日没做核酸”，没人理我。当你试图叛逆的时候，没人在乎才是最尴尬的。就在我心灰意冷进教学楼的时候，忘了扫健康码，被工作人员追了10米，这才稍微安心一点。</p>
<p>既然大学生风险这么高，不如改成网课，毕竟还要麻烦老师和其他工作人员每天进出学校，怕传染给他们的家人。</p>
<p>其实说是想出校，来回一趟5、6个小时，周末我也懒得回。不适应这种“非必要不出校”的生活罢了，我觉得，只要我想出，那就是必要的，我可以不出，但你不能不让我出。我已经在离科学最近的地方偷着乐了。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>这个生化怎么这么多啊</title>
    <url>/2021/887319650.html</url>
    <content><![CDATA[<p>复习考研，第一门难啃的课就是生物化学，三本书，将近两千页的内容，全是字，淦，怎么背的会哦，当年就是生物化学没有学好，才落得现在没得保研，只能呆呆地考研，谁知道考研也需要学生物化学！淦，我心态炸裂。</p>
<span id="more"></span>
<p>但其实看看也还挺不错的，确实感觉到自己的脑袋里关于生物化学的好多东西都是并不是很清楚，虽然是做过很多的实验，但是好多实验的原理也是在重新开始看书后才真正了解。（对于我大学时期做过的实验，也许我真的了解的也就是操作系统，数据结构之类的了）但是到现在也才看到三百多页是真的心情很不好，确实感觉到自己对于生物这个需要花费很大功夫来背诵的科目感到不是很舒服。关键这东西也不是什么马原毛概之类的，我倒是觉得马原毛概之类的倒是挺有意思的，想起来了看一看，一看就是半本书，还停不下来，确实是因为其中包含了很多的解决问题的方法，很多的哲学的思考，很多的看了让人感到心情极其振奋的思想。</p>
<p>昨晚失眠到了三点多，今天又是八点起的，中午居然还没睡，中午摸了一下脸颊下巴两侧又是张出了痘痘，懊恼，我怎么就这么运气不好哦，要是生物有写代码那么容易就好了。</p>
<p>前路漫漫，读书作伴。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>生物化学</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Gitalk 评论系统</title>
    <url>/2021/3238021801.html</url>
    <content><![CDATA[<p>新搭建完成了 Hexo
博客，我想让他拥有一个评论系统，这需要借助插件的力量。找来找去，找到了
<a href="https://gitalk.github.io/">Gitalk Demo |
Aotu.io「凹凸实验室」</a>，也是 Next 主题支持的评论系统。</p>
<p>首先需要在 <a href="https://github.com/settings/developers">Developer
applications (github.com)</a> 新建一个 OAuth applications 。</p>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717145357156.png"
alt="image-20210717145357156" /></p>
<p>填写上应用名称，主页地址，应用描述和回调地址便是可以了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150243955.png"
alt="image-20210717150243955" /></p>
<p>在这里你可以看到你的 Client ID 以及生成 Client secrets。</p>
<p>可以新建一个仓库来存放评论，也可以直接将评论存放到你存放博客的仓库。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150152175.png"
alt="image-20210717150152175" /></p>
<p>接下来，打开 Next 主题下的 _config.yml 配置文件，搜索
gitalk，便是找到了我们的 gitalk 配置。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150442412.png"
alt="image-20210717150442412" /></p>
<p>将 enable 设置为 true，写入之前我们设置好的
评论仓库的名字，以及生成的 client_id 和 client_secret，便是可以了。</p>
<p>之后便是日常的发布到 github 了，让我们来测试一下是否是
配置成功吧！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717151022732.png"
alt="image-20210717151022732" /></p>
<p>配置很成功哦！如果出现了下图的情况，可以点击使用 github
登陆初始化便可。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717151100839.png"
alt="image-20210717151100839" /></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲各个编程语言的特点</title>
    <url>/2022/1075637985.html</url>
    <content><![CDATA[<p>目前呢，市面上主流的编程语言有
PHP、Java、Python、C、C++、JavaScript等，这些语言呢也是各有千秋，今天呢，就用简短的话语细数一下他们的特点。</p>
<p>PHP：没有优点</p>
<p>Java：库多，库多，库多</p>
<p>Python：语法清楚，语法清楚，语法清楚</p>
<p>C：能操纵底层，能细粒度优化性能</p>
<p>C++：啥都有，啥都有，啥都有</p>
<span id="more"></span>
<p>汇编： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425165909.png"
alt="20220425165909" /></p>
<p>C语言： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425165936.png"
alt="20220425165936" /></p>
<p>Java： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425165949.png"
alt="20220425165949" /></p>
<p>C#： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170016.png"
alt="20220425170016" /></p>
<p>PHP： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170031.png"
alt="20220425170031" /></p>
<p>Python： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170044.png"
alt="20220425170044" /></p>
<p>Go： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170105.png"
alt="20220425170105" /></p>
<p>Haskell： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170119.png"
alt="20220425170119" /></p>
<p>Lisp： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170138.png"
alt="20220425170138" /></p>
<p>最后是 C++： <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/讲讲各个编程语言的特点/20220425170152.png"
alt="20220425170152" /></p>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
